<?xml version="1.0" encoding="UTF-8"?>
<exportedData version="90" buildLabel="build_main_139827_2019.11.07_06:46:40" buildVersion="9.2.0.139827" passkey="d671432cab324112b451d468dfc795269e5871d4">
  <exportPath>/projects/Release Demo-3.0</exportPath>
  <project>
    <projectName>Release Demo-3.0</projectName>
    <resourceName>local</resourceName>
    <tracked>0</tracked>
    <acl>
      <inheriting>1</inheriting>
      <tracked>0</tracked>
      <aclEntry>
        <allowChangePermissions>1</allowChangePermissions>
        <allowExecute>1</allowExecute>
        <allowModify>1</allowModify>
        <allowRead>1</allowRead>
        <denyChangePermissions>0</denyChangePermissions>
        <denyExecute>0</denyExecute>
        <denyModify>0</denyModify>
        <denyRead>0</denyRead>
        <principalName>admin</principalName>
        <principalType>user</principalType>
        <tracked>0</tracked>
      </aclEntry>
      <aclEntry>
        <allowChangePermissions>1</allowChangePermissions>
        <allowExecute>1</allowExecute>
        <allowModify>1</allowModify>
        <allowRead>1</allowRead>
        <denyChangePermissions>0</denyChangePermissions>
        <denyExecute>0</denyExecute>
        <denyModify>0</denyModify>
        <denyRead>0</denyRead>
        <principalName>project: Release Demo-3.0</principalName>
        <principalType>user</principalType>
        <tracked>0</tracked>
      </aclEntry>
    </acl>
    <propertySheet>
      <credentialProtected>0</credentialProtected>
      <tracked>0</tracked>
      <acl>
        <inheriting>1</inheriting>
        <tracked>0</tracked>
      </acl>
      <property>
        <propertyName>config</propertyName>
        <tracked>0</tracked>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>apps</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>[&#10;	[&#10;		name: "Account Statements",&#10;		artifactName: "statements",&#10;		versions: ["2.1","2.2","2.3","2.4"],&#10;		tiers: ["app":"Apache","db":"Oracle","web":"JBoss"]&#10;	],&#10;	[&#10;		name: "Credit Card Accounts",&#10;		artifactName: "cards",&#10;		versions: ["5.0","5.1","5.5","5.7"],&#10;		tiers: ["app":"Apache","db":"Oracle","web":"JBoss"]&#10;	],&#10;	[&#10;		name: "Fund Transfer",&#10;		artifactName: "fund",&#10;		versions: ["1.7","1.8","2.0","2.1"],&#10;		tiers: ["app":"Apache","db":"Oracle","web":"JBoss"]&#10;	]&#10;]&#10;</value>
          </property>
          <property>
            <propertyName>artifactGroup</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>com.acmebank.apps</value>
          </property>
          <property>
            <propertyName>pipe</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>[&#10;	name: "Biweekly Sprints",&#10;	stages: ["UAT", "STG", "PROD"]&#10;]&#10;</value>
          </property>
          <property>
            <propertyName>projName</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>Online banking</value>
          </property>
          <property>
            <propertyName>releases</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>[&#10;	[&#10;		name: "Biweekly 1-2020",&#10;		plannedStartDate: "2020-6-29",&#10;		plannedEndDate: "2020-7-10",&#10;		versionIndex: 1&#10;	],&#10;	[&#10;		name: "Biweekly 2-2020",&#10;		plannedStartDate: "2020-7-13",&#10;		plannedEndDate: "2020-7-24",&#10;		versionIndex: 2&#10;	],		&#10;	[&#10;		name: "Biweekly 3-2020",&#10;		plannedStartDate: "2020-7-27",&#10;		plannedEndDate: "2020-8-7",&#10;		versionIndex: 3&#10;	],&#10;]&#10;</value>
          </property>
        </propertySheet>
      </property>
      <property>
        <propertyName>logs</propertyName>
        <tracked>0</tracked>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>Thu Jun 25 14:10:58 2020</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>Plugin Name: Release Demo-3.0&#10;Current directory: /opt/electriccloud/electriccommander/plugins/EC-PluginManager-1.5.1.201905171/cgi-bin&#10;&lt;responses version="2.3" dispatchId="11136" nodeId="172.20.0.8"&gt;&#10;  &lt;response requestId="9" nodeId="172.20.0.8"&gt;&#10;    &lt;project&gt;&#10;      &lt;projectId&gt;f248af95-aaba-11ea-b087-0242ac140008&lt;/projectId&gt;&#10;      &lt;projectName&gt;Release Demo-3.0&lt;/projectName&gt;&#10;      &lt;createTime&gt;2020-06-10T01:37:29.356Z&lt;/createTime&gt;&#10;      &lt;lastModifiedBy&gt;admin&lt;/lastModifiedBy&gt;&#10;      &lt;modifyTime&gt;2020-06-10T01:37:29.356Z&lt;/modifyTime&gt;&#10;      &lt;owner&gt;admin&lt;/owner&gt;&#10;      &lt;pluginKey&gt;Release Demo&lt;/pluginKey&gt;&#10;      &lt;pluginPromoted&gt;0&lt;/pluginPromoted&gt;&#10;      &lt;pluginWizardBased&gt;0&lt;/pluginWizardBased&gt;&#10;      &lt;processCount&gt;0&lt;/processCount&gt;&#10;      &lt;propertySheetId&gt;f27da24c-aaba-11ea-b087-0242ac140008&lt;/propertySheetId&gt;&#10;      &lt;stageCount&gt;0&lt;/stageCount&gt;&#10;      &lt;supportsConfigurations&gt;0&lt;/supportsConfigurations&gt;&#10;      &lt;tracked&gt;0&lt;/tracked&gt;&#10;    &lt;/project&gt;&#10;  &lt;/response&gt;&#10;  &lt;advisory&gt;&#10;    &lt;advisoryMessage&gt;Your CloudBees Flow Server license expires on 2020-07-07.&lt;/advisoryMessage&gt;&#10;  &lt;/advisory&gt;&#10;&lt;/responses&gt;</value>
          </property>
        </propertySheet>
      </property>
      <property>
        <propertyName>clean</propertyName>
        <expandable>1</expandable>
        <suppressValueTracking>0</suppressValueTracking>
        <tracked>0</tracked>
        <value>&#10;ectool deleteProject "Online banking"&#10;ectool deleteResource "UAT_Online banking_Apache_1"&#10;ectool deleteResource "UAT_Online banking_Oracle_1"&#10;ectool deleteResource "UAT_Online banking_JBoss_1"&#10;ectool deleteResource "STG_Online banking_Apache_1"&#10;ectool deleteResource "STG_Online banking_Oracle_1"&#10;ectool deleteResource "STG_Online banking_JBoss_1"&#10;ectool deleteResource "PROD_Online banking_Apache_1"&#10;ectool deleteResource "PROD_Online banking_Apache_2"&#10;ectool deleteResource "PROD_Online banking_Apache_3"&#10;ectool deleteResource "PROD_Online banking_Apache_4"&#10;ectool deleteResource "PROD_Online banking_Apache_5"&#10;ectool deleteResource "PROD_Online banking_Oracle_1"&#10;ectool deleteResource "PROD_Online banking_Oracle_2"&#10;ectool deleteResource "PROD_Online banking_Oracle_3"&#10;ectool deleteResource "PROD_Online banking_Oracle_4"&#10;ectool deleteResource "PROD_Online banking_Oracle_5"&#10;ectool deleteResource "PROD_Online banking_JBoss_1"&#10;ectool deleteResource "PROD_Online banking_JBoss_2"&#10;ectool deleteResource "PROD_Online banking_JBoss_3"&#10;ectool deleteResource "PROD_Online banking_JBoss_4"&#10;ectool deleteResource "PROD_Online banking_JBoss_5"&#10;ectool deleteResource "Commit_Online banking_Apache_1"&#10;ectool deleteResource "Commit_Online banking_Oracle_1"&#10;ectool deleteResource "Commit_Online banking_JBoss_1"&#10;ectool deleteArtifact "com.acmebank.apps.statements:app"&#10;ectool deleteArtifact "com.acmebank.apps.statements:db"&#10;ectool deleteArtifact "com.acmebank.apps.statements:web"&#10;ectool deleteArtifact "com.acmebank.apps.cards:app"&#10;ectool deleteArtifact "com.acmebank.apps.cards:db"&#10;ectool deleteArtifact "com.acmebank.apps.cards:web"&#10;ectool deleteArtifact "com.acmebank.apps.fund:app"&#10;ectool deleteArtifact "com.acmebank.apps.fund:db"&#10;ectool deleteArtifact "com.acmebank.apps.fund:web"&#10;ectool deleteArtifact "com.acmebank.apps.statements:app"&#10;ectool deleteArtifact "com.acmebank.apps.statements:db"&#10;ectool deleteArtifact "com.acmebank.apps.statements:web"&#10;ectool deleteArtifact "com.acmebank.apps.cards:app"&#10;ectool deleteArtifact "com.acmebank.apps.cards:db"&#10;ectool deleteArtifact "com.acmebank.apps.cards:web"&#10;ectool deleteArtifact "com.acmebank.apps.fund:app"&#10;ectool deleteArtifact "com.acmebank.apps.fund:db"&#10;ectool deleteArtifact "com.acmebank.apps.fund:web"&#10;</value>
      </property>
      <property>
        <propertyName>dslRunProcedureTemplate</propertyName>
        <expandable>1</expandable>
        <suppressValueTracking>0</suppressValueTracking>
        <tracked>0</tracked>
        <value>	runProcedure projectName: "/plugins/Release Demo/project",&#10;		procedureName: "Create Release Model",&#10;		actualParameter: [&#10;			projName: "Online banking",&#10;			artifactGroup: "com.acmebank.apps",&#10;			apps: '''\&#10;				[&#10;	[&#10;		name: "Account Statements",&#10;		artifactName: "statements",&#10;		versions: ["2.1","2.2","2.3","2.4"],&#10;		tiers: ["app":"Apache","db":"Oracle","web":"JBoss"]&#10;	],&#10;	[&#10;		name: "Credit Card Accounts",&#10;		artifactName: "cards",&#10;		versions: ["5.0","5.1","5.5","5.7"],&#10;		tiers: ["app":"Apache","db":"Oracle","web":"JBoss"]&#10;	],&#10;	[&#10;		name: "Fund Transfer",&#10;		artifactName: "fund",&#10;		versions: ["1.7","1.8","2.0","2.1"],&#10;		tiers: ["app":"Apache","db":"Oracle","web":"JBoss"]&#10;	]&#10;]&#10;&#10;			'''.stripIndent(),&#10;			pipe: '''\&#10;				[&#10;	name: "Biweekly Sprints",&#10;	stages: ["UAT", "STG", "PROD"]&#10;]&#10;&#10;			'''.stripIndent(),&#10;			releases: '''\&#10;				[&#10;	[&#10;		name: "Biweekly 1-2020",&#10;		plannedStartDate: "2020-6-29",&#10;		plannedEndDate: "2020-7-10",&#10;		versionIndex: 1&#10;	],&#10;	[&#10;		name: "Biweekly 2-2020",&#10;		plannedStartDate: "2020-7-13",&#10;		plannedEndDate: "2020-7-24",&#10;		versionIndex: 2&#10;	],		&#10;	[&#10;		name: "Biweekly 3-2020",&#10;		plannedStartDate: "2020-7-27",&#10;		plannedEndDate: "2020-8-7",&#10;		versionIndex: 3&#10;	],&#10;]&#10;&#10;			'''.stripIndent()&#10;	]&#10;	</value>
      </property>
      <property>
        <propertyName>ec_setup</propertyName>
        <expandable>0</expandable>
        <suppressValueTracking>0</suppressValueTracking>
        <tracked>0</tracked>
        <value>use Cwd;&#10;&#10;use File::Spec;&#10;&#10;use POSIX;&#10;&#10;my $dir = getcwd;&#10;&#10;my $logfile ="";&#10;&#10;my $pluginDir;&#10;&#10;if(defined $ENV{QUERY_STRING}) { # Promotion through UI&#10;&#10;       $pluginDir = $ENV{COMMANDER_PLUGINS} . "/$pluginName";&#10;&#10;&#10;&#10;} else {&#10;&#10;       $pluginDir = $dir;&#10;&#10;}&#10;&#10;&#10;&#10;$commander-&gt;setProperty("/plugins/$pluginName/project/pluginDir",{value=&gt;$pluginDir});&#10;&#10;$logfile .= "Plugin Name: $pluginName\n";&#10;&#10;$logfile .= "Current directory: $dir\n";&#10;&#10;&#10;&#10;# Evaluate promote.groovy or demote.groovy based on whether plugin is being promoted or demoted ($promoteAction)&#10;&#10;local $/ = undef;&#10;&#10;&#10;&#10;#If env variable QUERY_STRING exists (UI installation) or we are in a step:&#10;&#10;if(defined $ENV{COMMANDER_JOBSTEPID} || defined $ENV{QUERY_STRING}) { &#10;&#10;       open FILE, $ENV{COMMANDER_PLUGINS} . "/$pluginName/dsl/$promoteAction.groovy" or die "Couldn't open file: $!";&#10;&#10;} else {  # Promotion from the command line&#10;&#10;       open FILE, "dsl/$promoteAction.groovy" or die "Couldn't open file: $!";&#10;&#10;}&#10;&#10;my $dsl = &lt;FILE&gt;;&#10;&#10;close FILE;&#10;&#10;my $dslReponse = $commander-&gt;evalDsl($dsl,&#10;&#10;              {parameters=&gt;qq(&#10;&#10;                     {&#10;&#10;                           "pluginName":"$pluginName"&#10;&#10;                     }&#10;&#10;              )}&#10;&#10;)-&gt;findnodes_as_string("/");&#10;&#10;$logfile .= $dslReponse;&#10;&#10;&#10;&#10;# Create output property&#10;&#10;&#10;&#10;my $nowString = localtime;&#10;&#10;$commander-&gt;setProperty("/plugins/$pluginName/project/logs/$nowString",{value=&gt;$logfile});&#10;&#10;</value>
      </property>
      <property>
        <propertyName>ec_visibility</propertyName>
        <expandable>1</expandable>
        <suppressValueTracking>0</suppressValueTracking>
        <tracked>0</tracked>
        <value>all</value>
      </property>
      <property>
        <propertyName>pluginDir</propertyName>
        <expandable>1</expandable>
        <suppressValueTracking>0</suppressValueTracking>
        <tracked>0</tracked>
        <value>/opt/electriccloud/electriccommander/plugins/Release Demo-3.0</value>
      </property>
    </propertySheet>
    <procedure>
      <procedureName>Create Release Model</procedureName>
      <description>Run me to create a Release model</description>
      <timeLimitUnits>minutes</timeLimitUnits>
      <tracked>0</tracked>
      <acl>
        <inheriting>1</inheriting>
        <tracked>0</tracked>
      </acl>
      <propertySheet>
        <credentialProtected>0</credentialProtected>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <property>
          <propertyName>ec_parameterForm</propertyName>
          <expandable>1</expandable>
          <suppressValueTracking>0</suppressValueTracking>
          <tracked>0</tracked>
          <value>&lt;editor&gt;&#13;&#10;	&lt;formElement&gt;&#13;&#10;		&lt;property&gt;projName&lt;/property&gt;&#13;&#10;		&lt;label&gt;Project Name&lt;/label&gt;&#13;&#10;		&lt;documentation&gt;The name of the project where the release and supporting assets are to be stored.&lt;/documentation&gt;&#13;&#10;		&lt;type&gt;entry&lt;/type&gt;&#13;&#10;		&lt;required&gt;true&lt;/required&gt;&#13;&#10;		&lt;value&gt;$[/myProject/config/projName]&lt;/value&gt;&#13;&#10;	&lt;/formElement&gt;&#13;&#10;	&lt;formElement&gt;&#13;&#10;		&lt;property&gt;artifactGroup&lt;/property&gt;&#13;&#10;		&lt;label&gt;Artifact Group Name&lt;/label&gt;&#13;&#10;		&lt;documentation&gt;The group name for artifacts used, for example, com.mycompany.myapp&lt;/documentation&gt;&#13;&#10;		&lt;type&gt;entry&lt;/type&gt;&#13;&#10;		&lt;required&gt;true&lt;/required&gt;&#13;&#10;		&lt;value&gt;$[/myProject/config/artifactGroup]&lt;/value&gt;&#13;&#10;	&lt;/formElement&gt;&#13;&#10;	&lt;formElement&gt;&#13;&#10;		&lt;property&gt;apps&lt;/property&gt;&#13;&#10;		&lt;label&gt;Application definitions&lt;/label&gt;&#13;&#10;		&lt;documentation&gt;A Groovy data structure describing the applications to be created&lt;/documentation&gt;&#13;&#10;		&lt;type&gt;textarea&lt;/type&gt;&#13;&#10;		&lt;required&gt;true&lt;/required&gt;&#13;&#10;		&lt;value&gt;$[/myProject/config/apps]&lt;/value&gt;&#13;&#10;	&lt;/formElement&gt;&#13;&#10;	&lt;formElement&gt;&#13;&#10;		&lt;property&gt;pipe&lt;/property&gt;&#13;&#10;		&lt;label&gt;Release pipeline definition&lt;/label&gt;&#13;&#10;		&lt;documentation&gt;A Groovy data structure describing the release pipeline to be created&lt;/documentation&gt;&#13;&#10;		&lt;type&gt;textarea&lt;/type&gt;&#13;&#10;		&lt;required&gt;true&lt;/required&gt;&#13;&#10;		&lt;value&gt;$[/myProject/config/pipe]&lt;/value&gt;&#13;&#10;	&lt;/formElement&gt;&#13;&#10;	&lt;formElement&gt;&#13;&#10;		&lt;property&gt;releases&lt;/property&gt;&#13;&#10;		&lt;label&gt;Release definitions&lt;/label&gt;&#13;&#10;		&lt;documentation&gt;A Groovy data structure describing the releases to be created&lt;/documentation&gt;&#13;&#10;		&lt;type&gt;textarea&lt;/type&gt;&#13;&#10;		&lt;required&gt;true&lt;/required&gt;&#13;&#10;		&lt;value&gt;$[/myProject/config/releases]&lt;/value&gt;&#13;&#10;	&lt;/formElement&gt;&#13;&#10;&lt;/editor&gt;</value>
        </property>
        <property>
          <propertyName>runModelSteps</propertyName>
          <expandable>1</expandable>
          <suppressValueTracking>0</suppressValueTracking>
          <tracked>0</tracked>
          <value>1</value>
        </property>
      </propertySheet>
      <formalParameter>
        <formalParameterName>apps</formalParameterName>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>0</tracked>
      </formalParameter>
      <formalParameter>
        <formalParameterName>artifactGroup</formalParameterName>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>0</tracked>
      </formalParameter>
      <formalParameter>
        <formalParameterName>pipe</formalParameterName>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>0</tracked>
      </formalParameter>
      <formalParameter>
        <formalParameterName>projName</formalParameterName>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>0</tracked>
      </formalParameter>
      <formalParameter>
        <formalParameterName>releases</formalParameterName>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>0</tracked>
      </formalParameter>
      <step>
        <stepName>Set initial clean property</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>project "$[/myProject/projectName]",{&#10;	property "clean"&#10;}</command>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Add project to clean list</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>project "$[/myProject/projectName]",{&#10;	property "clean", value: """\&#10;		$[/myProject/clean]&#10;		ectool deleteProject "$[/myJob/projName]"&#10;	""".stripIndent()&#10;}</command>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Set up permissions</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def projName = "$[/myJob/projName]"&#10;&#10;aclEntry projectName: "/plugins/EC-Artifact/project",&#10;	objectType: "project",&#10;	principalName: "project: $projName",&#10;	principalType: "user",&#10;	executePrivilege: "allow"&#10;&#10;aclEntry projectName: "/plugins/EC-Core/project",&#10;	objectType: "project",&#10;	principalName: "project: $projName",&#10;	principalType: "user",&#10;	executePrivilege: "allow"</command>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Create Procedures</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def projName = "$[/myJob/projName]"&#10;def apps = $[/myJob/apps]&#10;&#10;resource "Builder", hostName: "localhost"&#10;&#10;project projName,{&#10;	procedure "Build artifacts", resourceName: "Builder",&#10;		description: "Generate artifacts", {&#10;		&#10;		formalParameter "appName", description: "Application Name", required: "true"&#10;		formalParameter "artGroup", description: "Artifact Group Name", required: "true"&#10;		formalParameter "artVersion", description: "Artifact Version", required: "true"&#10;		formalParameter "artName", description: "Artifact Key", required: "true"&#10;		formalParameter "buildErrorLevel", defaultValue: "0"&#10;		formalParameter "causeRollback", defaultValue: "0"&#10;&#10;		emailNotifier 'On Build Failure', {&#10;			condition = '$[/javascript (getProperty("outcome") == "error")'&#10;			configName = 'default'&#10;			destinations = 'raj'&#10;			eventType = 'onCompletion'&#10;			formattingTemplate = '''\&#10;				Subject: Job "$[jobName]" from procedure  "$[procedureName]" $[/myEvent/type] FAILED - ElectricFlow notification&#10;&#10;				$[/server/ec_notifierTemplates/Html_JobTempl/body]&#10;			'''.stripIndent()&#10;		} // email notifier&#10;		&#10;		apps[0].tiers.each { artKey, envTier -&gt;&#10;		// Only looking at first application's tier names for artifact keys&#10;			step "Build ${artKey}", errorHandling: "abortJob",&#10;				command: """\&#10;					echo running build \$[appName] \$[artGroup].\$[artName]:${artKey}:\$[artVersion]-\$[/increment /myProject/buildCount]&#10;					echo creating installer.sh&#10;					echo echo Installing \$[appName] \$[artGroup].\$[artName]:${artKey}:\$[artVersion]-\$[/myProject/buildCount] &gt; installer.sh&#10;					echo exit \$[causeRollback] &gt;&gt; installer.sh&#10;					&#10;					echo creating installer.bat&#10;					echo echo Installing \$[appName] \$[artGroup].\$[artName]:${artKey}:\$[artVersion]-\$[/myProject/buildCount] &gt; installer.bat&#10;					echo exit \$[causeRollback] &gt;&gt; installer.bat&#13;&#10;					&#10;					exit \$[buildErrorLevel]&#10;				""".stripIndent()&#10;				&#10;			step "Publish ${artKey}", description: "Publish artifacts",&#10;				subproject : '/plugins/EC-Artifact/project',&#10;				subprocedure : 'Publish',&#10;				actualParameter : [&#10;					artifactName: (String) "\$[artGroup].\$[artName]:${artKey}",&#10;					artifactVersionVersion: '$[artVersion]-$[/myProject/buildCount]',&#10;					includePatterns: 'installer.sh;installer.bat',&#10;					repositoryName: 'default'&#10;				]&#10;		} // each tier (artifact key)&#10;&#10;&#10;	} // procedure "Build artifacts"&#10;	procedure "snapshot", description: "Create environment snapshot", {&#10;	&#10;		formalParameter "appName", required: "true"&#10;		formalParameter "version", required: "true"&#10;	&#10;		step "Create Snapshot", shell: "ectool evalDsl --dslFile {0}",&#10;			command: """\&#10;				snapshot projectName: "$projectName",&#10;					applicationName: '\$[appName]',&#10;					snapshotName: '\$[version]',&#10;					environmentName: "Commit",&#10;					environmentprojectName: "$projectName"				&#10;			""".stripIndent()&#10;	} // procedure "snapshot"&#10;	&#10;	procedure "Run pipeline", description: "Run and wait for pipeline to complete",{&#10;	&#10;		formalParameter "projName"&#10;		formalParameter "pipeName"&#10;		&#10;		step "Run pipeline", shell: "ec-perl",&#10;			command: '''\&#10;				use strict;&#10;				use ElectricCommander ();&#10;				$| = 1;&#10;				my $ec = new ElectricCommander-&gt;new({format=&gt;"json"});&#10;				my $resp = $ec-&gt;runPipeline({projectName=&gt;"$[projName]", pipelineName=&gt;"$[pipeName]"});&#10;				my $flowRuntimeId = $resp-&gt;{responses}[0]-&gt;{flowRuntime}-&gt;{flowRuntimeId};&#10;				sub getStatus($) {&#10;						my $status = $ec-&gt;getPipelineRuntimeDetails({flowRuntimeId=&gt;$flowRuntimeId});&#10;						return $status-&gt;{responses}[0]-&gt;{flowRuntime}[0]-&gt;{status};&#10;				}&#10;&#10;				while (getStatus($flowRuntimeId) eq "running") {&#10;						print "Waiting for pipeline to complete\\n";&#10;						sleep 5;&#10;				}&#10;				print getStatus($flowRuntimeId);&#10;&#10;			'''.stripIndent()&#10;	}&#10;	&#10;}</command>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Create Application Validation Procedure</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def projName = "$[/myJob/projName]"&#10;&#10;project projName, {&#10;	procedure "Application Validation",{&#10;		step "URL Test",&#10;			command: "echo testing URL"&#10;	}&#10;}</command>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Set up environments</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def pipe  = $[/myJob/pipe]&#10;def projName = "$[/myJob/projName]"&#10;def apps = $[/myJob/apps]&#10;&#10;def envs = pipe.stages&#10;envs.push("Commit")&#10;&#10;def resources = []&#10;&#10;project projName, {&#10;	pipe.stages.each { env -&gt;&#10;		environment env, {&#10;			// Only in Prod&#10;			def isProd = env.toLowerCase().contains("prod")&#10;			if (isProd) {				&#10;				rollingDeployEnabled = '1'&#10;				rollingDeployType = 'phase'&#10;&#10;				["Green","Blue"].each { phase -&gt;&#10;					rollingDeployPhase phase, {&#10;						orderIndex = '1'&#10;						phaseExpression = null&#10;						rollingDeployPhaseType = 'tagged'&#10;					}&#10;				}&#10;			} // if isProd&#10;			&#10;			// Using only first app's tier definition&#10;			// TODO: iterate over all apps just in case other tiers defined&#10;			apps[0].tiers.each { appTier, envTier -&gt;&#10;		&#10;				environmentTier envTier, {&#10;					// create and add resource to the Tier&#10;					def resCount = isProd?5:1&#10;					(1..resCount).each { resNum -&gt;&#10;						def resName = (String) "${env}_${projName}_${envTier}_${resNum}"&#10;						resources.push(resName)&#10;						resource resourceName: resName, hostName : "localhost"&#10;						def phase = (resNum==1)?'Blue':'Green'&#10;						if (isProd) {&#10;							environmentTier envTier, resourcePhaseMapping: [(resName) : phase]&#10;						}&#10;					} // each resource&#10;				} // environmentTier&#10;			} // each app&#10;		} // environment&#10;	} // Environments&#10;} // Project projName&#10;&#10;def clean = getProperty("/myProject/clean").value&#10;resources.each {&#10;	clean += "ectool deleteResource \"$it\"\n"&#10;}&#10;setProperty "/myProject/clean", value: clean</command>
        <condition>$[/myProcedure/runModelSteps]</condition>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Set up applications</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def apps = $[/myJob/apps]&#10;def projName = "$[/myJob/projName]"&#10;def artifactGroup = "$[/myJob/artifactGroup]"&#10;def pipe  = $[/myJob/pipe]&#10;&#10;def envs = pipe.stages&#10;envs.push("Commit")&#10;&#10;apps.each { app -&gt; &#10;	project projName, {&#10;		// transaction {&#10;			def appName = app.name&#10;			application applicationName: appName, {&#10;			&#10;				app.tiers.each { appTier, envTier -&gt;&#10;					applicationTier appTier, {&#10;&#10;						component appTier, pluginKey: "EC-Artifact", {&#10;							ec_content_details.with { &#10;								pluginprojName = "EC-Artifact"&#10;								pluginProcedure = "Retrieve"&#10;								artifactName = "${artifactGroup}.${app.artifactName}:${appTier}"&#10;								filterList = ""&#10;								overwrite = "update"&#10;								//versionRange = app.versions[1]&#10;								versionRange = ""&#10;								artifactVersionLocationProperty = "/myJob/retrievedArtifactVersions/\$" + "[assignedResourceName]"&#10;							}&#10;&#10;							process processName: "Install",&#10;								processType: "DEPLOY",&#10;								componentApplicationName: appName,&#10;								applicationName: null,&#10;								{&#10;								processStep processStepName: "Retrieve Artifact",&#10;									processStepType: "component",&#10;									subprocedure: "Retrieve",&#10;									errorHandling: "failProcedure",&#10;									subproject: "/plugins/EC-Artifact/project",&#10;									applicationName: null,&#10;									applicationTierName: null,&#10;									actualParameter: [ &#10;										artifactName : "\$" + "[/myComponent/ec_content_details/artifactName]",&#10;										artifactVersionLocationProperty : "\$" + "[/myComponent/ec_content_details/artifactVersionLocationProperty]",&#10;										filterList : "\$" + "[/myComponent/ec_content_details/filterList]",&#10;										overwrite : "\$" + "[/myComponent/ec_content_details/overwrite]",&#10;										versionRange : "\$" + "[ec_" + app.artifactName + "-version]"&#10;									]&#10;								processStep processStepName: "Deploy Artifact",&#10;									errorHandling: 'failProcedure',&#10;									processStepType: 'command',&#10;									subproject: '/plugins/EC-Core/project',&#10;									subprocedure: 'RunCommand',&#10;									actualParameter: [&#10;										// Linux: sh "fullPathToFile/installer.sh"&#10;										// Windows: "fullPathToFile\installer.bat"&#10;										commandToRun: '$' + '[/javascript myResource.hostPlatform=="linux"?"sh ":""]' +&#10;										'\"' + // Quote entire command&#10;										'$' + '[/myJob/retrievedArtifactVersions/$' + '[assignedResourceName]/' + &#10;										'$' + '[/myComponent/ec_content_details/artifactName]/cacheLocation]' + &#10;										'$' + '[/javascript myResource.hostPlatform=="linux"?"/":"\\\\"]' + // Slash direction &#10;										'installer.' + '$' + '[/javascript myResource.hostPlatform=="linux"?"sh":"bat"]' + '\"'&#10;										],&#10;									applicationName: null,&#10;									applicationTierName: null,&#10;									componentApplicationName: appName		&#10;									&#10;								createProcessDependency componentApplicationName: appName,&#10;									processStepName: "Retrieve Artifact",&#10;									targetProcessStepName: "Deploy Artifact"&#10;									&#10;									&#10;							} // process processName: "Install"&#10;						} // component componentName&#10;					} // applicationTier appTier&#10;				} // each appTier&#10;				&#10;				process "Deploy",{&#10;				&#10;					formalParameter "changeType"&#10;					&#10;					processStep 'Validation', {&#10;						applicationTierName = 'DB'&#10;						errorHandling = 'failProcedure'&#10;						processStepType = 'procedure'&#10;						subprocedure = 'Application Validation'&#10;						subproject = projName&#10;					}&#10;&#10;					processStep 'Rollback', {&#10;						processStepType = 'rollback'&#10;						rollbackType = 'environment'&#10;						smartRollback = '0'&#10;						dependencyJoinType = 'or'&#10;					}&#10;					&#10;					processDependency 'Validation', targetProcessStepName: "Rollback", branchType: 'ALWAYS',&#10;						branchCondition: '$'+'[/javascript myJob.outcome=="error"]',&#10;						branchConditionName:  'On error',&#10;						branchConditionType:  'CUSTOM'					&#10;					&#10;					app.tiers.each { appTier, envTier -&gt;&#10;						processStep  processStepName: appTier,&#10;							processStepType: 'process',&#10;							componentName: null,&#10;							applicationName: appName,&#10;							componentApplicationName: appName,&#10;							errorHandling: 'failProcedure',&#10;							subcomponent: appTier,&#10;							subcomponentApplicationName: appName,&#10;							subcomponentProcess: "Install",&#10;							applicationTierName: appTier&#10;							&#10;						processDependency appTier, targetProcessStepName: 'Validation', branchType: 'ALWAYS'&#10;					}&#10;				}&#10;				&#10;				envs.each { env -&gt;&#10;					app.tiers.each { appTier, envTier -&gt;&#10;						tierMap tierMapName: "${appName}-$env",&#10;							environmentProjectName: projectName,&#10;							environmentName: env,&#10;							tierMapping: [(appTier):envTier]&#10;					}&#10;				}&#10;&#10;			} // Applications&#10;		// } // transaction&#10;&#10;	} // project projName&#10;} // each app</command>
        <condition>$[/myProcedure/runModelSteps]</condition>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Create Commit Pipeline</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def apps = $[/myJob/apps]&#10;def projName = "$[/myJob/projName]"&#10;def artifactGroup = "$[/myJob/artifactGroup]"&#10;&#10;def cleanArtifacts = []&#10;&#10;project projName, {&#10;&#10;	pipeline "Commit", {&#10;		stage "Commit", {&#10;		&#10;			apps.each { app -&gt;&#10;				&#10;				app.tiers.each { appTier, envTier -&gt;&#10;					cleanArtifacts.push("${artifactGroup}.${app.artifactName}:${appTier}")&#10;				}&#10;			&#10;				app.versions.each { ver -&gt;&#10;					task "Build $app.name $ver",&#10;						taskType: 'PROCEDURE',&#10;						subproject: projName,&#10;						subprocedure: "Build artifacts",&#10;						actualParameter: [&#10;							appName: app.name,&#10;							artGroup: artifactGroup,&#10;							artVersion: ver,&#10;							artName: app.artifactName&#10;						]&#10;					task "Deploy $app.name $ver", {&#10;						// TODO: add version explicitly, don't rely on latest&#10;						environmentName = 'Commit'&#10;						environmentProjectName = projectName&#10;						errorHandling = 'stopOnError'&#10;						subapplication = app.name&#10;						subprocess = 'Deploy'&#10;						subproject = projectName&#10;						taskType = 'PROCESS'&#10;						}&#10;					task "Snapshot $app.name $ver",&#10;						description: '',&#10;						actualParameter: [&#10;							appName: app.name,&#10;							version: ver&#10;						],&#10;						errorHandling: 'stopOnError',&#10;						subprocedure: 'snapshot',&#10;						subproject: projectName,&#10;						taskType: 'PROCEDURE'&#10;				} // version&#10;				&#10;				task "Build $app.name - Bad version for rollback",&#10;					taskType: 'PROCEDURE',&#10;					subproject: projName,&#10;					subprocedure: "Build artifacts",&#10;					actualParameter: [&#10;						appName: app.name,&#10;						artGroup: artifactGroup,&#10;						artVersion: "bad",&#10;						artName: app.artifactName,&#10;						causeRollback: "1"&#10;					]				&#10;			} // app&#10;		} // stage&#10;	} // Pipeline&#10;} // Project&#10;&#10;def clean = getProperty("/myProject/clean").value&#10;cleanArtifacts.each {&#10;	clean += "ectool deleteArtifact \"$it\"\n"&#10;}&#10;setProperty "/myProject/clean", value: clean</command>
        <condition>$[/myProcedure/runModelSteps]</condition>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Run Commit Pipeline</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <description>Builds all versions and creates snapshots for them</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <subprocedure>Run pipeline</subprocedure>
        <subproject>$[/myJob/projName]</subproject>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <actualParameters>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>pipeName</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>Commit</value>
          </property>
          <property>
            <propertyName>projName</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>$[/myJob/projName]</value>
          </property>
        </actualParameters>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Set up release pipeline</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def pipe  = $[/myJob/pipe]&#10;def projName = "$[/myJob/projName]"&#10;&#10;project projName, {&#10;&#10;	property "normalReleaseMode" // Used to flag whether tasks are run or not; use 0 to run seeding release&#10;&#10;	procedure "UpdateTicket"&#10;	procedure "SeleniumTests",{&#10;		step "Generate Report", &#10;			subproject : '/plugins/$[/myProject/pluginKey]/project',&#10;			subprocedure: "Generate Reports"&#10;	}&#10;&#10;	pipeline pipe.name, {&#10;		pipe.stages.eachWithIndex { st, index -&gt;&#10;			stage st,{&#10;				task "Batch Deploy",&#10;					taskType: "DEPLOYER"&#10;				task "Update ticket",&#10;					taskType: 'PROCEDURE',&#10;					subproject: projName,&#10;					subprocedure: "UpdateTicket"&#10;				task "Test Automation",&#10;					taskType: 'PROCEDURE',&#10;					subproject: projName,&#10;					subprocedure: "SeleniumTests"&#10;				if (index == 0) {&#10;					task "Test Automation"&#10;					task "Manual Validation",&#10;						taskType: "MANUAL",&#10;						approvers: "quincy",&#10;						instruction: "Verify that business requirements are met"&#10;					}&#10;				if (index &gt; 0) task "Entry gate approval",  // Don't create a gate for first stage&#10;					taskType: 'APPROVAL',&#10;					approver: ['admin'],&#10;					gateType: 'PRE',&#10;					notificationTemplate: 'ec_default_pipeline_notification_template'&#10;			} // stage&#10;		} // Each stage&#10;	} // Pipeline&#10;} // Project</command>
        <condition>$[/myProcedure/runModelSteps]</condition>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Set up releases</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def pipe  = $[/myJob/pipe]&#10;def projName = "$[/myJob/projName]"&#10;def apps = $[/myJob/apps]&#10;def releases = $[/myJob/releases]&#10;&#10;project projName, {&#10;	releases.each { rel -&gt;&#10;		release rel.name,&#10;			pipelineName: pipe.name,&#10;			pipelineprojectName: projName,&#10;			plannedStartDate: rel.plannedStartDate,&#10;			plannedEndDate: rel.plannedEndDate,{&#10;				deployer "Main Applications",{&#10;					apps.each { app -&gt;&#10;						deployerApplication app.name,&#10;							applicationprojectName: projName,&#10;							//orderIndex: ,&#10;							processName: "Deploy",&#10;							snapshotName: app.versions[rel.versionIndex], &#10;							releaseName: rel.name, {&#10;							pipe.stages.each { st -&gt;&#10;								def isProd = st.toLowerCase().contains("prod")&#10;								deployerConfiguration environmentName: st,&#10;								environmentprojectName: projName,&#10;								stageName: st,&#10;								actualParameter: [&#10;									changeType: "full"  &#10;								], {&#10;									if (isProd) {&#10;										insertRollingDeployManualStep = '1'&#10;										rollingDeployEnabled = '1'&#10;										rollingDeployManualStepCondition = 'always'&#10;										rollingDeployPhases = 'Blue, Green'&#10;										rollingDeployManualStepAssignee = [&#10;											'admin',&#10;										]&#10;									}&#10;								}&#10;							} // Each stage&#10;						} // Deployer application&#10;					} // Each application&#10;				} // Deployer&#10;			} // Release&#10;	} // releases.each&#10;} // Project</command>
        <condition>$[/myProcedure/runModelSteps]</condition>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
    </procedure>
    <procedure>
      <procedureName>Create Release Model copy 2</procedureName>
      <description>Run me to create a Release model</description>
      <timeLimitUnits>minutes</timeLimitUnits>
      <tracked>0</tracked>
      <acl>
        <inheriting>1</inheriting>
        <tracked>0</tracked>
      </acl>
      <propertySheet>
        <credentialProtected>0</credentialProtected>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <property>
          <propertyName>ec_parameterForm</propertyName>
          <expandable>1</expandable>
          <suppressValueTracking>0</suppressValueTracking>
          <tracked>0</tracked>
          <value>&lt;editor&gt;&#13;&#10;	&lt;formElement&gt;&#13;&#10;		&lt;property&gt;projName&lt;/property&gt;&#13;&#10;		&lt;label&gt;Project Name&lt;/label&gt;&#13;&#10;		&lt;documentation&gt;The name of the project where the release and supporting assets are to be stored.&lt;/documentation&gt;&#13;&#10;		&lt;type&gt;entry&lt;/type&gt;&#13;&#10;		&lt;required&gt;true&lt;/required&gt;&#13;&#10;		&lt;value&gt;$[/myProject/config/projName]&lt;/value&gt;&#13;&#10;	&lt;/formElement&gt;&#13;&#10;	&lt;formElement&gt;&#13;&#10;		&lt;property&gt;artifactGroup&lt;/property&gt;&#13;&#10;		&lt;label&gt;Artifact Group Name&lt;/label&gt;&#13;&#10;		&lt;documentation&gt;The group name for artifacts used, for example, com.mycompany.myapp&lt;/documentation&gt;&#13;&#10;		&lt;type&gt;entry&lt;/type&gt;&#13;&#10;		&lt;required&gt;true&lt;/required&gt;&#13;&#10;		&lt;value&gt;$[/myProject/config/artifactGroup]&lt;/value&gt;&#13;&#10;	&lt;/formElement&gt;&#13;&#10;	&lt;formElement&gt;&#13;&#10;		&lt;property&gt;apps&lt;/property&gt;&#13;&#10;		&lt;label&gt;Application definitions&lt;/label&gt;&#13;&#10;		&lt;documentation&gt;A Groovy data structure describing the applications to be created&lt;/documentation&gt;&#13;&#10;		&lt;type&gt;textarea&lt;/type&gt;&#13;&#10;		&lt;required&gt;true&lt;/required&gt;&#13;&#10;		&lt;value&gt;$[/myProject/config/apps]&lt;/value&gt;&#13;&#10;	&lt;/formElement&gt;&#13;&#10;	&lt;formElement&gt;&#13;&#10;		&lt;property&gt;pipe&lt;/property&gt;&#13;&#10;		&lt;label&gt;Release pipeline definition&lt;/label&gt;&#13;&#10;		&lt;documentation&gt;A Groovy data structure describing the release pipeline to be created&lt;/documentation&gt;&#13;&#10;		&lt;type&gt;textarea&lt;/type&gt;&#13;&#10;		&lt;required&gt;true&lt;/required&gt;&#13;&#10;		&lt;value&gt;$[/myProject/config/pipe]&lt;/value&gt;&#13;&#10;	&lt;/formElement&gt;&#13;&#10;	&lt;formElement&gt;&#13;&#10;		&lt;property&gt;releases&lt;/property&gt;&#13;&#10;		&lt;label&gt;Release definitions&lt;/label&gt;&#13;&#10;		&lt;documentation&gt;A Groovy data structure describing the releases to be created&lt;/documentation&gt;&#13;&#10;		&lt;type&gt;textarea&lt;/type&gt;&#13;&#10;		&lt;required&gt;true&lt;/required&gt;&#13;&#10;		&lt;value&gt;$[/myProject/config/releases]&lt;/value&gt;&#13;&#10;	&lt;/formElement&gt;&#13;&#10;&lt;/editor&gt;</value>
        </property>
        <property>
          <propertyName>runModelSteps</propertyName>
          <expandable>1</expandable>
          <suppressValueTracking>0</suppressValueTracking>
          <tracked>0</tracked>
          <value>1</value>
        </property>
      </propertySheet>
      <formalParameter>
        <formalParameterName>apps</formalParameterName>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>0</tracked>
      </formalParameter>
      <formalParameter>
        <formalParameterName>artifactGroup</formalParameterName>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>0</tracked>
      </formalParameter>
      <formalParameter>
        <formalParameterName>pipe</formalParameterName>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>0</tracked>
      </formalParameter>
      <formalParameter>
        <formalParameterName>projName</formalParameterName>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>0</tracked>
      </formalParameter>
      <formalParameter>
        <formalParameterName>releases</formalParameterName>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>0</tracked>
      </formalParameter>
      <step>
        <stepName>Set initial clean property</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>project "$[/myProject/projectName]",{&#10;	property "clean"&#10;}</command>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Add project to clean list</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>project "$[/myProject/projectName]",{&#10;	property "clean", value: """\&#10;		$[/myProject/clean]&#10;		ectool deleteProject "$[/myJob/projName]"&#10;	""".stripIndent()&#10;}</command>
        <condition>false</condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Set up permissions</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def projName = "$[/myJob/projName]"&#10;&#10;aclEntry projectName: "/plugins/EC-Artifact/project",&#10;	objectType: "project",&#10;	principalName: "project: $projName",&#10;	principalType: "user",&#10;	executePrivilege: "allow"&#10;&#10;aclEntry projectName: "/plugins/EC-Core/project",&#10;	objectType: "project",&#10;	principalName: "project: $projName",&#10;	principalType: "user",&#10;	executePrivilege: "allow"</command>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Create Procedures</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def projName = "$[/myJob/projName]"&#10;def apps = $[/myJob/apps]&#10;&#10;resource "Builder", hostName: "localhost"&#10;&#10;project projName,{&#10;	procedure "Build artifacts", resourceName: "Builder",&#10;		description: "Generate artifacts", {&#10;		&#10;		formalParameter "appName", description: "Application Name", required: "true"&#10;		formalParameter "artGroup", description: "Artifact Group Name", required: "true"&#10;		formalParameter "artVersion", description: "Artifact Version", required: "true"&#10;		formalParameter "artName", description: "Artifact Key", required: "true"&#10;		formalParameter "buildErrorLevel", defaultValue: "0"&#10;		formalParameter "causeRollback", defaultValue: "0"&#10;&#10;		emailNotifier 'On Build Failure', {&#10;			condition = '$[/javascript (getProperty("outcome") == "error")'&#10;			configName = 'default'&#10;			destinations = 'raj'&#10;			eventType = 'onCompletion'&#10;			formattingTemplate = '''\&#10;				Subject: Job "$[jobName]" from procedure  "$[procedureName]" $[/myEvent/type] FAILED - ElectricFlow notification&#10;&#10;				$[/server/ec_notifierTemplates/Html_JobTempl/body]&#10;			'''.stripIndent()&#10;		} // email notifier&#10;		&#10;		apps[0].tiers.each { artKey, envTier -&gt;&#10;		// Only looking at first application's tier names for artifact keys&#10;			step "Build ${artKey}", errorHandling: "abortJob",&#10;				command: """\&#10;					echo running build \$[appName] \$[artGroup].\$[artName]:${artKey}:\$[artVersion]-\$[/increment /myProject/buildCount]&#10;					echo creating installer.sh&#10;					echo echo Installing \$[appName] \$[artGroup].\$[artName]:${artKey}:\$[artVersion]-\$[/myProject/buildCount] &gt; installer.sh&#10;					echo exit \$[causeRollback] &gt;&gt; installer.sh&#10;					&#10;					echo creating installer.bat&#10;					echo echo Installing \$[appName] \$[artGroup].\$[artName]:${artKey}:\$[artVersion]-\$[/myProject/buildCount] &gt; installer.bat&#10;					echo exit \$[causeRollback] &gt;&gt; installer.bat&#10;					&#10;					exit \$[buildErrorLevel]&#10;				""".stripIndent()&#10;				&#10;			step "Publish ${artKey}", description: "Publish artifacts",&#10;				subproject : '/plugins/EC-Artifact/project',&#10;				subprocedure : 'Publish',&#10;				actualParameter : [&#10;					artifactName: (String) "\$[artGroup].\$[artName]:${artKey}",&#10;					artifactVersionVersion: '$[artVersion]-$[/myProject/buildCount]',&#10;					includePatterns: 'installer.sh;installer.bat',&#10;					repositoryName: 'default'&#10;				]&#10;		} // each tier (artifact key)&#10;&#10;&#10;	} // procedure "Build artifacts"&#10;	procedure "snapshot", description: "Create environment snapshot", {&#10;	&#10;		formalParameter "appName", required: "true"&#10;		formalParameter "version", required: "true"&#10;	&#10;		step "Create Snapshot", shell: "ectool evalDsl --dslFile {0}",&#10;			command: """\&#10;				snapshot projectName: "$projectName",&#10;					applicationName: '\$[appName]',&#10;					snapshotName: '\$[version]',&#10;					environmentName: "Commit",&#10;					environmentprojectName: "$projectName"				&#10;			""".stripIndent()&#10;	} // procedure "snapshot"&#10;	&#10;	procedure "Run pipeline", description: "Run and wait for pipeline to complete",{&#10;	&#10;		formalParameter "projName"&#10;		formalParameter "pipeName"&#10;		&#10;		step "Run pipeline", shell: "ec-perl",&#10;			command: '''\&#10;				use strict;&#10;				use ElectricCommander ();&#10;				$| = 1;&#10;				my $ec = new ElectricCommander-&gt;new({format=&gt;"json"});&#10;				my $resp = $ec-&gt;runPipeline({projectName=&gt;"$[projName]", pipelineName=&gt;"$[pipeName]"});&#10;				my $flowRuntimeId = $resp-&gt;{responses}[0]-&gt;{flowRuntime}-&gt;{flowRuntimeId};&#10;				sub getStatus($) {&#10;						my $status = $ec-&gt;getPipelineRuntimeDetails({flowRuntimeId=&gt;$flowRuntimeId});&#10;						return $status-&gt;{responses}[0]-&gt;{flowRuntime}[0]-&gt;{status};&#10;				}&#10;&#10;				while (getStatus($flowRuntimeId) eq "running") {&#10;						print "Waiting for pipeline to complete\\n";&#10;						sleep 5;&#10;				}&#10;				print getStatus($flowRuntimeId);&#10;&#10;			'''.stripIndent()&#10;	}&#10;	&#10;}</command>
        <condition>false</condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Create Application Validation Procedure</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def projName = "$[/myJob/projName]"&#10;&#10;project projName, {&#10;	procedure "Application Validation",{&#10;		step "URL Test",&#10;			command: "echo testing URL"&#10;	}&#10;}</command>
        <condition>false</condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Set up environments</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def pipe  = $[/myJob/pipe]&#10;def projName = "$[/myJob/projName]"&#10;def apps = $[/myJob/apps]&#10;&#10;def envs = pipe.stages&#10;envs.push("Commit")&#10;&#10;def resources = []&#10;&#10;project projName, {&#10;	pipe.stages.each { env -&gt;&#10;		environment env, {&#10;			// Only in Prod&#10;			def isProd = env.toLowerCase().contains("prod")&#10;			if (isProd) {				&#10;				rollingDeployEnabled = '1'&#10;				rollingDeployType = 'phase'&#10;&#10;				["Green","Blue"].each { phase -&gt;&#10;					rollingDeployPhase phase, {&#10;						orderIndex = '1'&#10;						phaseExpression = null&#10;						rollingDeployPhaseType = 'tagged'&#10;					}&#10;				}&#10;			} // if isProd&#10;			&#10;			// Using only first app's tier definition&#10;			// TODO: iterate over all apps just in case other tiers defined&#10;			apps[0].tiers.each { appTier, envTier -&gt;&#10;		&#10;				environmentTier envTier, {&#10;					// create and add resource to the Tier&#10;					def resCount = isProd?5:1&#10;					(1..resCount).each { resNum -&gt;&#10;						def resName = (String) "${env}_${projName}_${envTier}_${resNum}"&#10;						resources.push(resName)&#10;						resource resourceName: resName, hostName : "localhost"&#10;						def phase = (resNum==1)?'Blue':'Green'&#10;						if (isProd) {&#10;							environmentTier envTier, resourcePhaseMapping: [(resName) : phase]&#10;						}&#10;					} // each resource&#10;				} // environmentTier&#10;			} // each app&#10;		} // environment&#10;	} // Environments&#10;} // Project projName&#10;&#10;def clean = getProperty("/myProject/clean").value&#10;resources.each {&#10;	clean += "ectool deleteResource \"$it\"\n"&#10;}&#10;setProperty "/myProject/clean", value: clean</command>
        <condition>false</condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Set up applications</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def apps = $[/myJob/apps]&#10;def projName = "$[/myJob/projName]"&#10;def artifactGroup = "$[/myJob/artifactGroup]"&#10;def pipe  = $[/myJob/pipe]&#10;&#10;def envs = pipe.stages&#10;envs.push("Commit")&#10;&#10;apps.each { app -&gt; &#10;	project projName, {&#10;		// transaction {&#10;			def appName = app.name&#10;			application applicationName: appName, {&#10;			&#10;				app.tiers.each { appTier, envTier -&gt;&#10;					applicationTier appTier, {&#10;&#10;						component appTier, pluginKey: "EC-Artifact", {&#10;							ec_content_details.with { &#10;								pluginprojName = "EC-Artifact"&#10;								pluginProcedure = "Retrieve"&#10;								artifactName = "${artifactGroup}.${app.artifactName}:${appTier}"&#10;								filterList = ""&#10;								overwrite = "update"&#10;								//versionRange = app.versions[1]&#10;								versionRange = ""&#10;								artifactVersionLocationProperty = "/myJob/retrievedArtifactVersions/\$" + "[assignedResourceName]"&#10;							}&#10;&#10;							process processName: "Install",&#10;								processType: "DEPLOY",&#10;								componentApplicationName: appName,&#10;								applicationName: null,&#10;								{&#10;								processStep processStepName: "Retrieve Artifact",&#10;									processStepType: "component",&#10;									subprocedure: "Retrieve",&#10;									errorHandling: "failProcedure",&#10;									subproject: "/plugins/EC-Artifact/project",&#10;									applicationName: null,&#10;									applicationTierName: null,&#10;									actualParameter: [ &#10;										artifactName : "\$" + "[/myComponent/ec_content_details/artifactName]",&#10;										artifactVersionLocationProperty : "\$" + "[/myComponent/ec_content_details/artifactVersionLocationProperty]",&#10;										filterList : "\$" + "[/myComponent/ec_content_details/filterList]",&#10;										overwrite : "\$" + "[/myComponent/ec_content_details/overwrite]",&#10;										versionRange : "\$" + "[ec_" + app.artifactName + "-version]"&#10;									]&#10;								processStep processStepName: "Deploy Artifact",&#10;									errorHandling: 'failProcedure',&#10;									processStepType: 'command',&#10;									subproject: '/plugins/EC-Core/project',&#10;									subprocedure: 'RunCommand',&#10;									actualParameter: [&#10;										// Linux: sh "fullPathToFile/installer.sh"&#10;										// Windows: "fullPathToFile\installer.bat"&#10;										commandToRun: '$' + '[/javascript myResource.hostPlatform=="linux"?"sh ":""]' +&#10;										'\"' + // Quote entire command&#10;										'$' + '[/myJob/retrievedArtifactVersions/$' + '[assignedResourceName]/' + &#10;										'$' + '[/myComponent/ec_content_details/artifactName]/cacheLocation]' + &#10;										'$' + '[/javascript myResource.hostPlatform=="linux"?"/":"\\\\"]' + // Slash direction &#10;										'installer.' + '$' + '[/javascript myResource.hostPlatform=="linux"?"sh":"bat"]' + '\"'&#10;										],&#10;									applicationName: null,&#10;									applicationTierName: null,&#10;									componentApplicationName: appName		&#10;									&#10;								createProcessDependency componentApplicationName: appName,&#10;									processStepName: "Retrieve Artifact",&#10;									targetProcessStepName: "Deploy Artifact"&#10;									&#10;									&#10;							} // process processName: "Install"&#10;						} // component componentName&#10;					} // applicationTier appTier&#10;				} // each appTier&#10;				&#10;				process "Deploy",{&#10;				&#10;					formalParameter "changeType"&#10;					&#10;					processStep 'Validation', {&#10;						applicationTierName = 'DB'&#10;						errorHandling = 'failProcedure'&#10;						processStepType = 'procedure'&#10;						subprocedure = 'Application Validation'&#10;						subproject = projName&#10;					}&#10;&#10;					processStep 'Rollback', {&#10;						processStepType = 'rollback'&#10;						rollbackType = 'environment'&#10;						smartRollback = '0'&#10;						dependencyJoinType = 'or'&#10;					}&#10;					&#10;					processDependency 'Validation', targetProcessStepName: "Rollback", branchType: 'ALWAYS',&#10;						branchCondition: '$'+'[/javascript myJob.outcome=="error"]',&#10;						branchConditionName:  'On error',&#10;						branchConditionType:  'CUSTOM'					&#10;					&#10;					app.tiers.each { appTier, envTier -&gt;&#10;						processStep  processStepName: appTier,&#10;							processStepType: 'process',&#10;							componentName: null,&#10;							applicationName: appName,&#10;							componentApplicationName: appName,&#10;							errorHandling: 'failProcedure',&#10;							subcomponent: appTier,&#10;							subcomponentApplicationName: appName,&#10;							subcomponentProcess: "Install",&#10;							applicationTierName: appTier&#10;							&#10;						processDependency appTier, targetProcessStepName: 'Validation', branchType: 'ALWAYS'&#10;					}&#10;				}&#10;				&#10;				envs.each { env -&gt;&#10;					app.tiers.each { appTier, envTier -&gt;&#10;						tierMap tierMapName: "${appName}-$env",&#10;							environmentProjectName: projectName,&#10;							environmentName: env,&#10;							tierMapping: [(appTier):envTier]&#10;					}&#10;				}&#10;&#10;			} // Applications&#10;		// } // transaction&#10;&#10;	} // project projName&#10;} // each app</command>
        <condition>false</condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Create Commit Pipeline</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def apps = $[/myJob/apps]&#10;def projName = "$[/myJob/projName]"&#10;def artifactGroup = "$[/myJob/artifactGroup]"&#10;&#10;def cleanArtifacts = []&#10;&#10;project projName, {&#10;&#10;	pipeline "Commit", {&#10;		stage "Commit", {&#10;		&#10;			apps.each { app -&gt;&#10;				&#10;				app.tiers.each { appTier, envTier -&gt;&#10;					cleanArtifacts.push("${artifactGroup}.${app.artifactName}:${appTier}")&#10;				}&#10;			&#10;				app.versions.each { ver -&gt;&#10;					task "Build $app.name $ver",&#10;						taskType: 'PROCEDURE',&#10;						subproject: projName,&#10;						subprocedure: "Build artifacts",&#10;						actualParameter: [&#10;							appName: app.name,&#10;							artGroup: artifactGroup,&#10;							artVersion: ver,&#10;							artName: app.artifactName&#10;						]&#10;					task "Deploy $app.name $ver", {&#10;						// TODO: add version explicitly, don't rely on latest&#10;						environmentName = 'Commit'&#10;						environmentProjectName = projectName&#10;						errorHandling = 'stopOnError'&#10;						subapplication = app.name&#10;						subprocess = 'Deploy'&#10;						subproject = projectName&#10;						taskType = 'PROCESS'&#10;						}&#10;					task "Snapshot $app.name $ver",&#10;						description: '',&#10;						actualParameter: [&#10;							appName: app.name,&#10;							version: ver&#10;						],&#10;						errorHandling: 'stopOnError',&#10;						subprocedure: 'snapshot',&#10;						subproject: projectName,&#10;						taskType: 'PROCEDURE'&#10;				} // version&#10;				&#10;				task "Build $app.name - Bad version for rollback",&#10;					taskType: 'PROCEDURE',&#10;					subproject: projName,&#10;					subprocedure: "Build artifacts",&#10;					actualParameter: [&#10;						appName: app.name,&#10;						artGroup: artifactGroup,&#10;						artVersion: "bad",&#10;						artName: app.artifactName,&#10;						causeRollback: "1"&#10;					]				&#10;			} // app&#10;		} // stage&#10;	} // Pipeline&#10;} // Project&#10;&#10;def clean = getProperty("/myProject/clean").value&#10;cleanArtifacts.each {&#10;	clean += "ectool deleteArtifact \"$it\"\n"&#10;}&#10;setProperty "/myProject/clean", value: clean</command>
        <condition>$[/myProcedure/runModelSteps]</condition>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Run Commit Pipeline</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <description>Builds all versions and creates snapshots for them</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <subprocedure>Run pipeline</subprocedure>
        <subproject>$[/myJob/projName]</subproject>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <actualParameters>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>pipeName</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>Commit</value>
          </property>
          <property>
            <propertyName>projName</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>$[/myJob/projName]</value>
          </property>
        </actualParameters>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Set up release pipeline</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def pipe  = $[/myJob/pipe]&#10;def projName = "$[/myJob/projName]"&#10;&#10;project projName, {&#10;&#10;	property "normalReleaseMode" // Used to flag whether tasks are run or not; use 0 to run seeding release&#10;&#10;	procedure "UpdateTicket"&#10;	procedure "SeleniumTests",{&#10;		step "Generate Report", &#10;			subproject : '/plugins/$[/myProject/pluginKey]/project',&#10;			subprocedure: "Generate Reports"&#10;	}&#10;&#10;	pipeline pipe.name, {&#10;		pipe.stages.eachWithIndex { st, index -&gt;&#10;			stage st,{&#10;				task "Batch Deploy",&#10;					taskType: "DEPLOYER"&#10;				task "Update ticket",&#10;					taskType: 'PROCEDURE',&#10;					subproject: projName,&#10;					subprocedure: "UpdateTicket"&#10;				task "Test Automation",&#10;					taskType: 'PROCEDURE',&#10;					subproject: projName,&#10;					subprocedure: "SeleniumTests"&#10;				if (index == 0) {&#10;					task "Test Automation"&#10;					task "Manual Validation",&#10;						taskType: "MANUAL",&#10;						approvers: "quincy",&#10;						instruction: "Verify that business requirements are met"&#10;					}&#10;				if (index &gt; 0) task "Entry gate approval",  // Don't create a gate for first stage&#10;					taskType: 'APPROVAL',&#10;					approver: ['admin'],&#10;					gateType: 'PRE',&#10;					notificationTemplate: 'ec_default_pipeline_notification_template'&#10;			} // stage&#10;		} // Each stage&#10;	} // Pipeline&#10;} // Project</command>
        <condition>$[/myProcedure/runModelSteps]</condition>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Set up releases</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>def pipe  = $[/myJob/pipe]&#10;def projName = "$[/myJob/projName]"&#10;def apps = $[/myJob/apps]&#10;def releases = $[/myJob/releases]&#10;&#10;project projName, {&#10;	releases.each { rel -&gt;&#10;		release rel.name,&#10;			pipelineName: pipe.name,&#10;			pipelineprojectName: projName,&#10;			plannedStartDate: rel.plannedStartDate,&#10;			plannedEndDate: rel.plannedEndDate,{&#10;				deployer "Main Applications",{&#10;					apps.each { app -&gt;&#10;						deployerApplication app.name,&#10;							applicationprojectName: projName,&#10;							//orderIndex: ,&#10;							processName: "Deploy",&#10;							snapshotName: app.versions[rel.versionIndex], &#10;							releaseName: rel.name, {&#10;							pipe.stages.each { st -&gt;&#10;								def isProd = st.toLowerCase().contains("prod")&#10;								deployerConfiguration environmentName: st,&#10;								environmentprojectName: projName,&#10;								stageName: st,&#10;								actualParameter: [&#10;									changeType: "full"  &#10;								], {&#10;									if (isProd) {&#10;										insertRollingDeployManualStep = '1'&#10;										rollingDeployEnabled = '1'&#10;										rollingDeployManualStepCondition = 'always'&#10;										rollingDeployPhases = 'Blue, Green'&#10;										rollingDeployManualStepAssignee = [&#10;											'admin',&#10;										]&#10;									}&#10;								}&#10;							} // Each stage&#10;						} // Deployer application&#10;					} // Each application&#10;				} // Deployer&#10;			} // Release&#10;	} // releases.each&#10;} // Project</command>
        <condition>$[/myProcedure/runModelSteps]</condition>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ectool evalDsl --dslFile {0}</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
    </procedure>
    <procedure>
      <procedureName>Generate Reports</procedureName>
      <timeLimitUnits>minutes</timeLimitUnits>
      <tracked>0</tracked>
      <acl>
        <inheriting>1</inheriting>
        <tracked>0</tracked>
      </acl>
      <propertySheet>
        <credentialProtected>0</credentialProtected>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
      </propertySheet>
      <step>
        <stepName>Create Report</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <subprocedure>AddTextToFile</subprocedure>
        <subproject>/plugins/EC-FileOps/project</subproject>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <actualParameters>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>Content</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>&lt;html&gt;&#10;	&lt;head/&gt;&#10;	&lt;body&gt;&#10;		&lt;h1&gt;Test Results&lt;/h1&gt;&#10;		&lt;h2&gt;Pipeline Name: $[/myPipelineRuntime/pipelineName]&lt;/h2&gt;&#10;		&lt;h2&gt;Stage: $[/myPipelineStageRuntime/stageName]&lt;/h2&gt;&#10;	&lt;/body&gt;&#10;&lt;/html&gt;&#10;</value>
          </property>
          <property>
            <propertyName>Path</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>summary.html</value>
          </property>
        </actualParameters>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Create pipeline stage link</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>use strict;&#10;use ElectricCommander();&#10;my $ec = new ElectricCommander-&gt;new({format=&gt;"json"});&#10;$ec-&gt;setProperty("/myJob/artifactsDirectory", ".");&#10;$ec-&gt;setProperty("/myPipelineStageRuntime/ec_summary/Application Deployment Summary",&#10;	"&lt;html&gt;&lt;a href=\"/commander/jobSteps/$[jobStepId]/summary.html\"&gt;HTML report&lt;/a&gt;&lt;/html");&#10;</command>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ec-perl</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
      <step>
        <stepName>Update release summary</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>use strict;&#10;use ElectricCommander();&#10;my $ec = new ElectricCommander-&gt;new({format=&gt;"json"});&#10;$ec-&gt;setProperty("/myJob/artifactsDirectory", ".");&#10;$ec-&gt;setProperty("/myReleaseRuntime/ec_releaseSummary/$[/myPipelineStageRuntime/stageName]",&#10;	"&lt;html&gt;&lt;li&gt;&lt;a href=\"/commander/jobSteps/$[jobStepId]/summary.html\"&gt;$[/myPipelineStageRuntime/stageName] Deployment Report&lt;/a&gt;&lt;/li&gt;&lt;/html");&#10;</command>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <releaseMode>none</releaseMode>
        <shell>ec-perl</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </step>
    </procedure>
  </project>
</exportedData>
