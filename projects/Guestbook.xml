<?xml version="1.0" encoding="UTF-8"?>
<exportedData version="107" buildLabel="build_10.4_153852_2022.03.22_08:16:02" buildVersion="10.4.2.153852" passkey="b75a41350dcb9e41394fb17fb6ffa8407f5872b0">
  <exportPath>/projects/Guestbook</exportPath>
  <project>
    <projectName>Guestbook</projectName>
    <resourceName>local</resourceName>
    <tracked>0</tracked>
    <workspaceName>default</workspaceName>
    <acl>
      <inheriting>1</inheriting>
      <tracked>0</tracked>
      <aclEntry>
        <allowChangePermissions>1</allowChangePermissions>
        <allowExecute>1</allowExecute>
        <allowModify>1</allowModify>
        <allowRead>1</allowRead>
        <denyChangePermissions>0</denyChangePermissions>
        <denyExecute>0</denyExecute>
        <denyModify>0</denyModify>
        <denyRead>0</denyRead>
        <principalName>project: Guestbook</principalName>
        <principalType>user</principalType>
        <tracked>0</tracked>
      </aclEntry>
    </acl>
    <propertySheet>
      <credentialProtected>0</credentialProtected>
      <tracked>0</tracked>
      <acl>
        <inheriting>1</inheriting>
        <tracked>0</tracked>
      </acl>
    </propertySheet>
    <credential>
      <credentialName>harbor</credentialName>
      <credentialType>LOCAL</credentialType>
      <description></description>
      <password>L8PS9XyZT8/8LwZkDYN/TQ==</password>
      <secretPath></secretPath>
      <tracked>0</tracked>
      <userName>admin</userName>
      <acl>
        <inheriting>0</inheriting>
        <tracked>0</tracked>
        <aclEntry>
          <allowChangePermissions>0</allowChangePermissions>
          <allowExecute>0</allowExecute>
          <allowModify>0</allowModify>
          <allowRead>1</allowRead>
          <denyChangePermissions>0</denyChangePermissions>
          <denyExecute>0</denyExecute>
          <denyModify>0</denyModify>
          <denyRead>0</denyRead>
          <principalName>Everyone</principalName>
          <principalType>group</principalType>
          <tracked>0</tracked>
        </aclEntry>
        <aclEntry>
          <allowChangePermissions>1</allowChangePermissions>
          <allowExecute>1</allowExecute>
          <allowModify>1</allowModify>
          <allowRead>1</allowRead>
          <denyChangePermissions>0</denyChangePermissions>
          <denyExecute>0</denyExecute>
          <denyModify>0</denyModify>
          <denyRead>0</denyRead>
          <principalName>admin</principalName>
          <principalType>user</principalType>
          <tracked>0</tracked>
        </aclEntry>
      </acl>
      <propertySheet>
        <credentialProtected>0</credentialProtected>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
      </propertySheet>
    </credential>
    <pluginConfiguration>
      <pluginConfigurationName>helmcfg</pluginConfigurationName>
      <description></description>
      <pluginKey>EC-Helm</pluginKey>
      <tracked>0</tracked>
      <acl>
        <inheriting>1</inheriting>
        <tracked>0</tracked>
      </acl>
      <fields>
        <credentialProtected>0</credentialProtected>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <property>
          <propertyName>createKubeconfig</propertyName>
          <expandable>1</expandable>
          <suppressValueTracking>0</suppressValueTracking>
          <tracked>0</tracked>
          <value>0</value>
        </property>
        <property>
          <propertyName>debugLevel</propertyName>
          <expandable>1</expandable>
          <suppressValueTracking>0</suppressValueTracking>
          <tracked>0</tracked>
          <value>0</value>
        </property>
        <property>
          <propertyName>helmPath</propertyName>
          <expandable>1</expandable>
          <suppressValueTracking>0</suppressValueTracking>
          <tracked>0</tracked>
          <value>/usr/local/bin/helm</value>
        </property>
        <property>
          <propertyName>helmVersion</propertyName>
          <expandable>1</expandable>
          <suppressValueTracking>0</suppressValueTracking>
          <tracked>0</tracked>
          <value>3</value>
        </property>
        <property>
          <propertyName>kubectlExecutablePath</propertyName>
          <expandable>1</expandable>
          <suppressValueTracking>0</suppressValueTracking>
          <tracked>0</tracked>
          <value>/usr/local/bin/kubectl</value>
        </property>
      </fields>
      <propertySheet>
        <credentialProtected>0</credentialProtected>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
      </propertySheet>
    </pluginConfiguration>
    <pluginConfiguration>
      <pluginConfigurationName>kubecfg</pluginConfigurationName>
      <description></description>
      <pluginKey>EC-Kubectl</pluginKey>
      <tracked>0</tracked>
      <acl>
        <inheriting>1</inheriting>
        <tracked>0</tracked>
      </acl>
      <fields>
        <credentialProtected>0</credentialProtected>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <property>
          <propertyName>kubeconfigSource</propertyName>
          <expandable>1</expandable>
          <suppressValueTracking>0</suppressValueTracking>
          <tracked>0</tracked>
          <value>kubeconfigDefault</value>
        </property>
        <property>
          <propertyName>kubectlPath</propertyName>
          <expandable>1</expandable>
          <suppressValueTracking>0</suppressValueTracking>
          <tracked>0</tracked>
          <value>/usr/local/bin/kubectl</value>
        </property>
        <property>
          <propertyName>logLevel</propertyName>
          <expandable>1</expandable>
          <suppressValueTracking>0</suppressValueTracking>
          <tracked>0</tracked>
          <value>INFO</value>
        </property>
      </fields>
      <propertySheet>
        <credentialProtected>0</credentialProtected>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
      </propertySheet>
    </pluginConfiguration>
    <environment>
      <environmentName>Guestbook_QA_Env</environmentName>
      <description></description>
      <environmentEnabled>1</environmentEnabled>
      <reservationRequired>0</reservationRequired>
      <tracked>0</tracked>
      <acl>
        <inheriting>1</inheriting>
        <tracked>0</tracked>
      </acl>
      <propertySheet>
        <credentialProtected>0</credentialProtected>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
      </propertySheet>
      <cluster>
        <clusterName>guestbook_qa</clusterName>
        <environmentName>Guestbook_QA_Env</environmentName>
        <pluginKey>EC-Helm</pluginKey>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <definitionParameters>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>config</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>/projects/Guestbook/pluginConfigurations/helmcfg</value>
          </property>
          <property>
            <propertyName>kubecontext</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value></value>
          </property>
          <property>
            <propertyName>namespace</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>qa</value>
          </property>
        </definitionParameters>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </cluster>
      <deploymentHistoryItem>
        <deploymentHistoryItemName>a89ff1f6-b50d-11ed-8094-024be617296e</deploymentHistoryItemName>
        <completionTime>1677330578661</completionTime>
        <deployedEntityName>Guestbook</deployedEntityName>
        <deployedEntityType>application</deployedEntityType>
        <processName>Deploy Application</processName>
        <runTime>64262</runTime>
        <seeded>0</seeded>
        <smartDeploy>0</smartDeploy>
        <status>success</status>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>ec_Guestbook-run</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>1</value>
          </property>
        </propertySheet>
        <deploymentDetailsItem>
          <deploymentDetailsItemName>cc4aa718-b50d-11ed-8094-024be617296e</deploymentDetailsItemName>
          <actualArtifactVersion>v5</actualArtifactVersion>
          <artifactName>guestbook</artifactName>
          <definedArtifactVersion>v5</definedArtifactVersion>
          <microserviceName>Guestbook QA</microserviceName>
          <partial>0</partial>
          <processName>Deploy Application</processName>
          <status>success</status>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
          </propertySheet>
        </deploymentDetailsItem>
        <deploymentDetailsItem>
          <deploymentDetailsItemName>cc6533aa-b50d-11ed-90e0-024be617296e</deploymentDetailsItemName>
          <actualArtifactVersion>7.0.8-debian-11-r0</actualArtifactVersion>
          <artifactName>redis</artifactName>
          <definedArtifactVersion>7.0.8-debian-11-r0</definedArtifactVersion>
          <microserviceName>Guestbook QA</microserviceName>
          <partial>0</partial>
          <processName>Deploy Application</processName>
          <status>success</status>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
          </propertySheet>
        </deploymentDetailsItem>
        <microserviceDeploymentDetail>
          <microserviceDeploymentDetailName>cc496e84-b50d-11ed-8094-024be617296e</microserviceDeploymentDetailName>
          <microserviceDefinitionType>helm</microserviceDefinitionType>
          <microserviceDeploymentData>{&#10;   "app_version" : "5.0.0",&#10;   "chart" : "guestbook-0.1.0",&#10;   "chart_name" : "guestbook",&#10;   "chart_version" : "0.1.0",&#10;   "manifests" : [&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/serviceaccount.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nautomountServiceAccountToken: true\nmetadata:\n  name: my-guestbook-redis\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "automountServiceAccountToken" : "true",&#10;            "kind" : "ServiceAccount",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/serviceaccount.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: my-guestbook\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "ServiceAccount",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-redis-configuration\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\ndata:\n  redis.conf: |-\n    # User-supplied common configuration:\n    appendonly no\n    # End of common configuration\n  master.conf: |-\n    dir /data\n    # User-supplied master configuration:\n    rename-command FLUSHDB \"\"\n    rename-command FLUSHALL \"\"\n    # End of master configuration\n  replica.conf: |-\n    dir /data\n    # User-supplied replica configuration:\n    rename-command FLUSHDB \"\"\n    rename-command FLUSHALL \"\"\n    # End of replica configuration\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "master.conf" : "dir /data\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"",&#10;               "redis.conf" : "appendonly no",&#10;               "replica.conf" : "dir /data\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\""&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-configuration",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/health-configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/health-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-redis-health\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\ndata:\n  ping_readiness_local.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h localhost \\\n        -p $REDIS_PORT \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    if [ \"$response\" != \"PONG\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_liveness_local.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h localhost \\\n        -p $REDIS_PORT \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\n    if [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ] &amp;&amp; [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_readiness_master.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h $REDIS_MASTER_HOST \\\n        -p $REDIS_MASTER_PORT_NUMBER \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    if [ \"$response\" != \"PONG\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_liveness_master.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h $REDIS_MASTER_HOST \\\n        -p $REDIS_MASTER_PORT_NUMBER \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\n    if [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_readiness_local_and_master.sh: |-\n    script_dir=\"$(dirname \"$0\")\"\n    exit_status=0\n    \"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n    \"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\n    exit $exit_status\n  ping_liveness_local_and_master.sh: |-\n    script_dir=\"$(dirname \"$0\")\"\n    exit_status=0\n    \"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n    \"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\n    exit $exit_status\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "ping_liveness_local.sh" : "[[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ] &amp;&amp; [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n  echo \"$response\"\n  exit 1\nfi",&#10;               "ping_liveness_local_and_master.sh" : "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status",&#10;               "ping_liveness_master.sh" : "[[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ]; then\n  echo \"$response\"\n  exit 1\nfi",&#10;               "ping_readiness_local.sh" : "[[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",&#10;               "ping_readiness_local_and_master.sh" : "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",&#10;               "ping_readiness_master.sh" : "[[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi"&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-health",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/scripts-configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/scripts-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-redis-scripts\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\ndata:\n  start-master.sh: |\n    #!/bin/bash\n\n    [[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then\n        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\n    fi\n    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\n        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\n    fi\n    ARGS=(\"--port\" \"${REDIS_PORT}\")\n    ARGS+=(\"--protected-mode\" \"no\")\n    ARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\n    ARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\n    exec redis-server \"${ARGS[@]}\"\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "start-master.sh" : "[[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\nif [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--protected-mode\" \"no\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\nexec redis-server \"${ARGS[@]}\"\n"&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-scripts",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-backup-configmap\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\ndata:\n  backup.sh: |\n    #!/bin/bash\n    cd /data\n    redis-cli -h  my-guestbook-redis-master save\n    mkdir -p /data/backup\n    mv /data/dump.rdb /data/backup\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "backup.sh" : "cd /data\nredis-cli -h  my-guestbook-redis-master save\nmkdir -p /data/backup\nmv /data/dump.rdb /data/backup\n"&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook-backup-configmap"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/headless-svc.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/headless-svc.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-guestbook-redis-headless\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n  annotations:\n    \nspec:\n  type: ClusterIP\n  clusterIP: None\n  ports:\n    - name: tcp-redis\n      port: 6379\n      targetPort: redis\n  selector:\n    app.kubernetes.io/name: redis\n    app.kubernetes.io/instance: my-guestbook\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "Service",&#10;            "metadata" : {&#10;               "annotations" : null,&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-headless",&#10;               "namespace" : "qa"&#10;            },&#10;            "spec" : {&#10;               "clusterIP" : "None",&#10;               "ports" : [&#10;                  {&#10;                     "name" : "tcp-redis",&#10;                     "port" : "6379",&#10;                     "targetPort" : "redis"&#10;                  }&#10;               ],&#10;               "selector" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/name" : "redis"&#10;               },&#10;               "type" : "ClusterIP"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/master/service.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/master/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-guestbook-redis-master\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: master\nspec:\n  type: ClusterIP\n  internalTrafficPolicy: Cluster\n  sessionAffinity: None\n  ports:\n    - name: tcp-redis\n      port: 6379\n      targetPort: redis\n      nodePort: null\n  selector:\n    app.kubernetes.io/name: redis\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/component: master\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "Service",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/component" : "master",&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-master",&#10;               "namespace" : "qa"&#10;            },&#10;            "spec" : {&#10;               "internalTrafficPolicy" : "Cluster",&#10;               "ports" : [&#10;                  {&#10;                     "name" : "tcp-redis",&#10;                     "nodePort" : "null",&#10;                     "port" : "6379",&#10;                     "targetPort" : "redis"&#10;                  }&#10;               ],&#10;               "selector" : {&#10;                  "app.kubernetes.io/component" : "master",&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/name" : "redis"&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "type" : "ClusterIP"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/service.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-guestbook\n  labels:\n    \n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      targetPort: http\n      protocol: TCP\n      name: http\n  selector:\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "Service",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook"&#10;            },&#10;            "spec" : {&#10;               "ports" : [&#10;                  {&#10;                     "name" : "http",&#10;                     "port" : "80",&#10;                     "protocol" : "TCP",&#10;                     "targetPort" : "http"&#10;                  }&#10;               ],&#10;               "selector" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/name" : "guestbook"&#10;               },&#10;               "type" : "ClusterIP"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/deployment.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-guestbook-v1\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: guestbook\n      app.kubernetes.io/instance: my-guestbook\n  template:\n    metadata:\n      annotations:      \n      labels:\n        app.kubernetes.io/name: guestbook\n        app.kubernetes.io/instance: my-guestbook\n    spec:\n      serviceAccountName: my-guestbook\n      securityContext:\n        {}\n      containers:\n        - name: guestbook\n          securityContext:\n            {}\n          image: \"gcr.io/google-samples/gb-frontend:v5\"\n          imagePullPolicy: IfNotPresent\n          ports:\n            - name: http\n              containerPort: 80\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              path: /\n              port: http\n          readinessProbe:\n            httpGet:\n              path: /\n              port: http\n          resources:\n            {}\n          env:\n            - name: GET_HOSTS_FROM\n              value: env\n            - name: REDIS_LEADER_SERVICE_HOST\n              value: my-guestbook-redis-master\n            - name: REDIS_FOLLOWER_SERVICE_HOST\n              value: my-guestbook-redis-master\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "apps/v1",&#10;            "kind" : "Deployment",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook-v1"&#10;            },&#10;            "spec" : {&#10;               "replicas" : 1,&#10;               "selector" : {&#10;                  "matchLabels" : {&#10;                     "app.kubernetes.io/instance" : "my-guestbook",&#10;                     "app.kubernetes.io/name" : "guestbook"&#10;                  }&#10;               },&#10;               "template" : {&#10;                  "metadata" : {&#10;                     "annotations" : null,&#10;                     "labels" : {&#10;                        "app.kubernetes.io/instance" : "my-guestbook",&#10;                        "app.kubernetes.io/name" : "guestbook"&#10;                     }&#10;                  },&#10;                  "spec" : {&#10;                     "containers" : [&#10;                        {&#10;                           "env" : [&#10;                              {&#10;                                 "name" : "GET_HOSTS_FROM",&#10;                                 "value" : "env"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_LEADER_SERVICE_HOST",&#10;                                 "value" : "my-guestbook-redis-master"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_FOLLOWER_SERVICE_HOST",&#10;                                 "value" : "my-guestbook-redis-master"&#10;                              }&#10;                           ],&#10;                           "image" : "gcr.io/google-samples/gb-frontend:v5",&#10;                           "imagePullPolicy" : "IfNotPresent",&#10;                           "livenessProbe" : {&#10;                              "httpGet" : {&#10;                                 "path" : "/",&#10;                                 "port" : "http"&#10;                              }&#10;                           },&#10;                           "name" : "guestbook",&#10;                           "ports" : [&#10;                              {&#10;                                 "containerPort" : 80,&#10;                                 "name" : "http",&#10;                                 "protocol" : "TCP"&#10;                              }&#10;                           ],&#10;                           "readinessProbe" : {&#10;                              "httpGet" : {&#10;                                 "path" : "/",&#10;                                 "port" : "http"&#10;                              }&#10;                           },&#10;                           "resources" : {},&#10;                           "securityContext" : {}&#10;                        }&#10;                     ],&#10;                     "securityContext" : {},&#10;                     "serviceAccountName" : "my-guestbook"&#10;                  }&#10;               }&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/master/application.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/master/application.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: my-guestbook-redis-master\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: master\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: redis\n      app.kubernetes.io/instance: my-guestbook\n      app.kubernetes.io/component: master\n  serviceName: my-guestbook-redis-headless\n  updateStrategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: redis\n        helm.sh/chart: redis-17.6.0\n        app.kubernetes.io/instance: my-guestbook\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component: master\n      annotations:\n        checksum/configmap: 9ad434eace5abfd23b91dd8f629794316b3a0cf125927115b96d8fe06bb88d96\n        checksum/health: 5b93e0375cbda529f002310484e90cbc6aacf0776a794a0a075ad9835281ad44\n        checksum/scripts: 4cb9ec8796901b2c02f22a71b2a1c17a674c8ae0ab20a642218c148a4c219240\n        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n    spec:\n      \n      securityContext:\n        fsGroup: 1001\n      serviceAccountName: my-guestbook-redis\n      affinity:\n        podAffinity:\n          \n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n            - podAffinityTerm:\n                labelSelector:\n                  matchLabels:\n                    app.kubernetes.io/name: redis\n                    app.kubernetes.io/instance: my-guestbook\n                    app.kubernetes.io/component: master\n                topologyKey: kubernetes.io/hostname\n              weight: 1\n        nodeAffinity:\n          \n      terminationGracePeriodSeconds: 30\n      containers:\n        - name: redis\n          image: docker.io/bitnami/redis:7.0.8-debian-11-r0\n          imagePullPolicy: \"IfNotPresent\"\n          securityContext:\n            runAsUser: 1001\n          command:\n            - /bin/bash\n          args:\n            - -c\n            - /opt/bitnami/scripts/start-scripts/start-master.sh\n          env:\n            - name: BITNAMI_DEBUG\n              value: \"false\"\n            - name: REDIS_REPLICATION_MODE\n              value: master\n            - name: ALLOW_EMPTY_PASSWORD\n              value: \"yes\"\n            - name: REDIS_TLS_ENABLED\n              value: \"no\"\n            - name: REDIS_PORT\n              value: \"6379\"\n          ports:\n            - name: redis\n              containerPort: 6379\n          livenessProbe:\n            initialDelaySeconds: 20\n            periodSeconds: 5\n            # One second longer than command timeout should prevent generation of zombie processes.\n            timeoutSeconds: 6\n            successThreshold: 1\n            failureThreshold: 5\n            exec:\n              command:\n                - sh\n                - -c\n                - /health/ping_liveness_local.sh 5\n          readinessProbe:\n            initialDelaySeconds: 20\n            periodSeconds: 5\n            timeoutSeconds: 2\n            successThreshold: 1\n            failureThreshold: 5\n            exec:\n              command:\n                - sh\n                - -c\n                - /health/ping_readiness_local.sh 1\n          resources:\n            limits: {}\n            requests: {}\n          volumeMounts:\n            - name: start-scripts\n              mountPath: /opt/bitnami/scripts/start-scripts\n            - name: health\n              mountPath: /health\n            - name: redis-data\n              mountPath: /data\n            - name: config\n              mountPath: /opt/bitnami/redis/mounted-etc\n            - name: redis-tmp-conf\n              mountPath: /opt/bitnami/redis/etc/\n            - name: tmp\n              mountPath: /tmp\n      volumes:\n        - name: start-scripts\n          configMap:\n            name: my-guestbook-redis-scripts\n            defaultMode: 0755\n        - name: health\n          configMap:\n            name: my-guestbook-redis-health\n            defaultMode: 0755\n        - name: config\n          configMap:\n            name: my-guestbook-redis-configuration\n        - name: redis-tmp-conf\n          emptyDir: {}\n        - name: tmp\n          emptyDir: {}\n  volumeClaimTemplates:\n    - metadata:\n        name: redis-data\n        labels:\n          app.kubernetes.io/name: redis\n          app.kubernetes.io/instance: my-guestbook\n          app.kubernetes.io/component: master\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        resources:\n          requests:\n            storage: \"8Gi\"\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "apps/v1",&#10;            "kind" : "StatefulSet",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/component" : "master",&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-master",&#10;               "namespace" : "qa"&#10;            },&#10;            "spec" : {&#10;               "replicas" : "1",&#10;               "selector" : {&#10;                  "matchLabels" : {&#10;                     "app.kubernetes.io/component" : "master",&#10;                     "app.kubernetes.io/instance" : "my-guestbook",&#10;                     "app.kubernetes.io/name" : "redis"&#10;                  }&#10;               },&#10;               "serviceName" : "my-guestbook-redis-headless",&#10;               "template" : {&#10;                  "metadata" : {&#10;                     "annotations" : {&#10;                        "checksum/configmap" : "9ad434eace5abfd23b91dd8f629794316b3a0cf125927115b96d8fe06bb88d96",&#10;                        "checksum/health" : "5b93e0375cbda529f002310484e90cbc6aacf0776a794a0a075ad9835281ad44",&#10;                        "checksum/scripts" : "4cb9ec8796901b2c02f22a71b2a1c17a674c8ae0ab20a642218c148a4c219240",&#10;                        "checksum/secret" : "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"&#10;                     },&#10;                     "labels" : {&#10;                        "app.kubernetes.io/component" : "master",&#10;                        "app.kubernetes.io/instance" : "my-guestbook",&#10;                        "app.kubernetes.io/managed-by" : "Helm",&#10;                        "app.kubernetes.io/name" : "redis",&#10;                        "helm.sh/chart" : "redis-17.6.0"&#10;                     }&#10;                  },&#10;                  "spec" : {&#10;                     "affinity" : {&#10;                        "nodeAffinity" : null,&#10;                        "podAffinity" : null,&#10;                        "podAntiAffinity" : {&#10;                           "preferredDuringSchedulingIgnoredDuringExecution" : [&#10;                              {&#10;                                 "podAffinityTerm" : {&#10;                                    "labelSelector" : {&#10;                                       "matchLabels" : {&#10;                                          "app.kubernetes.io/component" : "master",&#10;                                          "app.kubernetes.io/instance" : "my-guestbook",&#10;                                          "app.kubernetes.io/name" : "redis"&#10;                                       }&#10;                                    },&#10;                                    "topologyKey" : "kubernetes.io/hostname"&#10;                                 },&#10;                                 "weight" : "1"&#10;                              }&#10;                           ]&#10;                        }&#10;                     },&#10;                     "containers" : [&#10;                        {&#10;                           "args" : [&#10;                              "-c",&#10;                              "/opt/bitnami/scripts/start-scripts/start-master.sh"&#10;                           ],&#10;                           "command" : [&#10;                              "/bin/bash"&#10;                           ],&#10;                           "env" : [&#10;                              {&#10;                                 "name" : "BITNAMI_DEBUG",&#10;                                 "value" : "false"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_REPLICATION_MODE",&#10;                                 "value" : "master"&#10;                              },&#10;                              {&#10;                                 "name" : "ALLOW_EMPTY_PASSWORD",&#10;                                 "value" : "yes"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_TLS_ENABLED",&#10;                                 "value" : "no"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_PORT",&#10;                                 "value" : "6379"&#10;                              }&#10;                           ],&#10;                           "image" : "docker.io/bitnami/redis:7.0.8-debian-11-r0",&#10;                           "imagePullPolicy" : "IfNotPresent",&#10;                           "livenessProbe" : {&#10;                              "exec" : {&#10;                                 "command" : [&#10;                                    "sh",&#10;                                    "-c",&#10;                                    "/health/ping_liveness_local.sh 5"&#10;                                 ]&#10;                              },&#10;                              "failureThreshold" : "5",&#10;                              "initialDelaySeconds" : "20",&#10;                              "periodSeconds" : "5",&#10;                              "successThreshold" : "1",&#10;                              "timeoutSeconds" : "6"&#10;                           },&#10;                           "name" : "redis",&#10;                           "ports" : [&#10;                              {&#10;                                 "containerPort" : "6379",&#10;                                 "name" : "redis"&#10;                              }&#10;                           ],&#10;                           "readinessProbe" : {&#10;                              "exec" : {&#10;                                 "command" : [&#10;                                    "sh",&#10;                                    "-c",&#10;                                    "/health/ping_readiness_local.sh 1"&#10;                                 ]&#10;                              },&#10;                              "failureThreshold" : "5",&#10;                              "initialDelaySeconds" : "20",&#10;                              "periodSeconds" : "5",&#10;                              "successThreshold" : "1",&#10;                              "timeoutSeconds" : "2"&#10;                           },&#10;                           "resources" : {&#10;                              "limits" : {},&#10;                              "requests" : {}&#10;                           },&#10;                           "securityContext" : {&#10;                              "runAsUser" : "1001"&#10;                           },&#10;                           "volumeMounts" : [&#10;                              {&#10;                                 "mountPath" : "/opt/bitnami/scripts/start-scripts",&#10;                                 "name" : "start-scripts"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/health",&#10;                                 "name" : "health"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/data",&#10;                                 "name" : "redis-data"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/opt/bitnami/redis/mounted-etc",&#10;                                 "name" : "config"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/opt/bitnami/redis/etc/",&#10;                                 "name" : "redis-tmp-conf"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/tmp",&#10;                                 "name" : "tmp"&#10;                              }&#10;                           ]&#10;                        }&#10;                     ],&#10;                     "securityContext" : {&#10;                        "fsGroup" : "1001"&#10;                     },&#10;                     "serviceAccountName" : "my-guestbook-redis",&#10;                     "terminationGracePeriodSeconds" : "30",&#10;                     "volumes" : [&#10;                        {&#10;                           "configMap" : {&#10;                              "defaultMode" : "0755",&#10;                              "name" : "my-guestbook-redis-scripts"&#10;                           },&#10;                           "name" : "start-scripts"&#10;                        },&#10;                        {&#10;                           "configMap" : {&#10;                              "defaultMode" : "0755",&#10;                              "name" : "my-guestbook-redis-health"&#10;                           },&#10;                           "name" : "health"&#10;                        },&#10;                        {&#10;                           "configMap" : {&#10;                              "name" : "my-guestbook-redis-configuration"&#10;                           },&#10;                           "name" : "config"&#10;                        },&#10;                        {&#10;                           "emptyDir" : {},&#10;                           "name" : "redis-tmp-conf"&#10;                        },&#10;                        {&#10;                           "emptyDir" : {},&#10;                           "name" : "tmp"&#10;                        }&#10;                     ]&#10;                  }&#10;               },&#10;               "updateStrategy" : {&#10;                  "type" : "RollingUpdate"&#10;               },&#10;               "volumeClaimTemplates" : [&#10;                  {&#10;                     "metadata" : {&#10;                        "labels" : {&#10;                           "app.kubernetes.io/component" : "master",&#10;                           "app.kubernetes.io/instance" : "my-guestbook",&#10;                           "app.kubernetes.io/name" : "redis"&#10;                        },&#10;                        "name" : "redis-data"&#10;                     },&#10;                     "spec" : {&#10;                        "accessModes" : [&#10;                           "ReadWriteOnce"&#10;                        ],&#10;                        "resources" : {&#10;                           "requests" : {&#10;                              "storage" : "8Gi"&#10;                           }&#10;                        }&#10;                     }&#10;                  }&#10;               ]&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/ingressclass.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/ingressclass.yaml\napiVersion: networking.k8s.io/v1\nkind: IngressClass\nmetadata:\n  name: guestbook\nspec:\n  controller: \"ingress.k8s.aws/alb\"\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "networking.k8s.io/v1",&#10;            "kind" : "IngressClass",&#10;            "metadata" : {&#10;               "name" : "guestbook"&#10;            },&#10;            "spec" : {&#10;               "controller" : "ingress.k8s.aws/alb"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/ingress.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-guestbook\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\n  annotations:\n    alb.ingress.kubernetes.io/actions.ssl-redirect: \"443\"\n    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4\n    alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\":80,\"HTTPS\":443}]'\n    alb.ingress.kubernetes.io/load-balancer-name: guestbook\n    alb.ingress.kubernetes.io/scheme: internet-facing\n    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06\n    alb.ingress.kubernetes.io/target-type: ip\n    external-dns.alpha.kubernetes.io/hostname: devgb.idtplateer.com\nspec:\n  ingressClassName: guestbook\n  tls:\n    - hosts:\n        - \"devgb.idtplateer.com\"\n      secretName: \n  rules:\n    - host: \"devgb.idtplateer.com\"\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: my-guestbook\n                port:\n                  number: 80\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "networking.k8s.io/v1",&#10;            "kind" : "Ingress",&#10;            "metadata" : {&#10;               "annotations" : {&#10;                  "alb.ingress.kubernetes.io/actions.ssl-redirect" : "443",&#10;                  "alb.ingress.kubernetes.io/certificate-arn" : "arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4",&#10;                  "alb.ingress.kubernetes.io/listen-ports" : "[{\"HTTP\":80,\"HTTPS\":443}]",&#10;                  "alb.ingress.kubernetes.io/load-balancer-name" : "guestbook",&#10;                  "alb.ingress.kubernetes.io/scheme" : "internet-facing",&#10;                  "alb.ingress.kubernetes.io/ssl-policy" : "ELBSecurityPolicy-TLS-1-2-Ext-2018-06",&#10;                  "alb.ingress.kubernetes.io/target-type" : "ip",&#10;                  "external-dns.alpha.kubernetes.io/hostname" : "devgb.idtplateer.com"&#10;               },&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook"&#10;            },&#10;            "spec" : {&#10;               "ingressClassName" : "guestbook",&#10;               "rules" : [&#10;                  {&#10;                     "host" : "devgb.idtplateer.com",&#10;                     "http" : {&#10;                        "paths" : [&#10;                           {&#10;                              "backend" : {&#10;                                 "service" : {&#10;                                    "name" : "my-guestbook",&#10;                                    "port" : {&#10;                                       "number" : "80"&#10;                                    }&#10;                                 }&#10;                              },&#10;                              "path" : "/",&#10;                              "pathType" : "Prefix"&#10;                           }&#10;                        ]&#10;                     }&#10;                  }&#10;               ],&#10;               "tls" : [&#10;                  {&#10;                     "hosts" : [&#10;                        "devgb.idtplateer.com"&#10;                     ],&#10;                     "secretName" : null&#10;                  }&#10;               ]&#10;            }&#10;         }&#10;      }&#10;   ],&#10;   "name" : "my-guestbook",&#10;   "namespace" : "qa",&#10;   "notes" : "NOTES:\n1. Get the application URL by running these commands:\n  https://devgb.idtplateer.com/\n\n",&#10;   "revision" : "1",&#10;   "status" : "deployed",&#10;   "updated" : "2023-02-25 22:09:45.731052702 +0900 KST",&#10;   "values" : {&#10;      "affinity" : {},&#10;      "autoscaling" : {&#10;         "enabled" : false,&#10;         "maxReplicas" : 10,&#10;         "minReplicas" : 1,&#10;         "targetCPUUtilizationPercentage" : 50,&#10;         "targetMemoryUtilizationPercentage" : 50&#10;      },&#10;      "consul" : {&#10;         "enabled" : false&#10;      },&#10;      "fullnameOverride" : "",&#10;      "image" : {&#10;         "pullPolicy" : "IfNotPresent",&#10;         "repository" : "gcr.io/google-samples/gb-frontend",&#10;         "tag" : "v5"&#10;      },&#10;      "imagePullSecrets" : [],&#10;      "imagenew" : {&#10;         "pullPolicy" : "IfNotPresent",&#10;         "repository" : "harbor.idtplateer.com/guestbook/gb-frontend",&#10;         "tag" : "latest"&#10;      },&#10;      "ingress" : {&#10;         "annotations" : {&#10;            "alb.ingress.kubernetes.io/actions.ssl-redirect" : "443",&#10;            "alb.ingress.kubernetes.io/certificate-arn" : "arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4",&#10;            "alb.ingress.kubernetes.io/listen-ports" : "[{\"HTTP\":80,\"HTTPS\":443}]",&#10;            "alb.ingress.kubernetes.io/load-balancer-name" : "guestbook",&#10;            "alb.ingress.kubernetes.io/scheme" : "internet-facing",&#10;            "alb.ingress.kubernetes.io/ssl-policy" : "ELBSecurityPolicy-TLS-1-2-Ext-2018-06",&#10;            "alb.ingress.kubernetes.io/target-type" : "ip",&#10;            "external-dns.alpha.kubernetes.io/hostname" : "devgb.idtplateer.com"&#10;         },&#10;         "enabled" : true,&#10;         "hosts" : [&#10;            {&#10;               "host" : "devgb.idtplateer.com",&#10;               "paths" : [&#10;                  {&#10;                     "path" : "/",&#10;                     "pathType" : "Prefix"&#10;                  }&#10;               ]&#10;            }&#10;         ],&#10;         "ingressClassName" : "guestbook",&#10;         "tls" : [&#10;            {&#10;               "hosts" : [&#10;                  "devgb.idtplateer.com"&#10;               ]&#10;            }&#10;         ]&#10;      },&#10;      "nameOverride" : "",&#10;      "nodeSelector" : {},&#10;      "podAnnotations" : {},&#10;      "podSecurityContext" : {},&#10;      "redis" : {&#10;         "architecture" : "standalone",&#10;         "auth" : {&#10;            "enabled" : false,&#10;            "existingSecret" : "",&#10;            "existingSecretPasswordKey" : "",&#10;            "password" : "",&#10;            "sentinel" : true,&#10;            "usePasswordFiles" : false&#10;         },&#10;         "clusterDomain" : "cluster.local",&#10;         "common" : {&#10;            "exampleValue" : "common-chart",&#10;            "global" : {&#10;               "imagePullSecrets" : [],&#10;               "imageRegistry" : "",&#10;               "redis" : {&#10;                  "password" : ""&#10;               },&#10;               "storageClass" : ""&#10;            }&#10;         },&#10;         "commonAnnotations" : {},&#10;         "commonConfiguration" : "appendonly no",&#10;         "commonLabels" : {},&#10;         "consul" : {&#10;            "enabled" : false&#10;         },&#10;         "diagnosticMode" : {&#10;            "args" : [&#10;               "infinity"&#10;            ],&#10;            "command" : [&#10;               "sleep"&#10;            ],&#10;            "enabled" : false&#10;         },&#10;         "enabled" : true,&#10;         "existingConfigmap" : "",&#10;         "extraDeploy" : [],&#10;         "fullnameOverride" : "",&#10;         "global" : {&#10;            "imagePullSecrets" : [],&#10;            "imageRegistry" : "",&#10;            "redis" : {&#10;               "password" : ""&#10;            },&#10;            "storageClass" : ""&#10;         },&#10;         "image" : {&#10;            "debug" : false,&#10;            "digest" : "",&#10;            "pullPolicy" : "IfNotPresent",&#10;            "pullSecrets" : [],&#10;            "registry" : "docker.io",&#10;            "repository" : "bitnami/redis",&#10;            "tag" : "7.0.8-debian-11-r0"&#10;         },&#10;         "kubeVersion" : "",&#10;         "master" : {&#10;            "affinity" : {},&#10;            "args" : [],&#10;            "command" : [],&#10;            "configuration" : "",&#10;            "containerPorts" : {&#10;               "redis" : 6379&#10;            },&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "count" : 1,&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "disableCommands" : [&#10;               "FLUSHDB",&#10;               "FLUSHALL"&#10;            ],&#10;            "dnsConfig" : {},&#10;            "dnsPolicy" : "",&#10;            "extraEnvVars" : [],&#10;            "extraEnvVarsCM" : "",&#10;            "extraEnvVarsSecret" : "",&#10;            "extraFlags" : [],&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "hostAliases" : [],&#10;            "initContainers" : [],&#10;            "kind" : "StatefulSet",&#10;            "lifecycleHooks" : {},&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "minReadySeconds" : 0,&#10;            "nodeAffinityPreset" : {&#10;               "key" : "",&#10;               "type" : "",&#10;               "values" : []&#10;            },&#10;            "nodeSelector" : {},&#10;            "persistence" : {&#10;               "accessModes" : [&#10;                  "ReadWriteOnce"&#10;               ],&#10;               "annotations" : {},&#10;               "dataSource" : {},&#10;               "enabled" : true,&#10;               "existingClaim" : "",&#10;               "medium" : "",&#10;               "path" : "/data",&#10;               "selector" : {},&#10;               "size" : "8Gi",&#10;               "sizeLimit" : "",&#10;               "storageClass" : "",&#10;               "subPath" : "",&#10;               "subPathExpr" : ""&#10;            },&#10;            "podAffinityPreset" : "",&#10;            "podAnnotations" : {},&#10;            "podAntiAffinityPreset" : "soft",&#10;            "podLabels" : {},&#10;            "podSecurityContext" : {&#10;               "enabled" : true,&#10;               "fsGroup" : 1001&#10;            },&#10;            "preExecCmds" : [],&#10;            "priorityClassName" : "",&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "schedulerName" : "",&#10;            "service" : {&#10;               "annotations" : {},&#10;               "clusterIP" : "",&#10;               "externalIPs" : [],&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "internalTrafficPolicy" : "Cluster",&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "nodePorts" : {&#10;                  "redis" : ""&#10;               },&#10;               "ports" : {&#10;                  "redis" : 6379&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "sessionAffinityConfig" : {},&#10;               "type" : "ClusterIP"&#10;            },&#10;            "serviceAccount" : {&#10;               "annotations" : {},&#10;               "automountServiceAccountToken" : true,&#10;               "create" : false,&#10;               "name" : ""&#10;            },&#10;            "shareProcessNamespace" : false,&#10;            "sidecars" : [],&#10;            "startupProbe" : {&#10;               "enabled" : false,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "terminationGracePeriodSeconds" : 30,&#10;            "tolerations" : [],&#10;            "topologySpreadConstraints" : [],&#10;            "updateStrategy" : {&#10;               "type" : "RollingUpdate"&#10;            }&#10;         },&#10;         "metrics" : {&#10;            "command" : [],&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "enabled" : false,&#10;            "extraArgs" : {},&#10;            "extraEnvVars" : [],&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "image" : {&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/redis-exporter",&#10;               "tag" : "1.45.0-debian-11-r26"&#10;            },&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "podAnnotations" : {&#10;               "prometheus.io/port" : "9121",&#10;               "prometheus.io/scrape" : "true"&#10;            },&#10;            "podLabels" : {},&#10;            "prometheusRule" : {&#10;               "additionalLabels" : {},&#10;               "enabled" : false,&#10;               "namespace" : "",&#10;               "rules" : []&#10;            },&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 3,&#10;               "initialDelaySeconds" : 5,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "redisTargetHost" : "localhost",&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "service" : {&#10;               "annotations" : {},&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "port" : 9121,&#10;               "type" : "ClusterIP"&#10;            },&#10;            "serviceMonitor" : {&#10;               "additionalLabels" : {},&#10;               "enabled" : false,&#10;               "honorLabels" : false,&#10;               "interval" : "30s",&#10;               "metricRelabelings" : [],&#10;               "namespace" : "",&#10;               "podTargetLabels" : [],&#10;               "relabellings" : [],&#10;               "scrapeTimeout" : ""&#10;            },&#10;            "startupProbe" : {&#10;               "enabled" : false,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            }&#10;         },&#10;         "nameOverride" : "",&#10;         "networkPolicy" : {&#10;            "allowExternal" : true,&#10;            "enabled" : false,&#10;            "extraEgress" : [],&#10;            "extraIngress" : [],&#10;            "ingressNSMatchLabels" : {},&#10;            "ingressNSPodMatchLabels" : {}&#10;         },&#10;         "pdb" : {&#10;            "create" : false,&#10;            "maxUnavailable" : "",&#10;            "minAvailable" : 1&#10;         },&#10;         "podSecurityPolicy" : {&#10;            "create" : false,&#10;            "enabled" : false&#10;         },&#10;         "rbac" : {&#10;            "create" : false,&#10;            "rules" : []&#10;         },&#10;         "replica" : {&#10;            "affinity" : {},&#10;            "args" : [],&#10;            "autoscaling" : {&#10;               "enabled" : false,&#10;               "maxReplicas" : 11,&#10;               "minReplicas" : 1,&#10;               "targetCPU" : "",&#10;               "targetMemory" : ""&#10;            },&#10;            "command" : [],&#10;            "configuration" : "",&#10;            "containerPorts" : {&#10;               "redis" : 6379&#10;            },&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "disableCommands" : [&#10;               "FLUSHDB",&#10;               "FLUSHALL"&#10;            ],&#10;            "dnsConfig" : {},&#10;            "dnsPolicy" : "",&#10;            "externalMaster" : {&#10;               "enabled" : false,&#10;               "host" : "",&#10;               "port" : 6379&#10;            },&#10;            "extraEnvVars" : [],&#10;            "extraEnvVarsCM" : "",&#10;            "extraEnvVarsSecret" : "",&#10;            "extraFlags" : [],&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "hostAliases" : [],&#10;            "initContainers" : [],&#10;            "lifecycleHooks" : {},&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "minReadySeconds" : 0,&#10;            "nodeAffinityPreset" : {&#10;               "key" : "",&#10;               "type" : "",&#10;               "values" : []&#10;            },&#10;            "nodeSelector" : {},&#10;            "persistence" : {&#10;               "accessModes" : [&#10;                  "ReadWriteOnce"&#10;               ],&#10;               "annotations" : {},&#10;               "dataSource" : {},&#10;               "enabled" : true,&#10;               "existingClaim" : "",&#10;               "medium" : "",&#10;               "path" : "/data",&#10;               "selector" : {},&#10;               "size" : "8Gi",&#10;               "sizeLimit" : "",&#10;               "storageClass" : "",&#10;               "subPath" : "",&#10;               "subPathExpr" : ""&#10;            },&#10;            "podAffinityPreset" : "",&#10;            "podAnnotations" : {},&#10;            "podAntiAffinityPreset" : "soft",&#10;            "podLabels" : {},&#10;            "podManagementPolicy" : "",&#10;            "podSecurityContext" : {&#10;               "enabled" : true,&#10;               "fsGroup" : 1001&#10;            },&#10;            "preExecCmds" : [],&#10;            "priorityClassName" : "",&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "replicaCount" : 3,&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "schedulerName" : "",&#10;            "service" : {&#10;               "annotations" : {},&#10;               "clusterIP" : "",&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "internalTrafficPolicy" : "Cluster",&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "nodePorts" : {&#10;                  "redis" : ""&#10;               },&#10;               "ports" : {&#10;                  "redis" : 6379&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "sessionAffinityConfig" : {},&#10;               "type" : "ClusterIP"&#10;            },&#10;            "serviceAccount" : {&#10;               "annotations" : {},&#10;               "automountServiceAccountToken" : true,&#10;               "create" : false,&#10;               "name" : ""&#10;            },&#10;            "shareProcessNamespace" : false,&#10;            "sidecars" : [],&#10;            "startupProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 22,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "terminationGracePeriodSeconds" : 30,&#10;            "tolerations" : [],&#10;            "topologySpreadConstraints" : [],&#10;            "updateStrategy" : {&#10;               "type" : "RollingUpdate"&#10;            }&#10;         },&#10;         "secretAnnotations" : {},&#10;         "sentinel" : {&#10;            "args" : [],&#10;            "automateClusterRecovery" : false,&#10;            "command" : [],&#10;            "configuration" : "",&#10;            "containerPorts" : {&#10;               "sentinel" : 26379&#10;            },&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "downAfterMilliseconds" : 60000,&#10;            "enabled" : false,&#10;            "externalMaster" : {&#10;               "enabled" : false,&#10;               "host" : "",&#10;               "port" : 6379&#10;            },&#10;            "extraEnvVars" : [],&#10;            "extraEnvVarsCM" : "",&#10;            "extraEnvVarsSecret" : "",&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "failoverTimeout" : 180000,&#10;            "getMasterTimeout" : 220,&#10;            "image" : {&#10;               "debug" : false,&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/redis-sentinel",&#10;               "tag" : "7.0.7-debian-11-r10"&#10;            },&#10;            "lifecycleHooks" : {},&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "masterSet" : "mymaster",&#10;            "parallelSyncs" : 1,&#10;            "persistence" : {&#10;               "accessModes" : [&#10;                  "ReadWriteOnce"&#10;               ],&#10;               "annotations" : {},&#10;               "dataSource" : {},&#10;               "enabled" : false,&#10;               "medium" : "",&#10;               "selector" : {},&#10;               "size" : "100Mi",&#10;               "sizeLimit" : "",&#10;               "storageClass" : ""&#10;            },&#10;            "preExecCmds" : [],&#10;            "quorum" : 2,&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "redisShutdownWaitFailover" : true,&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "service" : {&#10;               "annotations" : {},&#10;               "clusterIP" : "",&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "nodePorts" : {&#10;                  "redis" : "",&#10;                  "sentinel" : ""&#10;               },&#10;               "ports" : {&#10;                  "redis" : 6379,&#10;                  "sentinel" : 26379&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "sessionAffinityConfig" : {},&#10;               "type" : "ClusterIP"&#10;            },&#10;            "startupProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 22,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "terminationGracePeriodSeconds" : 30&#10;         },&#10;         "serviceAccount" : {&#10;            "annotations" : {},&#10;            "automountServiceAccountToken" : true,&#10;            "create" : true,&#10;            "name" : ""&#10;         },&#10;         "sysctl" : {&#10;            "command" : [],&#10;            "enabled" : false,&#10;            "image" : {&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/bitnami-shell",&#10;               "tag" : "11-debian-11-r72"&#10;            },&#10;            "mountHostSys" : false,&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            }&#10;         },&#10;         "tls" : {&#10;            "authClients" : true,&#10;            "autoGenerated" : false,&#10;            "certCAFilename" : "",&#10;            "certFilename" : "",&#10;            "certKeyFilename" : "",&#10;            "certificatesSecret" : "",&#10;            "dhParamsFilename" : "",&#10;            "enabled" : false,&#10;            "existingSecret" : ""&#10;         },&#10;         "useExternalDNS" : {&#10;            "additionalAnnotations" : {},&#10;            "annotationKey" : "external-dns.alpha.kubernetes.io/",&#10;            "enabled" : false,&#10;            "suffix" : ""&#10;         },&#10;         "volumePermissions" : {&#10;            "containerSecurityContext" : {&#10;               "runAsUser" : 0&#10;            },&#10;            "enabled" : false,&#10;            "image" : {&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/bitnami-shell",&#10;               "tag" : "11-debian-11-r72"&#10;            },&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            }&#10;         }&#10;      },&#10;      "replicaCount" : 1,&#10;      "resources" : {},&#10;      "securityContext" : {},&#10;      "service" : {&#10;         "port" : 80,&#10;         "type" : "ClusterIP"&#10;      },&#10;      "serviceAccount" : {&#10;         "annotations" : {},&#10;         "create" : true,&#10;         "name" : ""&#10;      },&#10;      "tolerations" : []&#10;   }&#10;}&#10;</microserviceDeploymentData>
          <microserviceDeploymentSummary>NAME: my-guestbook&#10;LAST DEPLOYED: Sat Feb 25 22:09:45 2023&#10;NAMESPACE: qa&#10;STATUS: deployed&#10;REVISION: 1&#10;NOTES:&#10;1. Get the application URL by running these commands:&#10;  https://devgb.idtplateer.com/&#10;</microserviceDeploymentSummary>
          <microserviceName>Guestbook QA</microserviceName>
          <status>success</status>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <definitionSourceParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>repositoryName</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>guestbook-repo</value>
            </property>
            <property>
              <propertyName>repositoryUrl</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>https://harbor.idtplateer.com/chartrepo/guestbook</value>
            </property>
            <property>
              <propertyName>repository_credential</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>/projects/Guestbook/credentials/harbor</value>
            </property>
          </definitionSourceParameters>
          <deployParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>additionalOptions</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>--create-namespace</value>
            </property>
            <property>
              <propertyName>chart</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>guestbook</value>
            </property>
            <property>
              <propertyName>releaseName</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>my-guestbook</value>
            </property>
            <property>
              <propertyName>values</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value># -- Override the name of the chart.&#10;nameOverride: ""&#10;# -- Override the fullname of the chart.&#10;fullnameOverride: ""&#10;&#10;# -- Replica count.&#10;replicaCount: 1&#10;&#10;image:&#10;  # -- Image repository.&#10;  repository: gcr.io/google-samples/gb-frontend&#10;  # -- Image pull policy.&#10;  pullPolicy: IfNotPresent&#10;  # -- Image tag.&#10;  tag: v5&#10;&#10;# -- Image pull secrets.&#10;imagePullSecrets: []&#10;&#10;serviceAccount:&#10;  # -- Specifies whether a service account should be created.&#10;  create: true&#10;  # -- Annotations to add to the service account.&#10;  annotations: {}&#10;  # If not set and create is true, a name is generated using the fullname template&#10;  # -- The name of the service account to use.&#10;  name: ""&#10;&#10;# -- Annotations to add to the pod.&#10;podAnnotations: {}&#10;&#10;# -- Security context for the pod.&#10;podSecurityContext: {}&#10;  # fsGroup: 2000&#10;&#10;# -- Security context for the container.&#10;securityContext: {}&#10;  # capabilities:&#10;  #   drop:&#10;  #   - ALL&#10;  # readOnlyRootFilesystem: true&#10;  # runAsNonRoot: true&#10;  # runAsUser: 1000&#10;&#10;&#10;service:&#10;  # -- Service type.&#10;  type: ClusterIP&#10;  # -- Service port.&#10;  port: 80&#10;&#10;# -- Resource requests and limits.&#10;resources: {}&#10;  # We usually recommend not to specify default resources and to leave this as a conscious&#10;  # choice for the user. This also increases chances charts run on environments with little&#10;  # resources, such as Minikube. If you do want to specify resources, uncomment the following&#10;  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.&#10;  # limits:&#10;  #   cpu: 100m&#10;  #   memory: 128Mi&#10;  # requests:&#10;  #   cpu: 100m&#10;  #   memory: 128Mi&#10;&#10;autoscaling:&#10;  # -- If true, create a HPA for the deployment.&#10;  enabled: false&#10;  # -- Minimum number of pod replicas.&#10;  minReplicas: 1&#10;  # -- Maximum number of pod replicas.&#10;  maxReplicas: 10&#10;  # -- Target CPU utilisation for the pod.&#10;  targetCPUUtilizationPercentage: 50&#10;  # -- Target memory utilisation for the pod.&#10;  targetMemoryUtilizationPercentage: 50&#10;&#10;# -- Node labels for pod assignment.&#10;nodeSelector: {}&#10;&#10;# -- Tolerations for pod assignment.&#10;tolerations: []&#10;&#10;# -- Affinity for pod assignment.&#10;affinity: {}&#10;&#10;redis:&#10;  architecture: standalone&#10;  enabled: true&#10;  auth:&#10;    enabled: false&#10;  master:&#10;    persistence:&#10;      enabled: true&#10;  commonConfiguration: |- &#10;    appendonly no&#10;&#10;consul:&#10;  enabled: false&#10;&#10;imagenew:&#10;  # -- Image repository.&#10;  repository: harbor.idtplateer.com/guestbook/gb-frontend&#10;  # -- Image pull policy.&#10;  pullPolicy: IfNotPresent&#10;  # -- Image tag.&#10;  tag: latest&#10;&#10;&#10;ingress:&#10;  enabled: true&#10;  ingressClassName: 'guestbook'&#10;  annotations:&#10;    alb.ingress.kubernetes.io/load-balancer-name: 'guestbook'&#10;    alb.ingress.kubernetes.io/scheme: 'internet-facing'&#10;    alb.ingress.kubernetes.io/target-type: ip&#10;    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80,"HTTPS":443}]'&#10;    alb.ingress.kubernetes.io/certificate-arn: 'arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4'&#10;    alb.ingress.kubernetes.io/ssl-policy: 'ELBSecurityPolicy-TLS-1-2-Ext-2018-06'&#10;    alb.ingress.kubernetes.io/actions.ssl-redirect: '443'&#10;    external-dns.alpha.kubernetes.io/hostname: 'devgb.idtplateer.com'&#10;  hosts:&#10;    - host: 'devgb.idtplateer.com'&#10;      paths:&#10;        - path: "/"&#10;          pathType: Prefix&#10;  tls:&#10;    - hosts:&#10;      - 'devgb.idtplateer.com'</value>
            </property>
            <property>
              <propertyName>version</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>0.1.0</value>
            </property>
          </deployParameters>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
          </propertySheet>
          <rollbackParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>rollbackEnabled</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>true</value>
            </property>
            <property>
              <propertyName>waitTimeout</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>300</value>
            </property>
          </rollbackParameters>
        </microserviceDeploymentDetail>
      </deploymentHistoryItem>
      <deploymentHistoryItem>
        <deploymentHistoryItemName>2258962a-b5cc-11ed-90e0-024be617296e</deploymentHistoryItemName>
        <completionTime>1677412387254</completionTime>
        <deployedEntityName>Guestbook</deployedEntityName>
        <deployedEntityType>application</deployedEntityType>
        <processName>Uninstall Application</processName>
        <runTime>9793</runTime>
        <smartDeploy>0</smartDeploy>
        <status>error</status>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </deploymentHistoryItem>
      <deploymentHistoryItem>
        <deploymentHistoryItemName>100aa6dd-b5cd-11ed-8094-024be617296e</deploymentHistoryItemName>
        <completionTime>1677412786041</completionTime>
        <deployedEntityName>Guestbook</deployedEntityName>
        <deployedEntityType>application</deployedEntityType>
        <processName>Uninstall Application</processName>
        <runTime>3130</runTime>
        <smartDeploy>0</smartDeploy>
        <status>error</status>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </deploymentHistoryItem>
      <deploymentHistoryItem>
        <deploymentHistoryItemName>ea84978b-b5cb-11ed-8094-024be617296e</deploymentHistoryItemName>
        <completionTime>1677412293590</completionTime>
        <deployedEntityName>Guestbook</deployedEntityName>
        <deployedEntityType>application</deployedEntityType>
        <processName>Uninstall Application</processName>
        <runTime>3025</runTime>
        <smartDeploy>0</smartDeploy>
        <status>error</status>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </deploymentHistoryItem>
      <deploymentHistoryItem>
        <deploymentHistoryItemName>6c5df639-b5d2-11ed-b724-024be617296e</deploymentHistoryItemName>
        <completionTime>1677415088421</completionTime>
        <deployedEntityName>Guestbook</deployedEntityName>
        <deployedEntityType>application</deployedEntityType>
        <processName>Uninstall Application</processName>
        <runTime>10816</runTime>
        <smartDeploy>0</smartDeploy>
        <status>error</status>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </deploymentHistoryItem>
      <deploymentHistoryItem>
        <deploymentHistoryItemName>307301c3-b5cd-11ed-90e0-024be617296e</deploymentHistoryItemName>
        <completionTime>1677412840412</completionTime>
        <deployedEntityName>Guestbook</deployedEntityName>
        <deployedEntityType>application</deployedEntityType>
        <processName>Uninstall Application</processName>
        <runTime>15641</runTime>
        <smartDeploy>0</smartDeploy>
        <status>error</status>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </deploymentHistoryItem>
      <deploymentHistoryItem>
        <deploymentHistoryItemName>4b23d703-b5c8-11ed-9ca4-024be617296e</deploymentHistoryItemName>
        <completionTime>1677410737708</completionTime>
        <deployedEntityName>Guestbook</deployedEntityName>
        <deployedEntityType>application</deployedEntityType>
        <processName>Deploy Application</processName>
        <releaseName>Guestbook</releaseName>
        <runTime>53674</runTime>
        <seeded>0</seeded>
        <smartDeploy>0</smartDeploy>
        <stageName>Stage 1</stageName>
        <status>success</status>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>ec_Guestbook-run</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>1</value>
          </property>
        </propertySheet>
        <deploymentDetailsItem>
          <deploymentDetailsItemName>68877dfd-b5c8-11ed-8bde-024be617296e</deploymentDetailsItemName>
          <actualArtifactVersion>7.0.8-debian-11-r0</actualArtifactVersion>
          <artifactName>redis</artifactName>
          <definedArtifactVersion>7.0.8-debian-11-r0</definedArtifactVersion>
          <microserviceName>Guestbook QA</microserviceName>
          <partial>0</partial>
          <processName>Deploy Application</processName>
          <status>success</status>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
          </propertySheet>
        </deploymentDetailsItem>
        <deploymentDetailsItem>
          <deploymentDetailsItemName>687507ac-b5c8-11ed-b724-024be617296e</deploymentDetailsItemName>
          <actualArtifactVersion>v5</actualArtifactVersion>
          <artifactName>guestbook</artifactName>
          <definedArtifactVersion>v5</definedArtifactVersion>
          <microserviceName>Guestbook QA</microserviceName>
          <partial>0</partial>
          <processName>Deploy Application</processName>
          <status>success</status>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
          </propertySheet>
        </deploymentDetailsItem>
        <microserviceDeploymentDetail>
          <microserviceDeploymentDetailName>68744448-b5c8-11ed-b724-024be617296e</microserviceDeploymentDetailName>
          <microserviceDefinitionType>helm</microserviceDefinitionType>
          <microserviceDeploymentData>{&#10;   "app_version" : "5.0.0",&#10;   "chart" : "guestbook-0.1.0",&#10;   "chart_name" : "guestbook",&#10;   "chart_version" : "0.1.0",&#10;   "manifests" : [&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/serviceaccount.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nautomountServiceAccountToken: true\nmetadata:\n  name: my-guestbook-redis\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "automountServiceAccountToken" : "true",&#10;            "kind" : "ServiceAccount",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/serviceaccount.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: my-guestbook\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "ServiceAccount",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-redis-configuration\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\ndata:\n  redis.conf: |-\n    # User-supplied common configuration:\n    appendonly no\n    # End of common configuration\n  master.conf: |-\n    dir /data\n    # User-supplied master configuration:\n    rename-command FLUSHDB \"\"\n    rename-command FLUSHALL \"\"\n    # End of master configuration\n  replica.conf: |-\n    dir /data\n    # User-supplied replica configuration:\n    rename-command FLUSHDB \"\"\n    rename-command FLUSHALL \"\"\n    # End of replica configuration\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "master.conf" : "dir /data\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"",&#10;               "redis.conf" : "appendonly no",&#10;               "replica.conf" : "dir /data\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\""&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-configuration",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/health-configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/health-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-redis-health\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\ndata:\n  ping_readiness_local.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h localhost \\\n        -p $REDIS_PORT \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    if [ \"$response\" != \"PONG\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_liveness_local.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h localhost \\\n        -p $REDIS_PORT \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\n    if [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ] &amp;&amp; [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_readiness_master.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h $REDIS_MASTER_HOST \\\n        -p $REDIS_MASTER_PORT_NUMBER \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    if [ \"$response\" != \"PONG\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_liveness_master.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h $REDIS_MASTER_HOST \\\n        -p $REDIS_MASTER_PORT_NUMBER \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\n    if [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_readiness_local_and_master.sh: |-\n    script_dir=\"$(dirname \"$0\")\"\n    exit_status=0\n    \"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n    \"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\n    exit $exit_status\n  ping_liveness_local_and_master.sh: |-\n    script_dir=\"$(dirname \"$0\")\"\n    exit_status=0\n    \"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n    \"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\n    exit $exit_status\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "ping_liveness_local.sh" : "[[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ] &amp;&amp; [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n  echo \"$response\"\n  exit 1\nfi",&#10;               "ping_liveness_local_and_master.sh" : "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status",&#10;               "ping_liveness_master.sh" : "[[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ]; then\n  echo \"$response\"\n  exit 1\nfi",&#10;               "ping_readiness_local.sh" : "[[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",&#10;               "ping_readiness_local_and_master.sh" : "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",&#10;               "ping_readiness_master.sh" : "[[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi"&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-health",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/scripts-configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/scripts-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-redis-scripts\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\ndata:\n  start-master.sh: |\n    #!/bin/bash\n\n    [[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then\n        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\n    fi\n    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\n        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\n    fi\n    ARGS=(\"--port\" \"${REDIS_PORT}\")\n    ARGS+=(\"--protected-mode\" \"no\")\n    ARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\n    ARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\n    exec redis-server \"${ARGS[@]}\"\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "start-master.sh" : "[[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\nif [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--protected-mode\" \"no\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\nexec redis-server \"${ARGS[@]}\"\n"&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-scripts",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-backup-configmap\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\ndata:\n  backup.sh: |\n    #!/bin/bash\n    cd /data\n    redis-cli -h  my-guestbook-redis-master save\n    mkdir -p /data/backup\n    mv /data/dump.rdb /data/backup\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "backup.sh" : "cd /data\nredis-cli -h  my-guestbook-redis-master save\nmkdir -p /data/backup\nmv /data/dump.rdb /data/backup\n"&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook-backup-configmap"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/headless-svc.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/headless-svc.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-guestbook-redis-headless\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n  annotations:\n    \nspec:\n  type: ClusterIP\n  clusterIP: None\n  ports:\n    - name: tcp-redis\n      port: 6379\n      targetPort: redis\n  selector:\n    app.kubernetes.io/name: redis\n    app.kubernetes.io/instance: my-guestbook\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "Service",&#10;            "metadata" : {&#10;               "annotations" : null,&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-headless",&#10;               "namespace" : "qa"&#10;            },&#10;            "spec" : {&#10;               "clusterIP" : "None",&#10;               "ports" : [&#10;                  {&#10;                     "name" : "tcp-redis",&#10;                     "port" : "6379",&#10;                     "targetPort" : "redis"&#10;                  }&#10;               ],&#10;               "selector" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/name" : "redis"&#10;               },&#10;               "type" : "ClusterIP"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/master/service.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/master/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-guestbook-redis-master\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: master\nspec:\n  type: ClusterIP\n  internalTrafficPolicy: Cluster\n  sessionAffinity: None\n  ports:\n    - name: tcp-redis\n      port: 6379\n      targetPort: redis\n      nodePort: null\n  selector:\n    app.kubernetes.io/name: redis\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/component: master\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "Service",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/component" : "master",&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-master",&#10;               "namespace" : "qa"&#10;            },&#10;            "spec" : {&#10;               "internalTrafficPolicy" : "Cluster",&#10;               "ports" : [&#10;                  {&#10;                     "name" : "tcp-redis",&#10;                     "nodePort" : "null",&#10;                     "port" : "6379",&#10;                     "targetPort" : "redis"&#10;                  }&#10;               ],&#10;               "selector" : {&#10;                  "app.kubernetes.io/component" : "master",&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/name" : "redis"&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "type" : "ClusterIP"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/service.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-guestbook\n  labels:\n    \n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      targetPort: http\n      protocol: TCP\n      name: http\n  selector:\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "Service",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook"&#10;            },&#10;            "spec" : {&#10;               "ports" : [&#10;                  {&#10;                     "name" : "http",&#10;                     "port" : "80",&#10;                     "protocol" : "TCP",&#10;                     "targetPort" : "http"&#10;                  }&#10;               ],&#10;               "selector" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/name" : "guestbook"&#10;               },&#10;               "type" : "ClusterIP"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/deployment.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-guestbook-v1\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: guestbook\n      app.kubernetes.io/instance: my-guestbook\n  template:\n    metadata:\n      annotations:      \n      labels:\n        app.kubernetes.io/name: guestbook\n        app.kubernetes.io/instance: my-guestbook\n    spec:\n      serviceAccountName: my-guestbook\n      securityContext:\n        {}\n      containers:\n        - name: guestbook\n          securityContext:\n            {}\n          image: \"gcr.io/google-samples/gb-frontend:v5\"\n          imagePullPolicy: IfNotPresent\n          ports:\n            - name: http\n              containerPort: 80\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              path: /\n              port: http\n          readinessProbe:\n            httpGet:\n              path: /\n              port: http\n          resources:\n            {}\n          env:\n            - name: GET_HOSTS_FROM\n              value: env\n            - name: REDIS_LEADER_SERVICE_HOST\n              value: my-guestbook-redis-master\n            - name: REDIS_FOLLOWER_SERVICE_HOST\n              value: my-guestbook-redis-master\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "apps/v1",&#10;            "kind" : "Deployment",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook-v1"&#10;            },&#10;            "spec" : {&#10;               "replicas" : 1,&#10;               "selector" : {&#10;                  "matchLabels" : {&#10;                     "app.kubernetes.io/instance" : "my-guestbook",&#10;                     "app.kubernetes.io/name" : "guestbook"&#10;                  }&#10;               },&#10;               "template" : {&#10;                  "metadata" : {&#10;                     "annotations" : null,&#10;                     "labels" : {&#10;                        "app.kubernetes.io/instance" : "my-guestbook",&#10;                        "app.kubernetes.io/name" : "guestbook"&#10;                     }&#10;                  },&#10;                  "spec" : {&#10;                     "containers" : [&#10;                        {&#10;                           "env" : [&#10;                              {&#10;                                 "name" : "GET_HOSTS_FROM",&#10;                                 "value" : "env"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_LEADER_SERVICE_HOST",&#10;                                 "value" : "my-guestbook-redis-master"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_FOLLOWER_SERVICE_HOST",&#10;                                 "value" : "my-guestbook-redis-master"&#10;                              }&#10;                           ],&#10;                           "image" : "gcr.io/google-samples/gb-frontend:v5",&#10;                           "imagePullPolicy" : "IfNotPresent",&#10;                           "livenessProbe" : {&#10;                              "httpGet" : {&#10;                                 "path" : "/",&#10;                                 "port" : "http"&#10;                              }&#10;                           },&#10;                           "name" : "guestbook",&#10;                           "ports" : [&#10;                              {&#10;                                 "containerPort" : 80,&#10;                                 "name" : "http",&#10;                                 "protocol" : "TCP"&#10;                              }&#10;                           ],&#10;                           "readinessProbe" : {&#10;                              "httpGet" : {&#10;                                 "path" : "/",&#10;                                 "port" : "http"&#10;                              }&#10;                           },&#10;                           "resources" : {},&#10;                           "securityContext" : {}&#10;                        }&#10;                     ],&#10;                     "securityContext" : {},&#10;                     "serviceAccountName" : "my-guestbook"&#10;                  }&#10;               }&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/master/application.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/master/application.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: my-guestbook-redis-master\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: master\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: redis\n      app.kubernetes.io/instance: my-guestbook\n      app.kubernetes.io/component: master\n  serviceName: my-guestbook-redis-headless\n  updateStrategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: redis\n        helm.sh/chart: redis-17.6.0\n        app.kubernetes.io/instance: my-guestbook\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component: master\n      annotations:\n        checksum/configmap: 9ad434eace5abfd23b91dd8f629794316b3a0cf125927115b96d8fe06bb88d96\n        checksum/health: 5b93e0375cbda529f002310484e90cbc6aacf0776a794a0a075ad9835281ad44\n        checksum/scripts: 4cb9ec8796901b2c02f22a71b2a1c17a674c8ae0ab20a642218c148a4c219240\n        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n    spec:\n      \n      securityContext:\n        fsGroup: 1001\n      serviceAccountName: my-guestbook-redis\n      affinity:\n        podAffinity:\n          \n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n            - podAffinityTerm:\n                labelSelector:\n                  matchLabels:\n                    app.kubernetes.io/name: redis\n                    app.kubernetes.io/instance: my-guestbook\n                    app.kubernetes.io/component: master\n                topologyKey: kubernetes.io/hostname\n              weight: 1\n        nodeAffinity:\n          \n      terminationGracePeriodSeconds: 30\n      containers:\n        - name: redis\n          image: docker.io/bitnami/redis:7.0.8-debian-11-r0\n          imagePullPolicy: \"IfNotPresent\"\n          securityContext:\n            runAsUser: 1001\n          command:\n            - /bin/bash\n          args:\n            - -c\n            - /opt/bitnami/scripts/start-scripts/start-master.sh\n          env:\n            - name: BITNAMI_DEBUG\n              value: \"false\"\n            - name: REDIS_REPLICATION_MODE\n              value: master\n            - name: ALLOW_EMPTY_PASSWORD\n              value: \"yes\"\n            - name: REDIS_TLS_ENABLED\n              value: \"no\"\n            - name: REDIS_PORT\n              value: \"6379\"\n          ports:\n            - name: redis\n              containerPort: 6379\n          livenessProbe:\n            initialDelaySeconds: 20\n            periodSeconds: 5\n            # One second longer than command timeout should prevent generation of zombie processes.\n            timeoutSeconds: 6\n            successThreshold: 1\n            failureThreshold: 5\n            exec:\n              command:\n                - sh\n                - -c\n                - /health/ping_liveness_local.sh 5\n          readinessProbe:\n            initialDelaySeconds: 20\n            periodSeconds: 5\n            timeoutSeconds: 2\n            successThreshold: 1\n            failureThreshold: 5\n            exec:\n              command:\n                - sh\n                - -c\n                - /health/ping_readiness_local.sh 1\n          resources:\n            limits: {}\n            requests: {}\n          volumeMounts:\n            - name: start-scripts\n              mountPath: /opt/bitnami/scripts/start-scripts\n            - name: health\n              mountPath: /health\n            - name: redis-data\n              mountPath: /data\n            - name: config\n              mountPath: /opt/bitnami/redis/mounted-etc\n            - name: redis-tmp-conf\n              mountPath: /opt/bitnami/redis/etc/\n            - name: tmp\n              mountPath: /tmp\n      volumes:\n        - name: start-scripts\n          configMap:\n            name: my-guestbook-redis-scripts\n            defaultMode: 0755\n        - name: health\n          configMap:\n            name: my-guestbook-redis-health\n            defaultMode: 0755\n        - name: config\n          configMap:\n            name: my-guestbook-redis-configuration\n        - name: redis-tmp-conf\n          emptyDir: {}\n        - name: tmp\n          emptyDir: {}\n  volumeClaimTemplates:\n    - metadata:\n        name: redis-data\n        labels:\n          app.kubernetes.io/name: redis\n          app.kubernetes.io/instance: my-guestbook\n          app.kubernetes.io/component: master\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        resources:\n          requests:\n            storage: \"8Gi\"\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "apps/v1",&#10;            "kind" : "StatefulSet",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/component" : "master",&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-master",&#10;               "namespace" : "qa"&#10;            },&#10;            "spec" : {&#10;               "replicas" : "1",&#10;               "selector" : {&#10;                  "matchLabels" : {&#10;                     "app.kubernetes.io/component" : "master",&#10;                     "app.kubernetes.io/instance" : "my-guestbook",&#10;                     "app.kubernetes.io/name" : "redis"&#10;                  }&#10;               },&#10;               "serviceName" : "my-guestbook-redis-headless",&#10;               "template" : {&#10;                  "metadata" : {&#10;                     "annotations" : {&#10;                        "checksum/configmap" : "9ad434eace5abfd23b91dd8f629794316b3a0cf125927115b96d8fe06bb88d96",&#10;                        "checksum/health" : "5b93e0375cbda529f002310484e90cbc6aacf0776a794a0a075ad9835281ad44",&#10;                        "checksum/scripts" : "4cb9ec8796901b2c02f22a71b2a1c17a674c8ae0ab20a642218c148a4c219240",&#10;                        "checksum/secret" : "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"&#10;                     },&#10;                     "labels" : {&#10;                        "app.kubernetes.io/component" : "master",&#10;                        "app.kubernetes.io/instance" : "my-guestbook",&#10;                        "app.kubernetes.io/managed-by" : "Helm",&#10;                        "app.kubernetes.io/name" : "redis",&#10;                        "helm.sh/chart" : "redis-17.6.0"&#10;                     }&#10;                  },&#10;                  "spec" : {&#10;                     "affinity" : {&#10;                        "nodeAffinity" : null,&#10;                        "podAffinity" : null,&#10;                        "podAntiAffinity" : {&#10;                           "preferredDuringSchedulingIgnoredDuringExecution" : [&#10;                              {&#10;                                 "podAffinityTerm" : {&#10;                                    "labelSelector" : {&#10;                                       "matchLabels" : {&#10;                                          "app.kubernetes.io/component" : "master",&#10;                                          "app.kubernetes.io/instance" : "my-guestbook",&#10;                                          "app.kubernetes.io/name" : "redis"&#10;                                       }&#10;                                    },&#10;                                    "topologyKey" : "kubernetes.io/hostname"&#10;                                 },&#10;                                 "weight" : "1"&#10;                              }&#10;                           ]&#10;                        }&#10;                     },&#10;                     "containers" : [&#10;                        {&#10;                           "args" : [&#10;                              "-c",&#10;                              "/opt/bitnami/scripts/start-scripts/start-master.sh"&#10;                           ],&#10;                           "command" : [&#10;                              "/bin/bash"&#10;                           ],&#10;                           "env" : [&#10;                              {&#10;                                 "name" : "BITNAMI_DEBUG",&#10;                                 "value" : "false"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_REPLICATION_MODE",&#10;                                 "value" : "master"&#10;                              },&#10;                              {&#10;                                 "name" : "ALLOW_EMPTY_PASSWORD",&#10;                                 "value" : "yes"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_TLS_ENABLED",&#10;                                 "value" : "no"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_PORT",&#10;                                 "value" : "6379"&#10;                              }&#10;                           ],&#10;                           "image" : "docker.io/bitnami/redis:7.0.8-debian-11-r0",&#10;                           "imagePullPolicy" : "IfNotPresent",&#10;                           "livenessProbe" : {&#10;                              "exec" : {&#10;                                 "command" : [&#10;                                    "sh",&#10;                                    "-c",&#10;                                    "/health/ping_liveness_local.sh 5"&#10;                                 ]&#10;                              },&#10;                              "failureThreshold" : "5",&#10;                              "initialDelaySeconds" : "20",&#10;                              "periodSeconds" : "5",&#10;                              "successThreshold" : "1",&#10;                              "timeoutSeconds" : "6"&#10;                           },&#10;                           "name" : "redis",&#10;                           "ports" : [&#10;                              {&#10;                                 "containerPort" : "6379",&#10;                                 "name" : "redis"&#10;                              }&#10;                           ],&#10;                           "readinessProbe" : {&#10;                              "exec" : {&#10;                                 "command" : [&#10;                                    "sh",&#10;                                    "-c",&#10;                                    "/health/ping_readiness_local.sh 1"&#10;                                 ]&#10;                              },&#10;                              "failureThreshold" : "5",&#10;                              "initialDelaySeconds" : "20",&#10;                              "periodSeconds" : "5",&#10;                              "successThreshold" : "1",&#10;                              "timeoutSeconds" : "2"&#10;                           },&#10;                           "resources" : {&#10;                              "limits" : {},&#10;                              "requests" : {}&#10;                           },&#10;                           "securityContext" : {&#10;                              "runAsUser" : "1001"&#10;                           },&#10;                           "volumeMounts" : [&#10;                              {&#10;                                 "mountPath" : "/opt/bitnami/scripts/start-scripts",&#10;                                 "name" : "start-scripts"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/health",&#10;                                 "name" : "health"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/data",&#10;                                 "name" : "redis-data"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/opt/bitnami/redis/mounted-etc",&#10;                                 "name" : "config"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/opt/bitnami/redis/etc/",&#10;                                 "name" : "redis-tmp-conf"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/tmp",&#10;                                 "name" : "tmp"&#10;                              }&#10;                           ]&#10;                        }&#10;                     ],&#10;                     "securityContext" : {&#10;                        "fsGroup" : "1001"&#10;                     },&#10;                     "serviceAccountName" : "my-guestbook-redis",&#10;                     "terminationGracePeriodSeconds" : "30",&#10;                     "volumes" : [&#10;                        {&#10;                           "configMap" : {&#10;                              "defaultMode" : "0755",&#10;                              "name" : "my-guestbook-redis-scripts"&#10;                           },&#10;                           "name" : "start-scripts"&#10;                        },&#10;                        {&#10;                           "configMap" : {&#10;                              "defaultMode" : "0755",&#10;                              "name" : "my-guestbook-redis-health"&#10;                           },&#10;                           "name" : "health"&#10;                        },&#10;                        {&#10;                           "configMap" : {&#10;                              "name" : "my-guestbook-redis-configuration"&#10;                           },&#10;                           "name" : "config"&#10;                        },&#10;                        {&#10;                           "emptyDir" : {},&#10;                           "name" : "redis-tmp-conf"&#10;                        },&#10;                        {&#10;                           "emptyDir" : {},&#10;                           "name" : "tmp"&#10;                        }&#10;                     ]&#10;                  }&#10;               },&#10;               "updateStrategy" : {&#10;                  "type" : "RollingUpdate"&#10;               },&#10;               "volumeClaimTemplates" : [&#10;                  {&#10;                     "metadata" : {&#10;                        "labels" : {&#10;                           "app.kubernetes.io/component" : "master",&#10;                           "app.kubernetes.io/instance" : "my-guestbook",&#10;                           "app.kubernetes.io/name" : "redis"&#10;                        },&#10;                        "name" : "redis-data"&#10;                     },&#10;                     "spec" : {&#10;                        "accessModes" : [&#10;                           "ReadWriteOnce"&#10;                        ],&#10;                        "resources" : {&#10;                           "requests" : {&#10;                              "storage" : "8Gi"&#10;                           }&#10;                        }&#10;                     }&#10;                  }&#10;               ]&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/ingressclass.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/ingressclass.yaml\napiVersion: networking.k8s.io/v1\nkind: IngressClass\nmetadata:\n  name: guestbook\nspec:\n  controller: \"ingress.k8s.aws/alb\"\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "networking.k8s.io/v1",&#10;            "kind" : "IngressClass",&#10;            "metadata" : {&#10;               "name" : "guestbook"&#10;            },&#10;            "spec" : {&#10;               "controller" : "ingress.k8s.aws/alb"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/ingress.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-guestbook\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\n  annotations:\n    alb.ingress.kubernetes.io/actions.ssl-redirect: \"443\"\n    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4\n    alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\":80,\"HTTPS\":443}]'\n    alb.ingress.kubernetes.io/load-balancer-name: guestbook\n    alb.ingress.kubernetes.io/scheme: internet-facing\n    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06\n    alb.ingress.kubernetes.io/target-type: ip\n    external-dns.alpha.kubernetes.io/hostname: devgb.idtplateer.com\nspec:\n  ingressClassName: guestbook\n  tls:\n    - hosts:\n        - \"devgb.idtplateer.com\"\n      secretName: \n  rules:\n    - host: \"devgb.idtplateer.com\"\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: my-guestbook\n                port:\n                  number: 80\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "networking.k8s.io/v1",&#10;            "kind" : "Ingress",&#10;            "metadata" : {&#10;               "annotations" : {&#10;                  "alb.ingress.kubernetes.io/actions.ssl-redirect" : "443",&#10;                  "alb.ingress.kubernetes.io/certificate-arn" : "arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4",&#10;                  "alb.ingress.kubernetes.io/listen-ports" : "[{\"HTTP\":80,\"HTTPS\":443}]",&#10;                  "alb.ingress.kubernetes.io/load-balancer-name" : "guestbook",&#10;                  "alb.ingress.kubernetes.io/scheme" : "internet-facing",&#10;                  "alb.ingress.kubernetes.io/ssl-policy" : "ELBSecurityPolicy-TLS-1-2-Ext-2018-06",&#10;                  "alb.ingress.kubernetes.io/target-type" : "ip",&#10;                  "external-dns.alpha.kubernetes.io/hostname" : "devgb.idtplateer.com"&#10;               },&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook"&#10;            },&#10;            "spec" : {&#10;               "ingressClassName" : "guestbook",&#10;               "rules" : [&#10;                  {&#10;                     "host" : "devgb.idtplateer.com",&#10;                     "http" : {&#10;                        "paths" : [&#10;                           {&#10;                              "backend" : {&#10;                                 "service" : {&#10;                                    "name" : "my-guestbook",&#10;                                    "port" : {&#10;                                       "number" : "80"&#10;                                    }&#10;                                 }&#10;                              },&#10;                              "path" : "/",&#10;                              "pathType" : "Prefix"&#10;                           }&#10;                        ]&#10;                     }&#10;                  }&#10;               ],&#10;               "tls" : [&#10;                  {&#10;                     "hosts" : [&#10;                        "devgb.idtplateer.com"&#10;                     ],&#10;                     "secretName" : null&#10;                  }&#10;               ]&#10;            }&#10;         }&#10;      }&#10;   ],&#10;   "name" : "my-guestbook",&#10;   "namespace" : "qa",&#10;   "notes" : "NOTES:\n1. Get the application URL by running these commands:\n  https://devgb.idtplateer.com/\n\n",&#10;   "revision" : "1",&#10;   "status" : "deployed",&#10;   "updated" : "2023-02-26 20:25:44.283459928 +0900 KST",&#10;   "values" : {&#10;      "affinity" : {},&#10;      "autoscaling" : {&#10;         "enabled" : false,&#10;         "maxReplicas" : 10,&#10;         "minReplicas" : 1,&#10;         "targetCPUUtilizationPercentage" : 50,&#10;         "targetMemoryUtilizationPercentage" : 50&#10;      },&#10;      "consul" : {&#10;         "enabled" : false&#10;      },&#10;      "fullnameOverride" : "",&#10;      "image" : {&#10;         "pullPolicy" : "IfNotPresent",&#10;         "repository" : "gcr.io/google-samples/gb-frontend",&#10;         "tag" : "v5"&#10;      },&#10;      "imagePullSecrets" : [],&#10;      "imagenew" : {&#10;         "pullPolicy" : "IfNotPresent",&#10;         "repository" : "harbor.idtplateer.com/guestbook/gb-frontend",&#10;         "tag" : "latest"&#10;      },&#10;      "ingress" : {&#10;         "annotations" : {&#10;            "alb.ingress.kubernetes.io/actions.ssl-redirect" : "443",&#10;            "alb.ingress.kubernetes.io/certificate-arn" : "arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4",&#10;            "alb.ingress.kubernetes.io/listen-ports" : "[{\"HTTP\":80,\"HTTPS\":443}]",&#10;            "alb.ingress.kubernetes.io/load-balancer-name" : "guestbook",&#10;            "alb.ingress.kubernetes.io/scheme" : "internet-facing",&#10;            "alb.ingress.kubernetes.io/ssl-policy" : "ELBSecurityPolicy-TLS-1-2-Ext-2018-06",&#10;            "alb.ingress.kubernetes.io/target-type" : "ip",&#10;            "external-dns.alpha.kubernetes.io/hostname" : "devgb.idtplateer.com"&#10;         },&#10;         "enabled" : true,&#10;         "hosts" : [&#10;            {&#10;               "host" : "devgb.idtplateer.com",&#10;               "paths" : [&#10;                  {&#10;                     "path" : "/",&#10;                     "pathType" : "Prefix"&#10;                  }&#10;               ]&#10;            }&#10;         ],&#10;         "ingressClassName" : "guestbook",&#10;         "tls" : [&#10;            {&#10;               "hosts" : [&#10;                  "devgb.idtplateer.com"&#10;               ]&#10;            }&#10;         ]&#10;      },&#10;      "nameOverride" : "",&#10;      "nodeSelector" : {},&#10;      "podAnnotations" : {},&#10;      "podSecurityContext" : {},&#10;      "redis" : {&#10;         "architecture" : "standalone",&#10;         "auth" : {&#10;            "enabled" : false,&#10;            "existingSecret" : "",&#10;            "existingSecretPasswordKey" : "",&#10;            "password" : "",&#10;            "sentinel" : true,&#10;            "usePasswordFiles" : false&#10;         },&#10;         "clusterDomain" : "cluster.local",&#10;         "common" : {&#10;            "exampleValue" : "common-chart",&#10;            "global" : {&#10;               "imagePullSecrets" : [],&#10;               "imageRegistry" : "",&#10;               "redis" : {&#10;                  "password" : ""&#10;               },&#10;               "storageClass" : ""&#10;            }&#10;         },&#10;         "commonAnnotations" : {},&#10;         "commonConfiguration" : "appendonly no",&#10;         "commonLabels" : {},&#10;         "consul" : {&#10;            "enabled" : false&#10;         },&#10;         "diagnosticMode" : {&#10;            "args" : [&#10;               "infinity"&#10;            ],&#10;            "command" : [&#10;               "sleep"&#10;            ],&#10;            "enabled" : false&#10;         },&#10;         "enabled" : true,&#10;         "existingConfigmap" : "",&#10;         "extraDeploy" : [],&#10;         "fullnameOverride" : "",&#10;         "global" : {&#10;            "imagePullSecrets" : [],&#10;            "imageRegistry" : "",&#10;            "redis" : {&#10;               "password" : ""&#10;            },&#10;            "storageClass" : ""&#10;         },&#10;         "image" : {&#10;            "debug" : false,&#10;            "digest" : "",&#10;            "pullPolicy" : "IfNotPresent",&#10;            "pullSecrets" : [],&#10;            "registry" : "docker.io",&#10;            "repository" : "bitnami/redis",&#10;            "tag" : "7.0.8-debian-11-r0"&#10;         },&#10;         "kubeVersion" : "",&#10;         "master" : {&#10;            "affinity" : {},&#10;            "args" : [],&#10;            "command" : [],&#10;            "configuration" : "",&#10;            "containerPorts" : {&#10;               "redis" : 6379&#10;            },&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "count" : 1,&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "disableCommands" : [&#10;               "FLUSHDB",&#10;               "FLUSHALL"&#10;            ],&#10;            "dnsConfig" : {},&#10;            "dnsPolicy" : "",&#10;            "extraEnvVars" : [],&#10;            "extraEnvVarsCM" : "",&#10;            "extraEnvVarsSecret" : "",&#10;            "extraFlags" : [],&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "hostAliases" : [],&#10;            "initContainers" : [],&#10;            "kind" : "StatefulSet",&#10;            "lifecycleHooks" : {},&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "minReadySeconds" : 0,&#10;            "nodeAffinityPreset" : {&#10;               "key" : "",&#10;               "type" : "",&#10;               "values" : []&#10;            },&#10;            "nodeSelector" : {},&#10;            "persistence" : {&#10;               "accessModes" : [&#10;                  "ReadWriteOnce"&#10;               ],&#10;               "annotations" : {},&#10;               "dataSource" : {},&#10;               "enabled" : true,&#10;               "existingClaim" : "",&#10;               "medium" : "",&#10;               "path" : "/data",&#10;               "selector" : {},&#10;               "size" : "8Gi",&#10;               "sizeLimit" : "",&#10;               "storageClass" : "",&#10;               "subPath" : "",&#10;               "subPathExpr" : ""&#10;            },&#10;            "podAffinityPreset" : "",&#10;            "podAnnotations" : {},&#10;            "podAntiAffinityPreset" : "soft",&#10;            "podLabels" : {},&#10;            "podSecurityContext" : {&#10;               "enabled" : true,&#10;               "fsGroup" : 1001&#10;            },&#10;            "preExecCmds" : [],&#10;            "priorityClassName" : "",&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "schedulerName" : "",&#10;            "service" : {&#10;               "annotations" : {},&#10;               "clusterIP" : "",&#10;               "externalIPs" : [],&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "internalTrafficPolicy" : "Cluster",&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "nodePorts" : {&#10;                  "redis" : ""&#10;               },&#10;               "ports" : {&#10;                  "redis" : 6379&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "sessionAffinityConfig" : {},&#10;               "type" : "ClusterIP"&#10;            },&#10;            "serviceAccount" : {&#10;               "annotations" : {},&#10;               "automountServiceAccountToken" : true,&#10;               "create" : false,&#10;               "name" : ""&#10;            },&#10;            "shareProcessNamespace" : false,&#10;            "sidecars" : [],&#10;            "startupProbe" : {&#10;               "enabled" : false,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "terminationGracePeriodSeconds" : 30,&#10;            "tolerations" : [],&#10;            "topologySpreadConstraints" : [],&#10;            "updateStrategy" : {&#10;               "type" : "RollingUpdate"&#10;            }&#10;         },&#10;         "metrics" : {&#10;            "command" : [],&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "enabled" : false,&#10;            "extraArgs" : {},&#10;            "extraEnvVars" : [],&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "image" : {&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/redis-exporter",&#10;               "tag" : "1.45.0-debian-11-r26"&#10;            },&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "podAnnotations" : {&#10;               "prometheus.io/port" : "9121",&#10;               "prometheus.io/scrape" : "true"&#10;            },&#10;            "podLabels" : {},&#10;            "prometheusRule" : {&#10;               "additionalLabels" : {},&#10;               "enabled" : false,&#10;               "namespace" : "",&#10;               "rules" : []&#10;            },&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 3,&#10;               "initialDelaySeconds" : 5,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "redisTargetHost" : "localhost",&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "service" : {&#10;               "annotations" : {},&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "port" : 9121,&#10;               "type" : "ClusterIP"&#10;            },&#10;            "serviceMonitor" : {&#10;               "additionalLabels" : {},&#10;               "enabled" : false,&#10;               "honorLabels" : false,&#10;               "interval" : "30s",&#10;               "metricRelabelings" : [],&#10;               "namespace" : "",&#10;               "podTargetLabels" : [],&#10;               "relabellings" : [],&#10;               "scrapeTimeout" : ""&#10;            },&#10;            "startupProbe" : {&#10;               "enabled" : false,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            }&#10;         },&#10;         "nameOverride" : "",&#10;         "networkPolicy" : {&#10;            "allowExternal" : true,&#10;            "enabled" : false,&#10;            "extraEgress" : [],&#10;            "extraIngress" : [],&#10;            "ingressNSMatchLabels" : {},&#10;            "ingressNSPodMatchLabels" : {}&#10;         },&#10;         "pdb" : {&#10;            "create" : false,&#10;            "maxUnavailable" : "",&#10;            "minAvailable" : 1&#10;         },&#10;         "podSecurityPolicy" : {&#10;            "create" : false,&#10;            "enabled" : false&#10;         },&#10;         "rbac" : {&#10;            "create" : false,&#10;            "rules" : []&#10;         },&#10;         "replica" : {&#10;            "affinity" : {},&#10;            "args" : [],&#10;            "autoscaling" : {&#10;               "enabled" : false,&#10;               "maxReplicas" : 11,&#10;               "minReplicas" : 1,&#10;               "targetCPU" : "",&#10;               "targetMemory" : ""&#10;            },&#10;            "command" : [],&#10;            "configuration" : "",&#10;            "containerPorts" : {&#10;               "redis" : 6379&#10;            },&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "disableCommands" : [&#10;               "FLUSHDB",&#10;               "FLUSHALL"&#10;            ],&#10;            "dnsConfig" : {},&#10;            "dnsPolicy" : "",&#10;            "externalMaster" : {&#10;               "enabled" : false,&#10;               "host" : "",&#10;               "port" : 6379&#10;            },&#10;            "extraEnvVars" : [],&#10;            "extraEnvVarsCM" : "",&#10;            "extraEnvVarsSecret" : "",&#10;            "extraFlags" : [],&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "hostAliases" : [],&#10;            "initContainers" : [],&#10;            "lifecycleHooks" : {},&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "minReadySeconds" : 0,&#10;            "nodeAffinityPreset" : {&#10;               "key" : "",&#10;               "type" : "",&#10;               "values" : []&#10;            },&#10;            "nodeSelector" : {},&#10;            "persistence" : {&#10;               "accessModes" : [&#10;                  "ReadWriteOnce"&#10;               ],&#10;               "annotations" : {},&#10;               "dataSource" : {},&#10;               "enabled" : true,&#10;               "existingClaim" : "",&#10;               "medium" : "",&#10;               "path" : "/data",&#10;               "selector" : {},&#10;               "size" : "8Gi",&#10;               "sizeLimit" : "",&#10;               "storageClass" : "",&#10;               "subPath" : "",&#10;               "subPathExpr" : ""&#10;            },&#10;            "podAffinityPreset" : "",&#10;            "podAnnotations" : {},&#10;            "podAntiAffinityPreset" : "soft",&#10;            "podLabels" : {},&#10;            "podManagementPolicy" : "",&#10;            "podSecurityContext" : {&#10;               "enabled" : true,&#10;               "fsGroup" : 1001&#10;            },&#10;            "preExecCmds" : [],&#10;            "priorityClassName" : "",&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "replicaCount" : 3,&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "schedulerName" : "",&#10;            "service" : {&#10;               "annotations" : {},&#10;               "clusterIP" : "",&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "internalTrafficPolicy" : "Cluster",&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "nodePorts" : {&#10;                  "redis" : ""&#10;               },&#10;               "ports" : {&#10;                  "redis" : 6379&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "sessionAffinityConfig" : {},&#10;               "type" : "ClusterIP"&#10;            },&#10;            "serviceAccount" : {&#10;               "annotations" : {},&#10;               "automountServiceAccountToken" : true,&#10;               "create" : false,&#10;               "name" : ""&#10;            },&#10;            "shareProcessNamespace" : false,&#10;            "sidecars" : [],&#10;            "startupProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 22,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "terminationGracePeriodSeconds" : 30,&#10;            "tolerations" : [],&#10;            "topologySpreadConstraints" : [],&#10;            "updateStrategy" : {&#10;               "type" : "RollingUpdate"&#10;            }&#10;         },&#10;         "secretAnnotations" : {},&#10;         "sentinel" : {&#10;            "args" : [],&#10;            "automateClusterRecovery" : false,&#10;            "command" : [],&#10;            "configuration" : "",&#10;            "containerPorts" : {&#10;               "sentinel" : 26379&#10;            },&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "downAfterMilliseconds" : 60000,&#10;            "enabled" : false,&#10;            "externalMaster" : {&#10;               "enabled" : false,&#10;               "host" : "",&#10;               "port" : 6379&#10;            },&#10;            "extraEnvVars" : [],&#10;            "extraEnvVarsCM" : "",&#10;            "extraEnvVarsSecret" : "",&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "failoverTimeout" : 180000,&#10;            "getMasterTimeout" : 220,&#10;            "image" : {&#10;               "debug" : false,&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/redis-sentinel",&#10;               "tag" : "7.0.7-debian-11-r10"&#10;            },&#10;            "lifecycleHooks" : {},&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "masterSet" : "mymaster",&#10;            "parallelSyncs" : 1,&#10;            "persistence" : {&#10;               "accessModes" : [&#10;                  "ReadWriteOnce"&#10;               ],&#10;               "annotations" : {},&#10;               "dataSource" : {},&#10;               "enabled" : false,&#10;               "medium" : "",&#10;               "selector" : {},&#10;               "size" : "100Mi",&#10;               "sizeLimit" : "",&#10;               "storageClass" : ""&#10;            },&#10;            "preExecCmds" : [],&#10;            "quorum" : 2,&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "redisShutdownWaitFailover" : true,&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "service" : {&#10;               "annotations" : {},&#10;               "clusterIP" : "",&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "nodePorts" : {&#10;                  "redis" : "",&#10;                  "sentinel" : ""&#10;               },&#10;               "ports" : {&#10;                  "redis" : 6379,&#10;                  "sentinel" : 26379&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "sessionAffinityConfig" : {},&#10;               "type" : "ClusterIP"&#10;            },&#10;            "startupProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 22,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "terminationGracePeriodSeconds" : 30&#10;         },&#10;         "serviceAccount" : {&#10;            "annotations" : {},&#10;            "automountServiceAccountToken" : true,&#10;            "create" : true,&#10;            "name" : ""&#10;         },&#10;         "sysctl" : {&#10;            "command" : [],&#10;            "enabled" : false,&#10;            "image" : {&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/bitnami-shell",&#10;               "tag" : "11-debian-11-r72"&#10;            },&#10;            "mountHostSys" : false,&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            }&#10;         },&#10;         "tls" : {&#10;            "authClients" : true,&#10;            "autoGenerated" : false,&#10;            "certCAFilename" : "",&#10;            "certFilename" : "",&#10;            "certKeyFilename" : "",&#10;            "certificatesSecret" : "",&#10;            "dhParamsFilename" : "",&#10;            "enabled" : false,&#10;            "existingSecret" : ""&#10;         },&#10;         "useExternalDNS" : {&#10;            "additionalAnnotations" : {},&#10;            "annotationKey" : "external-dns.alpha.kubernetes.io/",&#10;            "enabled" : false,&#10;            "suffix" : ""&#10;         },&#10;         "volumePermissions" : {&#10;            "containerSecurityContext" : {&#10;               "runAsUser" : 0&#10;            },&#10;            "enabled" : false,&#10;            "image" : {&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/bitnami-shell",&#10;               "tag" : "11-debian-11-r72"&#10;            },&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            }&#10;         }&#10;      },&#10;      "replicaCount" : 1,&#10;      "resources" : {},&#10;      "securityContext" : {},&#10;      "service" : {&#10;         "port" : 80,&#10;         "type" : "ClusterIP"&#10;      },&#10;      "serviceAccount" : {&#10;         "annotations" : {},&#10;         "create" : true,&#10;         "name" : ""&#10;      },&#10;      "tolerations" : []&#10;   }&#10;}&#10;</microserviceDeploymentData>
          <microserviceDeploymentSummary>NAME: my-guestbook&#10;LAST DEPLOYED: Sun Feb 26 20:25:44 2023&#10;NAMESPACE: qa&#10;STATUS: deployed&#10;REVISION: 1&#10;NOTES:&#10;1. Get the application URL by running these commands:&#10;  https://devgb.idtplateer.com/&#10;</microserviceDeploymentSummary>
          <microserviceName>Guestbook QA</microserviceName>
          <status>success</status>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <definitionSourceParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>repositoryName</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>guestbook-repo</value>
            </property>
            <property>
              <propertyName>repositoryUrl</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>https://harbor.idtplateer.com/chartrepo/guestbook</value>
            </property>
            <property>
              <propertyName>repository_credential</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>/projects/Guestbook/credentials/harbor</value>
            </property>
          </definitionSourceParameters>
          <deployParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>additionalOptions</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>--create-namespace</value>
            </property>
            <property>
              <propertyName>chart</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>guestbook</value>
            </property>
            <property>
              <propertyName>releaseName</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>my-guestbook</value>
            </property>
            <property>
              <propertyName>values</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value># -- Override the name of the chart.&#10;nameOverride: ""&#10;# -- Override the fullname of the chart.&#10;fullnameOverride: ""&#10;&#10;# -- Replica count.&#10;replicaCount: 1&#10;&#10;image:&#10;  # -- Image repository.&#10;  repository: gcr.io/google-samples/gb-frontend&#10;  # -- Image pull policy.&#10;  pullPolicy: IfNotPresent&#10;  # -- Image tag.&#10;  tag: v5&#10;&#10;# -- Image pull secrets.&#10;imagePullSecrets: []&#10;&#10;serviceAccount:&#10;  # -- Specifies whether a service account should be created.&#10;  create: true&#10;  # -- Annotations to add to the service account.&#10;  annotations: {}&#10;  # If not set and create is true, a name is generated using the fullname template&#10;  # -- The name of the service account to use.&#10;  name: ""&#10;&#10;# -- Annotations to add to the pod.&#10;podAnnotations: {}&#10;&#10;# -- Security context for the pod.&#10;podSecurityContext: {}&#10;  # fsGroup: 2000&#10;&#10;# -- Security context for the container.&#10;securityContext: {}&#10;  # capabilities:&#10;  #   drop:&#10;  #   - ALL&#10;  # readOnlyRootFilesystem: true&#10;  # runAsNonRoot: true&#10;  # runAsUser: 1000&#10;&#10;&#10;service:&#10;  # -- Service type.&#10;  type: ClusterIP&#10;  # -- Service port.&#10;  port: 80&#10;&#10;# -- Resource requests and limits.&#10;resources: {}&#10;  # We usually recommend not to specify default resources and to leave this as a conscious&#10;  # choice for the user. This also increases chances charts run on environments with little&#10;  # resources, such as Minikube. If you do want to specify resources, uncomment the following&#10;  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.&#10;  # limits:&#10;  #   cpu: 100m&#10;  #   memory: 128Mi&#10;  # requests:&#10;  #   cpu: 100m&#10;  #   memory: 128Mi&#10;&#10;autoscaling:&#10;  # -- If true, create a HPA for the deployment.&#10;  enabled: false&#10;  # -- Minimum number of pod replicas.&#10;  minReplicas: 1&#10;  # -- Maximum number of pod replicas.&#10;  maxReplicas: 10&#10;  # -- Target CPU utilisation for the pod.&#10;  targetCPUUtilizationPercentage: 50&#10;  # -- Target memory utilisation for the pod.&#10;  targetMemoryUtilizationPercentage: 50&#10;&#10;# -- Node labels for pod assignment.&#10;nodeSelector: {}&#10;&#10;# -- Tolerations for pod assignment.&#10;tolerations: []&#10;&#10;# -- Affinity for pod assignment.&#10;affinity: {}&#10;&#10;redis:&#10;  architecture: standalone&#10;  enabled: true&#10;  auth:&#10;    enabled: false&#10;  master:&#10;    persistence:&#10;      enabled: true&#10;  commonConfiguration: |- &#10;    appendonly no&#10;&#10;consul:&#10;  enabled: false&#10;&#10;imagenew:&#10;  # -- Image repository.&#10;  repository: harbor.idtplateer.com/guestbook/gb-frontend&#10;  # -- Image pull policy.&#10;  pullPolicy: IfNotPresent&#10;  # -- Image tag.&#10;  tag: latest&#10;&#10;&#10;ingress:&#10;  enabled: true&#10;  ingressClassName: 'guestbook'&#10;  annotations:&#10;    alb.ingress.kubernetes.io/load-balancer-name: 'guestbook'&#10;    alb.ingress.kubernetes.io/scheme: 'internet-facing'&#10;    alb.ingress.kubernetes.io/target-type: ip&#10;    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80,"HTTPS":443}]'&#10;    alb.ingress.kubernetes.io/certificate-arn: 'arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4'&#10;    alb.ingress.kubernetes.io/ssl-policy: 'ELBSecurityPolicy-TLS-1-2-Ext-2018-06'&#10;    alb.ingress.kubernetes.io/actions.ssl-redirect: '443'&#10;    external-dns.alpha.kubernetes.io/hostname: 'devgb.idtplateer.com'&#10;  hosts:&#10;    - host: 'devgb.idtplateer.com'&#10;      paths:&#10;        - path: "/"&#10;          pathType: Prefix&#10;  tls:&#10;    - hosts:&#10;      - 'devgb.idtplateer.com'</value>
            </property>
            <property>
              <propertyName>version</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>0.1.0</value>
            </property>
          </deployParameters>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
          </propertySheet>
          <rollbackParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>rollbackEnabled</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>true</value>
            </property>
            <property>
              <propertyName>waitTimeout</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>300</value>
            </property>
          </rollbackParameters>
        </microserviceDeploymentDetail>
      </deploymentHistoryItem>
      <deploymentHistoryItem>
        <deploymentHistoryItemName>81bb4190-b5c9-11ed-8a1d-024be617296e</deploymentHistoryItemName>
        <completionTime>1677411258794</completionTime>
        <deployedEntityName>Guestbook</deployedEntityName>
        <deployedEntityType>application</deployedEntityType>
        <processName>Deploy Application</processName>
        <releaseName>Guestbook</releaseName>
        <runTime>51643</runTime>
        <seeded>0</seeded>
        <smartDeploy>0</smartDeploy>
        <stageName>QA</stageName>
        <status>success</status>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>ec_Guestbook-run</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>1</value>
          </property>
        </propertySheet>
        <deploymentDetailsItem>
          <deploymentDetailsItemName>9e6cfccd-b5c9-11ed-8868-024be617296e</deploymentDetailsItemName>
          <actualArtifactVersion>v5</actualArtifactVersion>
          <artifactName>guestbook</artifactName>
          <definedArtifactVersion>v5</definedArtifactVersion>
          <microserviceName>Guestbook QA</microserviceName>
          <partial>0</partial>
          <processName>Deploy Application</processName>
          <status>success</status>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
          </propertySheet>
        </deploymentDetailsItem>
        <deploymentDetailsItem>
          <deploymentDetailsItemName>9e7f7394-b5c9-11ed-90e0-024be617296e</deploymentDetailsItemName>
          <actualArtifactVersion>7.0.8-debian-11-r0</actualArtifactVersion>
          <artifactName>redis</artifactName>
          <definedArtifactVersion>7.0.8-debian-11-r0</definedArtifactVersion>
          <microserviceName>Guestbook QA</microserviceName>
          <partial>0</partial>
          <processName>Deploy Application</processName>
          <status>success</status>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
          </propertySheet>
        </deploymentDetailsItem>
        <microserviceDeploymentDetail>
          <microserviceDeploymentDetailName>9e6c3969-b5c9-11ed-8868-024be617296e</microserviceDeploymentDetailName>
          <microserviceDefinitionType>helm</microserviceDefinitionType>
          <microserviceDeploymentData>{&#10;   "app_version" : "5.0.0",&#10;   "chart" : "guestbook-0.1.0",&#10;   "chart_name" : "guestbook",&#10;   "chart_version" : "0.1.0",&#10;   "manifests" : [&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/serviceaccount.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nautomountServiceAccountToken: true\nmetadata:\n  name: my-guestbook-redis\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "automountServiceAccountToken" : "true",&#10;            "kind" : "ServiceAccount",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/serviceaccount.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: my-guestbook\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "ServiceAccount",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-redis-configuration\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\ndata:\n  redis.conf: |-\n    # User-supplied common configuration:\n    appendonly no\n    # End of common configuration\n  master.conf: |-\n    dir /data\n    # User-supplied master configuration:\n    rename-command FLUSHDB \"\"\n    rename-command FLUSHALL \"\"\n    # End of master configuration\n  replica.conf: |-\n    dir /data\n    # User-supplied replica configuration:\n    rename-command FLUSHDB \"\"\n    rename-command FLUSHALL \"\"\n    # End of replica configuration\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "master.conf" : "dir /data\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"",&#10;               "redis.conf" : "appendonly no",&#10;               "replica.conf" : "dir /data\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\""&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-configuration",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/health-configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/health-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-redis-health\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\ndata:\n  ping_readiness_local.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h localhost \\\n        -p $REDIS_PORT \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    if [ \"$response\" != \"PONG\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_liveness_local.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h localhost \\\n        -p $REDIS_PORT \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\n    if [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ] &amp;&amp; [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_readiness_master.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h $REDIS_MASTER_HOST \\\n        -p $REDIS_MASTER_PORT_NUMBER \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    if [ \"$response\" != \"PONG\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_liveness_master.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h $REDIS_MASTER_HOST \\\n        -p $REDIS_MASTER_PORT_NUMBER \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\n    if [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_readiness_local_and_master.sh: |-\n    script_dir=\"$(dirname \"$0\")\"\n    exit_status=0\n    \"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n    \"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\n    exit $exit_status\n  ping_liveness_local_and_master.sh: |-\n    script_dir=\"$(dirname \"$0\")\"\n    exit_status=0\n    \"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n    \"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\n    exit $exit_status\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "ping_liveness_local.sh" : "[[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ] &amp;&amp; [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n  echo \"$response\"\n  exit 1\nfi",&#10;               "ping_liveness_local_and_master.sh" : "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status",&#10;               "ping_liveness_master.sh" : "[[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ]; then\n  echo \"$response\"\n  exit 1\nfi",&#10;               "ping_readiness_local.sh" : "[[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",&#10;               "ping_readiness_local_and_master.sh" : "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",&#10;               "ping_readiness_master.sh" : "[[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi"&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-health",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/scripts-configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/scripts-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-redis-scripts\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\ndata:\n  start-master.sh: |\n    #!/bin/bash\n\n    [[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then\n        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\n    fi\n    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\n        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\n    fi\n    ARGS=(\"--port\" \"${REDIS_PORT}\")\n    ARGS+=(\"--protected-mode\" \"no\")\n    ARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\n    ARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\n    exec redis-server \"${ARGS[@]}\"\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "start-master.sh" : "[[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\nif [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--protected-mode\" \"no\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\nexec redis-server \"${ARGS[@]}\"\n"&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-scripts",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-backup-configmap\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\ndata:\n  backup.sh: |\n    #!/bin/bash\n    cd /data\n    redis-cli -h  my-guestbook-redis-master save\n    mkdir -p /data/backup\n    mv /data/dump.rdb /data/backup\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "backup.sh" : "cd /data\nredis-cli -h  my-guestbook-redis-master save\nmkdir -p /data/backup\nmv /data/dump.rdb /data/backup\n"&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook-backup-configmap"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/headless-svc.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/headless-svc.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-guestbook-redis-headless\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n  annotations:\n    \nspec:\n  type: ClusterIP\n  clusterIP: None\n  ports:\n    - name: tcp-redis\n      port: 6379\n      targetPort: redis\n  selector:\n    app.kubernetes.io/name: redis\n    app.kubernetes.io/instance: my-guestbook\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "Service",&#10;            "metadata" : {&#10;               "annotations" : null,&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-headless",&#10;               "namespace" : "qa"&#10;            },&#10;            "spec" : {&#10;               "clusterIP" : "None",&#10;               "ports" : [&#10;                  {&#10;                     "name" : "tcp-redis",&#10;                     "port" : "6379",&#10;                     "targetPort" : "redis"&#10;                  }&#10;               ],&#10;               "selector" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/name" : "redis"&#10;               },&#10;               "type" : "ClusterIP"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/master/service.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/master/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-guestbook-redis-master\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: master\nspec:\n  type: ClusterIP\n  internalTrafficPolicy: Cluster\n  sessionAffinity: None\n  ports:\n    - name: tcp-redis\n      port: 6379\n      targetPort: redis\n      nodePort: null\n  selector:\n    app.kubernetes.io/name: redis\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/component: master\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "Service",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/component" : "master",&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-master",&#10;               "namespace" : "qa"&#10;            },&#10;            "spec" : {&#10;               "internalTrafficPolicy" : "Cluster",&#10;               "ports" : [&#10;                  {&#10;                     "name" : "tcp-redis",&#10;                     "nodePort" : "null",&#10;                     "port" : "6379",&#10;                     "targetPort" : "redis"&#10;                  }&#10;               ],&#10;               "selector" : {&#10;                  "app.kubernetes.io/component" : "master",&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/name" : "redis"&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "type" : "ClusterIP"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/service.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-guestbook\n  labels:\n    \n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      targetPort: http\n      protocol: TCP\n      name: http\n  selector:\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "Service",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook"&#10;            },&#10;            "spec" : {&#10;               "ports" : [&#10;                  {&#10;                     "name" : "http",&#10;                     "port" : "80",&#10;                     "protocol" : "TCP",&#10;                     "targetPort" : "http"&#10;                  }&#10;               ],&#10;               "selector" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/name" : "guestbook"&#10;               },&#10;               "type" : "ClusterIP"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/deployment.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-guestbook-v1\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: guestbook\n      app.kubernetes.io/instance: my-guestbook\n  template:\n    metadata:\n      annotations:      \n      labels:\n        app.kubernetes.io/name: guestbook\n        app.kubernetes.io/instance: my-guestbook\n    spec:\n      serviceAccountName: my-guestbook\n      securityContext:\n        {}\n      containers:\n        - name: guestbook\n          securityContext:\n            {}\n          image: \"gcr.io/google-samples/gb-frontend:v5\"\n          imagePullPolicy: IfNotPresent\n          ports:\n            - name: http\n              containerPort: 80\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              path: /\n              port: http\n          readinessProbe:\n            httpGet:\n              path: /\n              port: http\n          resources:\n            {}\n          env:\n            - name: GET_HOSTS_FROM\n              value: env\n            - name: REDIS_LEADER_SERVICE_HOST\n              value: my-guestbook-redis-master\n            - name: REDIS_FOLLOWER_SERVICE_HOST\n              value: my-guestbook-redis-master\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "apps/v1",&#10;            "kind" : "Deployment",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook-v1"&#10;            },&#10;            "spec" : {&#10;               "replicas" : 1,&#10;               "selector" : {&#10;                  "matchLabels" : {&#10;                     "app.kubernetes.io/instance" : "my-guestbook",&#10;                     "app.kubernetes.io/name" : "guestbook"&#10;                  }&#10;               },&#10;               "template" : {&#10;                  "metadata" : {&#10;                     "annotations" : null,&#10;                     "labels" : {&#10;                        "app.kubernetes.io/instance" : "my-guestbook",&#10;                        "app.kubernetes.io/name" : "guestbook"&#10;                     }&#10;                  },&#10;                  "spec" : {&#10;                     "containers" : [&#10;                        {&#10;                           "env" : [&#10;                              {&#10;                                 "name" : "GET_HOSTS_FROM",&#10;                                 "value" : "env"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_LEADER_SERVICE_HOST",&#10;                                 "value" : "my-guestbook-redis-master"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_FOLLOWER_SERVICE_HOST",&#10;                                 "value" : "my-guestbook-redis-master"&#10;                              }&#10;                           ],&#10;                           "image" : "gcr.io/google-samples/gb-frontend:v5",&#10;                           "imagePullPolicy" : "IfNotPresent",&#10;                           "livenessProbe" : {&#10;                              "httpGet" : {&#10;                                 "path" : "/",&#10;                                 "port" : "http"&#10;                              }&#10;                           },&#10;                           "name" : "guestbook",&#10;                           "ports" : [&#10;                              {&#10;                                 "containerPort" : 80,&#10;                                 "name" : "http",&#10;                                 "protocol" : "TCP"&#10;                              }&#10;                           ],&#10;                           "readinessProbe" : {&#10;                              "httpGet" : {&#10;                                 "path" : "/",&#10;                                 "port" : "http"&#10;                              }&#10;                           },&#10;                           "resources" : {},&#10;                           "securityContext" : {}&#10;                        }&#10;                     ],&#10;                     "securityContext" : {},&#10;                     "serviceAccountName" : "my-guestbook"&#10;                  }&#10;               }&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/master/application.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/master/application.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: my-guestbook-redis-master\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: master\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: redis\n      app.kubernetes.io/instance: my-guestbook\n      app.kubernetes.io/component: master\n  serviceName: my-guestbook-redis-headless\n  updateStrategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: redis\n        helm.sh/chart: redis-17.6.0\n        app.kubernetes.io/instance: my-guestbook\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component: master\n      annotations:\n        checksum/configmap: 9ad434eace5abfd23b91dd8f629794316b3a0cf125927115b96d8fe06bb88d96\n        checksum/health: 5b93e0375cbda529f002310484e90cbc6aacf0776a794a0a075ad9835281ad44\n        checksum/scripts: 4cb9ec8796901b2c02f22a71b2a1c17a674c8ae0ab20a642218c148a4c219240\n        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n    spec:\n      \n      securityContext:\n        fsGroup: 1001\n      serviceAccountName: my-guestbook-redis\n      affinity:\n        podAffinity:\n          \n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n            - podAffinityTerm:\n                labelSelector:\n                  matchLabels:\n                    app.kubernetes.io/name: redis\n                    app.kubernetes.io/instance: my-guestbook\n                    app.kubernetes.io/component: master\n                topologyKey: kubernetes.io/hostname\n              weight: 1\n        nodeAffinity:\n          \n      terminationGracePeriodSeconds: 30\n      containers:\n        - name: redis\n          image: docker.io/bitnami/redis:7.0.8-debian-11-r0\n          imagePullPolicy: \"IfNotPresent\"\n          securityContext:\n            runAsUser: 1001\n          command:\n            - /bin/bash\n          args:\n            - -c\n            - /opt/bitnami/scripts/start-scripts/start-master.sh\n          env:\n            - name: BITNAMI_DEBUG\n              value: \"false\"\n            - name: REDIS_REPLICATION_MODE\n              value: master\n            - name: ALLOW_EMPTY_PASSWORD\n              value: \"yes\"\n            - name: REDIS_TLS_ENABLED\n              value: \"no\"\n            - name: REDIS_PORT\n              value: \"6379\"\n          ports:\n            - name: redis\n              containerPort: 6379\n          livenessProbe:\n            initialDelaySeconds: 20\n            periodSeconds: 5\n            # One second longer than command timeout should prevent generation of zombie processes.\n            timeoutSeconds: 6\n            successThreshold: 1\n            failureThreshold: 5\n            exec:\n              command:\n                - sh\n                - -c\n                - /health/ping_liveness_local.sh 5\n          readinessProbe:\n            initialDelaySeconds: 20\n            periodSeconds: 5\n            timeoutSeconds: 2\n            successThreshold: 1\n            failureThreshold: 5\n            exec:\n              command:\n                - sh\n                - -c\n                - /health/ping_readiness_local.sh 1\n          resources:\n            limits: {}\n            requests: {}\n          volumeMounts:\n            - name: start-scripts\n              mountPath: /opt/bitnami/scripts/start-scripts\n            - name: health\n              mountPath: /health\n            - name: redis-data\n              mountPath: /data\n            - name: config\n              mountPath: /opt/bitnami/redis/mounted-etc\n            - name: redis-tmp-conf\n              mountPath: /opt/bitnami/redis/etc/\n            - name: tmp\n              mountPath: /tmp\n      volumes:\n        - name: start-scripts\n          configMap:\n            name: my-guestbook-redis-scripts\n            defaultMode: 0755\n        - name: health\n          configMap:\n            name: my-guestbook-redis-health\n            defaultMode: 0755\n        - name: config\n          configMap:\n            name: my-guestbook-redis-configuration\n        - name: redis-tmp-conf\n          emptyDir: {}\n        - name: tmp\n          emptyDir: {}\n  volumeClaimTemplates:\n    - metadata:\n        name: redis-data\n        labels:\n          app.kubernetes.io/name: redis\n          app.kubernetes.io/instance: my-guestbook\n          app.kubernetes.io/component: master\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        resources:\n          requests:\n            storage: \"8Gi\"\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "apps/v1",&#10;            "kind" : "StatefulSet",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/component" : "master",&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-master",&#10;               "namespace" : "qa"&#10;            },&#10;            "spec" : {&#10;               "replicas" : "1",&#10;               "selector" : {&#10;                  "matchLabels" : {&#10;                     "app.kubernetes.io/component" : "master",&#10;                     "app.kubernetes.io/instance" : "my-guestbook",&#10;                     "app.kubernetes.io/name" : "redis"&#10;                  }&#10;               },&#10;               "serviceName" : "my-guestbook-redis-headless",&#10;               "template" : {&#10;                  "metadata" : {&#10;                     "annotations" : {&#10;                        "checksum/configmap" : "9ad434eace5abfd23b91dd8f629794316b3a0cf125927115b96d8fe06bb88d96",&#10;                        "checksum/health" : "5b93e0375cbda529f002310484e90cbc6aacf0776a794a0a075ad9835281ad44",&#10;                        "checksum/scripts" : "4cb9ec8796901b2c02f22a71b2a1c17a674c8ae0ab20a642218c148a4c219240",&#10;                        "checksum/secret" : "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"&#10;                     },&#10;                     "labels" : {&#10;                        "app.kubernetes.io/component" : "master",&#10;                        "app.kubernetes.io/instance" : "my-guestbook",&#10;                        "app.kubernetes.io/managed-by" : "Helm",&#10;                        "app.kubernetes.io/name" : "redis",&#10;                        "helm.sh/chart" : "redis-17.6.0"&#10;                     }&#10;                  },&#10;                  "spec" : {&#10;                     "affinity" : {&#10;                        "nodeAffinity" : null,&#10;                        "podAffinity" : null,&#10;                        "podAntiAffinity" : {&#10;                           "preferredDuringSchedulingIgnoredDuringExecution" : [&#10;                              {&#10;                                 "podAffinityTerm" : {&#10;                                    "labelSelector" : {&#10;                                       "matchLabels" : {&#10;                                          "app.kubernetes.io/component" : "master",&#10;                                          "app.kubernetes.io/instance" : "my-guestbook",&#10;                                          "app.kubernetes.io/name" : "redis"&#10;                                       }&#10;                                    },&#10;                                    "topologyKey" : "kubernetes.io/hostname"&#10;                                 },&#10;                                 "weight" : "1"&#10;                              }&#10;                           ]&#10;                        }&#10;                     },&#10;                     "containers" : [&#10;                        {&#10;                           "args" : [&#10;                              "-c",&#10;                              "/opt/bitnami/scripts/start-scripts/start-master.sh"&#10;                           ],&#10;                           "command" : [&#10;                              "/bin/bash"&#10;                           ],&#10;                           "env" : [&#10;                              {&#10;                                 "name" : "BITNAMI_DEBUG",&#10;                                 "value" : "false"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_REPLICATION_MODE",&#10;                                 "value" : "master"&#10;                              },&#10;                              {&#10;                                 "name" : "ALLOW_EMPTY_PASSWORD",&#10;                                 "value" : "yes"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_TLS_ENABLED",&#10;                                 "value" : "no"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_PORT",&#10;                                 "value" : "6379"&#10;                              }&#10;                           ],&#10;                           "image" : "docker.io/bitnami/redis:7.0.8-debian-11-r0",&#10;                           "imagePullPolicy" : "IfNotPresent",&#10;                           "livenessProbe" : {&#10;                              "exec" : {&#10;                                 "command" : [&#10;                                    "sh",&#10;                                    "-c",&#10;                                    "/health/ping_liveness_local.sh 5"&#10;                                 ]&#10;                              },&#10;                              "failureThreshold" : "5",&#10;                              "initialDelaySeconds" : "20",&#10;                              "periodSeconds" : "5",&#10;                              "successThreshold" : "1",&#10;                              "timeoutSeconds" : "6"&#10;                           },&#10;                           "name" : "redis",&#10;                           "ports" : [&#10;                              {&#10;                                 "containerPort" : "6379",&#10;                                 "name" : "redis"&#10;                              }&#10;                           ],&#10;                           "readinessProbe" : {&#10;                              "exec" : {&#10;                                 "command" : [&#10;                                    "sh",&#10;                                    "-c",&#10;                                    "/health/ping_readiness_local.sh 1"&#10;                                 ]&#10;                              },&#10;                              "failureThreshold" : "5",&#10;                              "initialDelaySeconds" : "20",&#10;                              "periodSeconds" : "5",&#10;                              "successThreshold" : "1",&#10;                              "timeoutSeconds" : "2"&#10;                           },&#10;                           "resources" : {&#10;                              "limits" : {},&#10;                              "requests" : {}&#10;                           },&#10;                           "securityContext" : {&#10;                              "runAsUser" : "1001"&#10;                           },&#10;                           "volumeMounts" : [&#10;                              {&#10;                                 "mountPath" : "/opt/bitnami/scripts/start-scripts",&#10;                                 "name" : "start-scripts"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/health",&#10;                                 "name" : "health"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/data",&#10;                                 "name" : "redis-data"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/opt/bitnami/redis/mounted-etc",&#10;                                 "name" : "config"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/opt/bitnami/redis/etc/",&#10;                                 "name" : "redis-tmp-conf"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/tmp",&#10;                                 "name" : "tmp"&#10;                              }&#10;                           ]&#10;                        }&#10;                     ],&#10;                     "securityContext" : {&#10;                        "fsGroup" : "1001"&#10;                     },&#10;                     "serviceAccountName" : "my-guestbook-redis",&#10;                     "terminationGracePeriodSeconds" : "30",&#10;                     "volumes" : [&#10;                        {&#10;                           "configMap" : {&#10;                              "defaultMode" : "0755",&#10;                              "name" : "my-guestbook-redis-scripts"&#10;                           },&#10;                           "name" : "start-scripts"&#10;                        },&#10;                        {&#10;                           "configMap" : {&#10;                              "defaultMode" : "0755",&#10;                              "name" : "my-guestbook-redis-health"&#10;                           },&#10;                           "name" : "health"&#10;                        },&#10;                        {&#10;                           "configMap" : {&#10;                              "name" : "my-guestbook-redis-configuration"&#10;                           },&#10;                           "name" : "config"&#10;                        },&#10;                        {&#10;                           "emptyDir" : {},&#10;                           "name" : "redis-tmp-conf"&#10;                        },&#10;                        {&#10;                           "emptyDir" : {},&#10;                           "name" : "tmp"&#10;                        }&#10;                     ]&#10;                  }&#10;               },&#10;               "updateStrategy" : {&#10;                  "type" : "RollingUpdate"&#10;               },&#10;               "volumeClaimTemplates" : [&#10;                  {&#10;                     "metadata" : {&#10;                        "labels" : {&#10;                           "app.kubernetes.io/component" : "master",&#10;                           "app.kubernetes.io/instance" : "my-guestbook",&#10;                           "app.kubernetes.io/name" : "redis"&#10;                        },&#10;                        "name" : "redis-data"&#10;                     },&#10;                     "spec" : {&#10;                        "accessModes" : [&#10;                           "ReadWriteOnce"&#10;                        ],&#10;                        "resources" : {&#10;                           "requests" : {&#10;                              "storage" : "8Gi"&#10;                           }&#10;                        }&#10;                     }&#10;                  }&#10;               ]&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/ingressclass.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/ingressclass.yaml\napiVersion: networking.k8s.io/v1\nkind: IngressClass\nmetadata:\n  name: guestbook\nspec:\n  controller: \"ingress.k8s.aws/alb\"\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "networking.k8s.io/v1",&#10;            "kind" : "IngressClass",&#10;            "metadata" : {&#10;               "name" : "guestbook"&#10;            },&#10;            "spec" : {&#10;               "controller" : "ingress.k8s.aws/alb"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/ingress.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-guestbook\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\n  annotations:\n    alb.ingress.kubernetes.io/actions.ssl-redirect: \"443\"\n    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4\n    alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\":80,\"HTTPS\":443}]'\n    alb.ingress.kubernetes.io/load-balancer-name: guestbook\n    alb.ingress.kubernetes.io/scheme: internet-facing\n    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06\n    alb.ingress.kubernetes.io/target-type: ip\n    external-dns.alpha.kubernetes.io/hostname: devgb.idtplateer.com\nspec:\n  ingressClassName: guestbook\n  tls:\n    - hosts:\n        - \"devgb.idtplateer.com\"\n      secretName: \n  rules:\n    - host: \"devgb.idtplateer.com\"\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: my-guestbook\n                port:\n                  number: 80\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "networking.k8s.io/v1",&#10;            "kind" : "Ingress",&#10;            "metadata" : {&#10;               "annotations" : {&#10;                  "alb.ingress.kubernetes.io/actions.ssl-redirect" : "443",&#10;                  "alb.ingress.kubernetes.io/certificate-arn" : "arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4",&#10;                  "alb.ingress.kubernetes.io/listen-ports" : "[{\"HTTP\":80,\"HTTPS\":443}]",&#10;                  "alb.ingress.kubernetes.io/load-balancer-name" : "guestbook",&#10;                  "alb.ingress.kubernetes.io/scheme" : "internet-facing",&#10;                  "alb.ingress.kubernetes.io/ssl-policy" : "ELBSecurityPolicy-TLS-1-2-Ext-2018-06",&#10;                  "alb.ingress.kubernetes.io/target-type" : "ip",&#10;                  "external-dns.alpha.kubernetes.io/hostname" : "devgb.idtplateer.com"&#10;               },&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook"&#10;            },&#10;            "spec" : {&#10;               "ingressClassName" : "guestbook",&#10;               "rules" : [&#10;                  {&#10;                     "host" : "devgb.idtplateer.com",&#10;                     "http" : {&#10;                        "paths" : [&#10;                           {&#10;                              "backend" : {&#10;                                 "service" : {&#10;                                    "name" : "my-guestbook",&#10;                                    "port" : {&#10;                                       "number" : "80"&#10;                                    }&#10;                                 }&#10;                              },&#10;                              "path" : "/",&#10;                              "pathType" : "Prefix"&#10;                           }&#10;                        ]&#10;                     }&#10;                  }&#10;               ],&#10;               "tls" : [&#10;                  {&#10;                     "hosts" : [&#10;                        "devgb.idtplateer.com"&#10;                     ],&#10;                     "secretName" : null&#10;                  }&#10;               ]&#10;            }&#10;         }&#10;      }&#10;   ],&#10;   "name" : "my-guestbook",&#10;   "namespace" : "qa",&#10;   "notes" : "NOTES:\n1. Get the application URL by running these commands:\n  https://devgb.idtplateer.com/\n\n",&#10;   "revision" : "1",&#10;   "status" : "deployed",&#10;   "updated" : "2023-02-26 20:34:25.476583347 +0900 KST",&#10;   "values" : {&#10;      "affinity" : {},&#10;      "autoscaling" : {&#10;         "enabled" : false,&#10;         "maxReplicas" : 10,&#10;         "minReplicas" : 1,&#10;         "targetCPUUtilizationPercentage" : 50,&#10;         "targetMemoryUtilizationPercentage" : 50&#10;      },&#10;      "consul" : {&#10;         "enabled" : false&#10;      },&#10;      "fullnameOverride" : "",&#10;      "image" : {&#10;         "pullPolicy" : "IfNotPresent",&#10;         "repository" : "gcr.io/google-samples/gb-frontend",&#10;         "tag" : "v5"&#10;      },&#10;      "imagePullSecrets" : [],&#10;      "imagenew" : {&#10;         "pullPolicy" : "IfNotPresent",&#10;         "repository" : "harbor.idtplateer.com/guestbook/gb-frontend",&#10;         "tag" : "latest"&#10;      },&#10;      "ingress" : {&#10;         "annotations" : {&#10;            "alb.ingress.kubernetes.io/actions.ssl-redirect" : "443",&#10;            "alb.ingress.kubernetes.io/certificate-arn" : "arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4",&#10;            "alb.ingress.kubernetes.io/listen-ports" : "[{\"HTTP\":80,\"HTTPS\":443}]",&#10;            "alb.ingress.kubernetes.io/load-balancer-name" : "guestbook",&#10;            "alb.ingress.kubernetes.io/scheme" : "internet-facing",&#10;            "alb.ingress.kubernetes.io/ssl-policy" : "ELBSecurityPolicy-TLS-1-2-Ext-2018-06",&#10;            "alb.ingress.kubernetes.io/target-type" : "ip",&#10;            "external-dns.alpha.kubernetes.io/hostname" : "devgb.idtplateer.com"&#10;         },&#10;         "enabled" : true,&#10;         "hosts" : [&#10;            {&#10;               "host" : "devgb.idtplateer.com",&#10;               "paths" : [&#10;                  {&#10;                     "path" : "/",&#10;                     "pathType" : "Prefix"&#10;                  }&#10;               ]&#10;            }&#10;         ],&#10;         "ingressClassName" : "guestbook",&#10;         "tls" : [&#10;            {&#10;               "hosts" : [&#10;                  "devgb.idtplateer.com"&#10;               ]&#10;            }&#10;         ]&#10;      },&#10;      "nameOverride" : "",&#10;      "nodeSelector" : {},&#10;      "podAnnotations" : {},&#10;      "podSecurityContext" : {},&#10;      "redis" : {&#10;         "architecture" : "standalone",&#10;         "auth" : {&#10;            "enabled" : false,&#10;            "existingSecret" : "",&#10;            "existingSecretPasswordKey" : "",&#10;            "password" : "",&#10;            "sentinel" : true,&#10;            "usePasswordFiles" : false&#10;         },&#10;         "clusterDomain" : "cluster.local",&#10;         "common" : {&#10;            "exampleValue" : "common-chart",&#10;            "global" : {&#10;               "imagePullSecrets" : [],&#10;               "imageRegistry" : "",&#10;               "redis" : {&#10;                  "password" : ""&#10;               },&#10;               "storageClass" : ""&#10;            }&#10;         },&#10;         "commonAnnotations" : {},&#10;         "commonConfiguration" : "appendonly no",&#10;         "commonLabels" : {},&#10;         "consul" : {&#10;            "enabled" : false&#10;         },&#10;         "diagnosticMode" : {&#10;            "args" : [&#10;               "infinity"&#10;            ],&#10;            "command" : [&#10;               "sleep"&#10;            ],&#10;            "enabled" : false&#10;         },&#10;         "enabled" : true,&#10;         "existingConfigmap" : "",&#10;         "extraDeploy" : [],&#10;         "fullnameOverride" : "",&#10;         "global" : {&#10;            "imagePullSecrets" : [],&#10;            "imageRegistry" : "",&#10;            "redis" : {&#10;               "password" : ""&#10;            },&#10;            "storageClass" : ""&#10;         },&#10;         "image" : {&#10;            "debug" : false,&#10;            "digest" : "",&#10;            "pullPolicy" : "IfNotPresent",&#10;            "pullSecrets" : [],&#10;            "registry" : "docker.io",&#10;            "repository" : "bitnami/redis",&#10;            "tag" : "7.0.8-debian-11-r0"&#10;         },&#10;         "kubeVersion" : "",&#10;         "master" : {&#10;            "affinity" : {},&#10;            "args" : [],&#10;            "command" : [],&#10;            "configuration" : "",&#10;            "containerPorts" : {&#10;               "redis" : 6379&#10;            },&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "count" : 1,&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "disableCommands" : [&#10;               "FLUSHDB",&#10;               "FLUSHALL"&#10;            ],&#10;            "dnsConfig" : {},&#10;            "dnsPolicy" : "",&#10;            "extraEnvVars" : [],&#10;            "extraEnvVarsCM" : "",&#10;            "extraEnvVarsSecret" : "",&#10;            "extraFlags" : [],&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "hostAliases" : [],&#10;            "initContainers" : [],&#10;            "kind" : "StatefulSet",&#10;            "lifecycleHooks" : {},&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "minReadySeconds" : 0,&#10;            "nodeAffinityPreset" : {&#10;               "key" : "",&#10;               "type" : "",&#10;               "values" : []&#10;            },&#10;            "nodeSelector" : {},&#10;            "persistence" : {&#10;               "accessModes" : [&#10;                  "ReadWriteOnce"&#10;               ],&#10;               "annotations" : {},&#10;               "dataSource" : {},&#10;               "enabled" : true,&#10;               "existingClaim" : "",&#10;               "medium" : "",&#10;               "path" : "/data",&#10;               "selector" : {},&#10;               "size" : "8Gi",&#10;               "sizeLimit" : "",&#10;               "storageClass" : "",&#10;               "subPath" : "",&#10;               "subPathExpr" : ""&#10;            },&#10;            "podAffinityPreset" : "",&#10;            "podAnnotations" : {},&#10;            "podAntiAffinityPreset" : "soft",&#10;            "podLabels" : {},&#10;            "podSecurityContext" : {&#10;               "enabled" : true,&#10;               "fsGroup" : 1001&#10;            },&#10;            "preExecCmds" : [],&#10;            "priorityClassName" : "",&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "schedulerName" : "",&#10;            "service" : {&#10;               "annotations" : {},&#10;               "clusterIP" : "",&#10;               "externalIPs" : [],&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "internalTrafficPolicy" : "Cluster",&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "nodePorts" : {&#10;                  "redis" : ""&#10;               },&#10;               "ports" : {&#10;                  "redis" : 6379&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "sessionAffinityConfig" : {},&#10;               "type" : "ClusterIP"&#10;            },&#10;            "serviceAccount" : {&#10;               "annotations" : {},&#10;               "automountServiceAccountToken" : true,&#10;               "create" : false,&#10;               "name" : ""&#10;            },&#10;            "shareProcessNamespace" : false,&#10;            "sidecars" : [],&#10;            "startupProbe" : {&#10;               "enabled" : false,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "terminationGracePeriodSeconds" : 30,&#10;            "tolerations" : [],&#10;            "topologySpreadConstraints" : [],&#10;            "updateStrategy" : {&#10;               "type" : "RollingUpdate"&#10;            }&#10;         },&#10;         "metrics" : {&#10;            "command" : [],&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "enabled" : false,&#10;            "extraArgs" : {},&#10;            "extraEnvVars" : [],&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "image" : {&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/redis-exporter",&#10;               "tag" : "1.45.0-debian-11-r26"&#10;            },&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "podAnnotations" : {&#10;               "prometheus.io/port" : "9121",&#10;               "prometheus.io/scrape" : "true"&#10;            },&#10;            "podLabels" : {},&#10;            "prometheusRule" : {&#10;               "additionalLabels" : {},&#10;               "enabled" : false,&#10;               "namespace" : "",&#10;               "rules" : []&#10;            },&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 3,&#10;               "initialDelaySeconds" : 5,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "redisTargetHost" : "localhost",&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "service" : {&#10;               "annotations" : {},&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "port" : 9121,&#10;               "type" : "ClusterIP"&#10;            },&#10;            "serviceMonitor" : {&#10;               "additionalLabels" : {},&#10;               "enabled" : false,&#10;               "honorLabels" : false,&#10;               "interval" : "30s",&#10;               "metricRelabelings" : [],&#10;               "namespace" : "",&#10;               "podTargetLabels" : [],&#10;               "relabellings" : [],&#10;               "scrapeTimeout" : ""&#10;            },&#10;            "startupProbe" : {&#10;               "enabled" : false,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            }&#10;         },&#10;         "nameOverride" : "",&#10;         "networkPolicy" : {&#10;            "allowExternal" : true,&#10;            "enabled" : false,&#10;            "extraEgress" : [],&#10;            "extraIngress" : [],&#10;            "ingressNSMatchLabels" : {},&#10;            "ingressNSPodMatchLabels" : {}&#10;         },&#10;         "pdb" : {&#10;            "create" : false,&#10;            "maxUnavailable" : "",&#10;            "minAvailable" : 1&#10;         },&#10;         "podSecurityPolicy" : {&#10;            "create" : false,&#10;            "enabled" : false&#10;         },&#10;         "rbac" : {&#10;            "create" : false,&#10;            "rules" : []&#10;         },&#10;         "replica" : {&#10;            "affinity" : {},&#10;            "args" : [],&#10;            "autoscaling" : {&#10;               "enabled" : false,&#10;               "maxReplicas" : 11,&#10;               "minReplicas" : 1,&#10;               "targetCPU" : "",&#10;               "targetMemory" : ""&#10;            },&#10;            "command" : [],&#10;            "configuration" : "",&#10;            "containerPorts" : {&#10;               "redis" : 6379&#10;            },&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "disableCommands" : [&#10;               "FLUSHDB",&#10;               "FLUSHALL"&#10;            ],&#10;            "dnsConfig" : {},&#10;            "dnsPolicy" : "",&#10;            "externalMaster" : {&#10;               "enabled" : false,&#10;               "host" : "",&#10;               "port" : 6379&#10;            },&#10;            "extraEnvVars" : [],&#10;            "extraEnvVarsCM" : "",&#10;            "extraEnvVarsSecret" : "",&#10;            "extraFlags" : [],&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "hostAliases" : [],&#10;            "initContainers" : [],&#10;            "lifecycleHooks" : {},&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "minReadySeconds" : 0,&#10;            "nodeAffinityPreset" : {&#10;               "key" : "",&#10;               "type" : "",&#10;               "values" : []&#10;            },&#10;            "nodeSelector" : {},&#10;            "persistence" : {&#10;               "accessModes" : [&#10;                  "ReadWriteOnce"&#10;               ],&#10;               "annotations" : {},&#10;               "dataSource" : {},&#10;               "enabled" : true,&#10;               "existingClaim" : "",&#10;               "medium" : "",&#10;               "path" : "/data",&#10;               "selector" : {},&#10;               "size" : "8Gi",&#10;               "sizeLimit" : "",&#10;               "storageClass" : "",&#10;               "subPath" : "",&#10;               "subPathExpr" : ""&#10;            },&#10;            "podAffinityPreset" : "",&#10;            "podAnnotations" : {},&#10;            "podAntiAffinityPreset" : "soft",&#10;            "podLabels" : {},&#10;            "podManagementPolicy" : "",&#10;            "podSecurityContext" : {&#10;               "enabled" : true,&#10;               "fsGroup" : 1001&#10;            },&#10;            "preExecCmds" : [],&#10;            "priorityClassName" : "",&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "replicaCount" : 3,&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "schedulerName" : "",&#10;            "service" : {&#10;               "annotations" : {},&#10;               "clusterIP" : "",&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "internalTrafficPolicy" : "Cluster",&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "nodePorts" : {&#10;                  "redis" : ""&#10;               },&#10;               "ports" : {&#10;                  "redis" : 6379&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "sessionAffinityConfig" : {},&#10;               "type" : "ClusterIP"&#10;            },&#10;            "serviceAccount" : {&#10;               "annotations" : {},&#10;               "automountServiceAccountToken" : true,&#10;               "create" : false,&#10;               "name" : ""&#10;            },&#10;            "shareProcessNamespace" : false,&#10;            "sidecars" : [],&#10;            "startupProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 22,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "terminationGracePeriodSeconds" : 30,&#10;            "tolerations" : [],&#10;            "topologySpreadConstraints" : [],&#10;            "updateStrategy" : {&#10;               "type" : "RollingUpdate"&#10;            }&#10;         },&#10;         "secretAnnotations" : {},&#10;         "sentinel" : {&#10;            "args" : [],&#10;            "automateClusterRecovery" : false,&#10;            "command" : [],&#10;            "configuration" : "",&#10;            "containerPorts" : {&#10;               "sentinel" : 26379&#10;            },&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "downAfterMilliseconds" : 60000,&#10;            "enabled" : false,&#10;            "externalMaster" : {&#10;               "enabled" : false,&#10;               "host" : "",&#10;               "port" : 6379&#10;            },&#10;            "extraEnvVars" : [],&#10;            "extraEnvVarsCM" : "",&#10;            "extraEnvVarsSecret" : "",&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "failoverTimeout" : 180000,&#10;            "getMasterTimeout" : 220,&#10;            "image" : {&#10;               "debug" : false,&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/redis-sentinel",&#10;               "tag" : "7.0.7-debian-11-r10"&#10;            },&#10;            "lifecycleHooks" : {},&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "masterSet" : "mymaster",&#10;            "parallelSyncs" : 1,&#10;            "persistence" : {&#10;               "accessModes" : [&#10;                  "ReadWriteOnce"&#10;               ],&#10;               "annotations" : {},&#10;               "dataSource" : {},&#10;               "enabled" : false,&#10;               "medium" : "",&#10;               "selector" : {},&#10;               "size" : "100Mi",&#10;               "sizeLimit" : "",&#10;               "storageClass" : ""&#10;            },&#10;            "preExecCmds" : [],&#10;            "quorum" : 2,&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "redisShutdownWaitFailover" : true,&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "service" : {&#10;               "annotations" : {},&#10;               "clusterIP" : "",&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "nodePorts" : {&#10;                  "redis" : "",&#10;                  "sentinel" : ""&#10;               },&#10;               "ports" : {&#10;                  "redis" : 6379,&#10;                  "sentinel" : 26379&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "sessionAffinityConfig" : {},&#10;               "type" : "ClusterIP"&#10;            },&#10;            "startupProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 22,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "terminationGracePeriodSeconds" : 30&#10;         },&#10;         "serviceAccount" : {&#10;            "annotations" : {},&#10;            "automountServiceAccountToken" : true,&#10;            "create" : true,&#10;            "name" : ""&#10;         },&#10;         "sysctl" : {&#10;            "command" : [],&#10;            "enabled" : false,&#10;            "image" : {&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/bitnami-shell",&#10;               "tag" : "11-debian-11-r72"&#10;            },&#10;            "mountHostSys" : false,&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            }&#10;         },&#10;         "tls" : {&#10;            "authClients" : true,&#10;            "autoGenerated" : false,&#10;            "certCAFilename" : "",&#10;            "certFilename" : "",&#10;            "certKeyFilename" : "",&#10;            "certificatesSecret" : "",&#10;            "dhParamsFilename" : "",&#10;            "enabled" : false,&#10;            "existingSecret" : ""&#10;         },&#10;         "useExternalDNS" : {&#10;            "additionalAnnotations" : {},&#10;            "annotationKey" : "external-dns.alpha.kubernetes.io/",&#10;            "enabled" : false,&#10;            "suffix" : ""&#10;         },&#10;         "volumePermissions" : {&#10;            "containerSecurityContext" : {&#10;               "runAsUser" : 0&#10;            },&#10;            "enabled" : false,&#10;            "image" : {&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/bitnami-shell",&#10;               "tag" : "11-debian-11-r72"&#10;            },&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            }&#10;         }&#10;      },&#10;      "replicaCount" : 1,&#10;      "resources" : {},&#10;      "securityContext" : {},&#10;      "service" : {&#10;         "port" : 80,&#10;         "type" : "ClusterIP"&#10;      },&#10;      "serviceAccount" : {&#10;         "annotations" : {},&#10;         "create" : true,&#10;         "name" : ""&#10;      },&#10;      "tolerations" : []&#10;   }&#10;}&#10;</microserviceDeploymentData>
          <microserviceDeploymentSummary>NAME: my-guestbook&#10;LAST DEPLOYED: Sun Feb 26 20:34:25 2023&#10;NAMESPACE: qa&#10;STATUS: deployed&#10;REVISION: 1&#10;NOTES:&#10;1. Get the application URL by running these commands:&#10;  https://devgb.idtplateer.com/&#10;</microserviceDeploymentSummary>
          <microserviceName>Guestbook QA</microserviceName>
          <status>success</status>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <definitionSourceParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>repositoryName</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>guestbook-repo</value>
            </property>
            <property>
              <propertyName>repositoryUrl</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>https://harbor.idtplateer.com/chartrepo/guestbook</value>
            </property>
            <property>
              <propertyName>repository_credential</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>/projects/Guestbook/credentials/harbor</value>
            </property>
          </definitionSourceParameters>
          <deployParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>additionalOptions</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>--create-namespace</value>
            </property>
            <property>
              <propertyName>chart</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>guestbook</value>
            </property>
            <property>
              <propertyName>releaseName</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>my-guestbook</value>
            </property>
            <property>
              <propertyName>values</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value># -- Override the name of the chart.&#10;nameOverride: ""&#10;# -- Override the fullname of the chart.&#10;fullnameOverride: ""&#10;&#10;# -- Replica count.&#10;replicaCount: 1&#10;&#10;image:&#10;  # -- Image repository.&#10;  repository: gcr.io/google-samples/gb-frontend&#10;  # -- Image pull policy.&#10;  pullPolicy: IfNotPresent&#10;  # -- Image tag.&#10;  tag: v5&#10;&#10;# -- Image pull secrets.&#10;imagePullSecrets: []&#10;&#10;serviceAccount:&#10;  # -- Specifies whether a service account should be created.&#10;  create: true&#10;  # -- Annotations to add to the service account.&#10;  annotations: {}&#10;  # If not set and create is true, a name is generated using the fullname template&#10;  # -- The name of the service account to use.&#10;  name: ""&#10;&#10;# -- Annotations to add to the pod.&#10;podAnnotations: {}&#10;&#10;# -- Security context for the pod.&#10;podSecurityContext: {}&#10;  # fsGroup: 2000&#10;&#10;# -- Security context for the container.&#10;securityContext: {}&#10;  # capabilities:&#10;  #   drop:&#10;  #   - ALL&#10;  # readOnlyRootFilesystem: true&#10;  # runAsNonRoot: true&#10;  # runAsUser: 1000&#10;&#10;&#10;service:&#10;  # -- Service type.&#10;  type: ClusterIP&#10;  # -- Service port.&#10;  port: 80&#10;&#10;# -- Resource requests and limits.&#10;resources: {}&#10;  # We usually recommend not to specify default resources and to leave this as a conscious&#10;  # choice for the user. This also increases chances charts run on environments with little&#10;  # resources, such as Minikube. If you do want to specify resources, uncomment the following&#10;  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.&#10;  # limits:&#10;  #   cpu: 100m&#10;  #   memory: 128Mi&#10;  # requests:&#10;  #   cpu: 100m&#10;  #   memory: 128Mi&#10;&#10;autoscaling:&#10;  # -- If true, create a HPA for the deployment.&#10;  enabled: false&#10;  # -- Minimum number of pod replicas.&#10;  minReplicas: 1&#10;  # -- Maximum number of pod replicas.&#10;  maxReplicas: 10&#10;  # -- Target CPU utilisation for the pod.&#10;  targetCPUUtilizationPercentage: 50&#10;  # -- Target memory utilisation for the pod.&#10;  targetMemoryUtilizationPercentage: 50&#10;&#10;# -- Node labels for pod assignment.&#10;nodeSelector: {}&#10;&#10;# -- Tolerations for pod assignment.&#10;tolerations: []&#10;&#10;# -- Affinity for pod assignment.&#10;affinity: {}&#10;&#10;redis:&#10;  architecture: standalone&#10;  enabled: true&#10;  auth:&#10;    enabled: false&#10;  master:&#10;    persistence:&#10;      enabled: true&#10;  commonConfiguration: |- &#10;    appendonly no&#10;&#10;consul:&#10;  enabled: false&#10;&#10;imagenew:&#10;  # -- Image repository.&#10;  repository: harbor.idtplateer.com/guestbook/gb-frontend&#10;  # -- Image pull policy.&#10;  pullPolicy: IfNotPresent&#10;  # -- Image tag.&#10;  tag: latest&#10;&#10;&#10;ingress:&#10;  enabled: true&#10;  ingressClassName: 'guestbook'&#10;  annotations:&#10;    alb.ingress.kubernetes.io/load-balancer-name: 'guestbook'&#10;    alb.ingress.kubernetes.io/scheme: 'internet-facing'&#10;    alb.ingress.kubernetes.io/target-type: ip&#10;    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80,"HTTPS":443}]'&#10;    alb.ingress.kubernetes.io/certificate-arn: 'arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4'&#10;    alb.ingress.kubernetes.io/ssl-policy: 'ELBSecurityPolicy-TLS-1-2-Ext-2018-06'&#10;    alb.ingress.kubernetes.io/actions.ssl-redirect: '443'&#10;    external-dns.alpha.kubernetes.io/hostname: 'devgb.idtplateer.com'&#10;  hosts:&#10;    - host: 'devgb.idtplateer.com'&#10;      paths:&#10;        - path: "/"&#10;          pathType: Prefix&#10;  tls:&#10;    - hosts:&#10;      - 'devgb.idtplateer.com'</value>
            </property>
            <property>
              <propertyName>version</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>0.1.0</value>
            </property>
          </deployParameters>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
          </propertySheet>
          <rollbackParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>rollbackEnabled</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>true</value>
            </property>
            <property>
              <propertyName>waitTimeout</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>300</value>
            </property>
          </rollbackParameters>
        </microserviceDeploymentDetail>
      </deploymentHistoryItem>
      <deploymentHistoryItem>
        <deploymentHistoryItemName>99d4c5ac-b5cb-11ed-ad44-024be617296e</deploymentHistoryItemName>
        <completionTime>1677412158220</completionTime>
        <deployedEntityName>Guestbook</deployedEntityName>
        <deployedEntityType>application</deployedEntityType>
        <processName>Deploy Application</processName>
        <runTime>17558</runTime>
        <seeded>0</seeded>
        <smartDeploy>0</smartDeploy>
        <status>success</status>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>ec_Guestbook QA-run</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>1</value>
          </property>
        </propertySheet>
        <deploymentDetailsItem>
          <deploymentDetailsItemName>a1b8e21a-b5cb-11ed-b724-024be617296e</deploymentDetailsItemName>
          <actualArtifactVersion>7.0.8-debian-11-r0</actualArtifactVersion>
          <artifactName>redis</artifactName>
          <definedArtifactVersion>7.0.8-debian-11-r0</definedArtifactVersion>
          <microserviceName>Guestbook QA</microserviceName>
          <partial>0</partial>
          <processName>Deploy Application</processName>
          <status>success</status>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
          </propertySheet>
          <environmentInventoryItem>
            <environmentInventoryItemName>c8af7bc2-b509-11ed-b724-024be617296e239a7288-b50d-11ed-8bde-024be617296e-109804342</environmentInventoryItemName>
            <artifactProviderSource>guestbook/charts/redis/templates/master/application.yaml</artifactProviderSource>
            <artifactSource>docker.io/bitnami/redis</artifactSource>
            <artifactUrl>N/A</artifactUrl>
            <clusterName>guestbook_qa</clusterName>
            <clusterNamespace>qa</clusterNamespace>
            <resourceName>local</resourceName>
            <status>success</status>
            <versionMismatch>0</versionMismatch>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <propertySheet>
              <credentialProtected>0</credentialProtected>
              <tracked>0</tracked>
              <acl>
                <inheriting>1</inheriting>
                <tracked>0</tracked>
              </acl>
            </propertySheet>
          </environmentInventoryItem>
        </deploymentDetailsItem>
        <deploymentDetailsItem>
          <deploymentDetailsItemName>a1a5cee8-b5cb-11ed-8bde-024be617296e</deploymentDetailsItemName>
          <actualArtifactVersion>v5</actualArtifactVersion>
          <artifactName>guestbook</artifactName>
          <definedArtifactVersion>v5</definedArtifactVersion>
          <microserviceName>Guestbook QA</microserviceName>
          <partial>0</partial>
          <processName>Deploy Application</processName>
          <status>success</status>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
          </propertySheet>
          <environmentInventoryItem>
            <environmentInventoryItemName>c8af7bc2-b509-11ed-b724-024be617296e239a7288-b50d-11ed-8bde-024be617296e1940842768</environmentInventoryItemName>
            <artifactProviderSource>guestbook/templates/deployment.yaml</artifactProviderSource>
            <artifactSource>gcr.io/google-samples/gb-frontend</artifactSource>
            <artifactUrl>N/A</artifactUrl>
            <clusterName>guestbook_qa</clusterName>
            <clusterNamespace>qa</clusterNamespace>
            <resourceName>local</resourceName>
            <status>success</status>
            <versionMismatch>0</versionMismatch>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <propertySheet>
              <credentialProtected>0</credentialProtected>
              <tracked>0</tracked>
              <acl>
                <inheriting>1</inheriting>
                <tracked>0</tracked>
              </acl>
            </propertySheet>
          </environmentInventoryItem>
        </deploymentDetailsItem>
        <microserviceDeploymentDetail>
          <microserviceDeploymentDetailName>a1a4e474-b5cb-11ed-8bde-024be617296e</microserviceDeploymentDetailName>
          <microserviceDefinitionType>helm</microserviceDefinitionType>
          <microserviceDeploymentData>{&#10;   "app_version" : "5.0.0",&#10;   "chart" : "guestbook-0.1.0",&#10;   "chart_name" : "guestbook",&#10;   "chart_version" : "0.1.0",&#10;   "manifests" : [&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/serviceaccount.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nautomountServiceAccountToken: true\nmetadata:\n  name: my-guestbook-redis\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "automountServiceAccountToken" : "true",&#10;            "kind" : "ServiceAccount",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/serviceaccount.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: my-guestbook\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "ServiceAccount",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-redis-configuration\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\ndata:\n  redis.conf: |-\n    # User-supplied common configuration:\n    appendonly no\n    # End of common configuration\n  master.conf: |-\n    dir /data\n    # User-supplied master configuration:\n    rename-command FLUSHDB \"\"\n    rename-command FLUSHALL \"\"\n    # End of master configuration\n  replica.conf: |-\n    dir /data\n    # User-supplied replica configuration:\n    rename-command FLUSHDB \"\"\n    rename-command FLUSHALL \"\"\n    # End of replica configuration\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "master.conf" : "dir /data\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"",&#10;               "redis.conf" : "appendonly no",&#10;               "replica.conf" : "dir /data\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\""&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-configuration",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/health-configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/health-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-redis-health\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\ndata:\n  ping_readiness_local.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h localhost \\\n        -p $REDIS_PORT \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    if [ \"$response\" != \"PONG\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_liveness_local.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h localhost \\\n        -p $REDIS_PORT \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\n    if [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ] &amp;&amp; [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_readiness_master.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h $REDIS_MASTER_HOST \\\n        -p $REDIS_MASTER_PORT_NUMBER \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    if [ \"$response\" != \"PONG\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_liveness_master.sh: |-\n    #!/bin/bash\n\n    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n    [[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h $REDIS_MASTER_HOST \\\n        -p $REDIS_MASTER_PORT_NUMBER \\\n        ping\n    )\n    if [ \"$?\" -eq \"124\" ]; then\n      echo \"Timed out\"\n      exit 1\n    fi\n    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\n    if [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ]; then\n      echo \"$response\"\n      exit 1\n    fi\n  ping_readiness_local_and_master.sh: |-\n    script_dir=\"$(dirname \"$0\")\"\n    exit_status=0\n    \"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n    \"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\n    exit $exit_status\n  ping_liveness_local_and_master.sh: |-\n    script_dir=\"$(dirname \"$0\")\"\n    exit_status=0\n    \"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n    \"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\n    exit $exit_status\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "ping_liveness_local.sh" : "[[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ] &amp;&amp; [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n  echo \"$response\"\n  exit 1\nfi",&#10;               "ping_liveness_local_and_master.sh" : "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status",&#10;               "ping_liveness_master.sh" : "[[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] &amp;&amp; [ \"$responseFirstWord\" != \"LOADING\" ]; then\n  echo \"$response\"\n  exit 1\nfi",&#10;               "ping_readiness_local.sh" : "[[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",&#10;               "ping_readiness_local_and_master.sh" : "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",&#10;               "ping_readiness_master.sh" : "[[ -f $REDIS_MASTER_PASSWORD_FILE ]] &amp;&amp; export REDIS_MASTER_PASSWORD=\"$(&lt; \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] &amp;&amp; export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi"&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-health",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/scripts-configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/scripts-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-redis-scripts\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\ndata:\n  start-master.sh: |\n    #!/bin/bash\n\n    [[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\n    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then\n        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\n    fi\n    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\n        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\n    fi\n    ARGS=(\"--port\" \"${REDIS_PORT}\")\n    ARGS+=(\"--protected-mode\" \"no\")\n    ARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\n    ARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\n    exec redis-server \"${ARGS[@]}\"\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "start-master.sh" : "[[ -f $REDIS_PASSWORD_FILE ]] &amp;&amp; export REDIS_PASSWORD=\"$(&lt; \"${REDIS_PASSWORD_FILE}\")\"\nif [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--protected-mode\" \"no\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\nexec redis-server \"${ARGS[@]}\"\n"&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-scripts",&#10;               "namespace" : "qa"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/configmap.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-guestbook-backup-configmap\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\ndata:\n  backup.sh: |\n    #!/bin/bash\n    cd /data\n    redis-cli -h  my-guestbook-redis-master save\n    mkdir -p /data/backup\n    mv /data/dump.rdb /data/backup\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "data" : {&#10;               "backup.sh" : "cd /data\nredis-cli -h  my-guestbook-redis-master save\nmkdir -p /data/backup\nmv /data/dump.rdb /data/backup\n"&#10;            },&#10;            "kind" : "ConfigMap",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook-backup-configmap"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/headless-svc.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/headless-svc.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-guestbook-redis-headless\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n  annotations:\n    \nspec:\n  type: ClusterIP\n  clusterIP: None\n  ports:\n    - name: tcp-redis\n      port: 6379\n      targetPort: redis\n  selector:\n    app.kubernetes.io/name: redis\n    app.kubernetes.io/instance: my-guestbook\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "Service",&#10;            "metadata" : {&#10;               "annotations" : null,&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-headless",&#10;               "namespace" : "qa"&#10;            },&#10;            "spec" : {&#10;               "clusterIP" : "None",&#10;               "ports" : [&#10;                  {&#10;                     "name" : "tcp-redis",&#10;                     "port" : "6379",&#10;                     "targetPort" : "redis"&#10;                  }&#10;               ],&#10;               "selector" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/name" : "redis"&#10;               },&#10;               "type" : "ClusterIP"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/master/service.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/master/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-guestbook-redis-master\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: master\nspec:\n  type: ClusterIP\n  internalTrafficPolicy: Cluster\n  sessionAffinity: None\n  ports:\n    - name: tcp-redis\n      port: 6379\n      targetPort: redis\n      nodePort: null\n  selector:\n    app.kubernetes.io/name: redis\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/component: master\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "Service",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/component" : "master",&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-master",&#10;               "namespace" : "qa"&#10;            },&#10;            "spec" : {&#10;               "internalTrafficPolicy" : "Cluster",&#10;               "ports" : [&#10;                  {&#10;                     "name" : "tcp-redis",&#10;                     "nodePort" : "null",&#10;                     "port" : "6379",&#10;                     "targetPort" : "redis"&#10;                  }&#10;               ],&#10;               "selector" : {&#10;                  "app.kubernetes.io/component" : "master",&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/name" : "redis"&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "type" : "ClusterIP"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/service.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-guestbook\n  labels:\n    \n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      targetPort: http\n      protocol: TCP\n      name: http\n  selector:\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "v1",&#10;            "kind" : "Service",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook"&#10;            },&#10;            "spec" : {&#10;               "ports" : [&#10;                  {&#10;                     "name" : "http",&#10;                     "port" : "80",&#10;                     "protocol" : "TCP",&#10;                     "targetPort" : "http"&#10;                  }&#10;               ],&#10;               "selector" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/name" : "guestbook"&#10;               },&#10;               "type" : "ClusterIP"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/deployment.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-guestbook-v1\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: guestbook\n      app.kubernetes.io/instance: my-guestbook\n  template:\n    metadata:\n      annotations:      \n      labels:\n        app.kubernetes.io/name: guestbook\n        app.kubernetes.io/instance: my-guestbook\n    spec:\n      serviceAccountName: my-guestbook\n      securityContext:\n        {}\n      containers:\n        - name: guestbook\n          securityContext:\n            {}\n          image: \"gcr.io/google-samples/gb-frontend:v5\"\n          imagePullPolicy: IfNotPresent\n          ports:\n            - name: http\n              containerPort: 80\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              path: /\n              port: http\n          readinessProbe:\n            httpGet:\n              path: /\n              port: http\n          resources:\n            {}\n          env:\n            - name: GET_HOSTS_FROM\n              value: env\n            - name: REDIS_LEADER_SERVICE_HOST\n              value: my-guestbook-redis-master\n            - name: REDIS_FOLLOWER_SERVICE_HOST\n              value: my-guestbook-redis-master\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "apps/v1",&#10;            "kind" : "Deployment",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook-v1"&#10;            },&#10;            "spec" : {&#10;               "replicas" : 1,&#10;               "selector" : {&#10;                  "matchLabels" : {&#10;                     "app.kubernetes.io/instance" : "my-guestbook",&#10;                     "app.kubernetes.io/name" : "guestbook"&#10;                  }&#10;               },&#10;               "template" : {&#10;                  "metadata" : {&#10;                     "annotations" : null,&#10;                     "labels" : {&#10;                        "app.kubernetes.io/instance" : "my-guestbook",&#10;                        "app.kubernetes.io/name" : "guestbook"&#10;                     }&#10;                  },&#10;                  "spec" : {&#10;                     "containers" : [&#10;                        {&#10;                           "env" : [&#10;                              {&#10;                                 "name" : "GET_HOSTS_FROM",&#10;                                 "value" : "env"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_LEADER_SERVICE_HOST",&#10;                                 "value" : "my-guestbook-redis-master"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_FOLLOWER_SERVICE_HOST",&#10;                                 "value" : "my-guestbook-redis-master"&#10;                              }&#10;                           ],&#10;                           "image" : "gcr.io/google-samples/gb-frontend:v5",&#10;                           "imagePullPolicy" : "IfNotPresent",&#10;                           "livenessProbe" : {&#10;                              "httpGet" : {&#10;                                 "path" : "/",&#10;                                 "port" : "http"&#10;                              }&#10;                           },&#10;                           "name" : "guestbook",&#10;                           "ports" : [&#10;                              {&#10;                                 "containerPort" : 80,&#10;                                 "name" : "http",&#10;                                 "protocol" : "TCP"&#10;                              }&#10;                           ],&#10;                           "readinessProbe" : {&#10;                              "httpGet" : {&#10;                                 "path" : "/",&#10;                                 "port" : "http"&#10;                              }&#10;                           },&#10;                           "resources" : {},&#10;                           "securityContext" : {}&#10;                        }&#10;                     ],&#10;                     "securityContext" : {},&#10;                     "serviceAccountName" : "my-guestbook"&#10;                  }&#10;               }&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/charts/redis/templates/master/application.yaml",&#10;         "text" : "---\n# Source: guestbook/charts/redis/templates/master/application.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: my-guestbook-redis-master\n  namespace: \"qa\"\n  labels:\n    app.kubernetes.io/name: redis\n    helm.sh/chart: redis-17.6.0\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: master\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: redis\n      app.kubernetes.io/instance: my-guestbook\n      app.kubernetes.io/component: master\n  serviceName: my-guestbook-redis-headless\n  updateStrategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: redis\n        helm.sh/chart: redis-17.6.0\n        app.kubernetes.io/instance: my-guestbook\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component: master\n      annotations:\n        checksum/configmap: 9ad434eace5abfd23b91dd8f629794316b3a0cf125927115b96d8fe06bb88d96\n        checksum/health: 5b93e0375cbda529f002310484e90cbc6aacf0776a794a0a075ad9835281ad44\n        checksum/scripts: 4cb9ec8796901b2c02f22a71b2a1c17a674c8ae0ab20a642218c148a4c219240\n        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n    spec:\n      \n      securityContext:\n        fsGroup: 1001\n      serviceAccountName: my-guestbook-redis\n      affinity:\n        podAffinity:\n          \n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n            - podAffinityTerm:\n                labelSelector:\n                  matchLabels:\n                    app.kubernetes.io/name: redis\n                    app.kubernetes.io/instance: my-guestbook\n                    app.kubernetes.io/component: master\n                topologyKey: kubernetes.io/hostname\n              weight: 1\n        nodeAffinity:\n          \n      terminationGracePeriodSeconds: 30\n      containers:\n        - name: redis\n          image: docker.io/bitnami/redis:7.0.8-debian-11-r0\n          imagePullPolicy: \"IfNotPresent\"\n          securityContext:\n            runAsUser: 1001\n          command:\n            - /bin/bash\n          args:\n            - -c\n            - /opt/bitnami/scripts/start-scripts/start-master.sh\n          env:\n            - name: BITNAMI_DEBUG\n              value: \"false\"\n            - name: REDIS_REPLICATION_MODE\n              value: master\n            - name: ALLOW_EMPTY_PASSWORD\n              value: \"yes\"\n            - name: REDIS_TLS_ENABLED\n              value: \"no\"\n            - name: REDIS_PORT\n              value: \"6379\"\n          ports:\n            - name: redis\n              containerPort: 6379\n          livenessProbe:\n            initialDelaySeconds: 20\n            periodSeconds: 5\n            # One second longer than command timeout should prevent generation of zombie processes.\n            timeoutSeconds: 6\n            successThreshold: 1\n            failureThreshold: 5\n            exec:\n              command:\n                - sh\n                - -c\n                - /health/ping_liveness_local.sh 5\n          readinessProbe:\n            initialDelaySeconds: 20\n            periodSeconds: 5\n            timeoutSeconds: 2\n            successThreshold: 1\n            failureThreshold: 5\n            exec:\n              command:\n                - sh\n                - -c\n                - /health/ping_readiness_local.sh 1\n          resources:\n            limits: {}\n            requests: {}\n          volumeMounts:\n            - name: start-scripts\n              mountPath: /opt/bitnami/scripts/start-scripts\n            - name: health\n              mountPath: /health\n            - name: redis-data\n              mountPath: /data\n            - name: config\n              mountPath: /opt/bitnami/redis/mounted-etc\n            - name: redis-tmp-conf\n              mountPath: /opt/bitnami/redis/etc/\n            - name: tmp\n              mountPath: /tmp\n      volumes:\n        - name: start-scripts\n          configMap:\n            name: my-guestbook-redis-scripts\n            defaultMode: 0755\n        - name: health\n          configMap:\n            name: my-guestbook-redis-health\n            defaultMode: 0755\n        - name: config\n          configMap:\n            name: my-guestbook-redis-configuration\n        - name: redis-tmp-conf\n          emptyDir: {}\n        - name: tmp\n          emptyDir: {}\n  volumeClaimTemplates:\n    - metadata:\n        name: redis-data\n        labels:\n          app.kubernetes.io/name: redis\n          app.kubernetes.io/instance: my-guestbook\n          app.kubernetes.io/component: master\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        resources:\n          requests:\n            storage: \"8Gi\"\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "apps/v1",&#10;            "kind" : "StatefulSet",&#10;            "metadata" : {&#10;               "labels" : {&#10;                  "app.kubernetes.io/component" : "master",&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "redis",&#10;                  "helm.sh/chart" : "redis-17.6.0"&#10;               },&#10;               "name" : "my-guestbook-redis-master",&#10;               "namespace" : "qa"&#10;            },&#10;            "spec" : {&#10;               "replicas" : "1",&#10;               "selector" : {&#10;                  "matchLabels" : {&#10;                     "app.kubernetes.io/component" : "master",&#10;                     "app.kubernetes.io/instance" : "my-guestbook",&#10;                     "app.kubernetes.io/name" : "redis"&#10;                  }&#10;               },&#10;               "serviceName" : "my-guestbook-redis-headless",&#10;               "template" : {&#10;                  "metadata" : {&#10;                     "annotations" : {&#10;                        "checksum/configmap" : "9ad434eace5abfd23b91dd8f629794316b3a0cf125927115b96d8fe06bb88d96",&#10;                        "checksum/health" : "5b93e0375cbda529f002310484e90cbc6aacf0776a794a0a075ad9835281ad44",&#10;                        "checksum/scripts" : "4cb9ec8796901b2c02f22a71b2a1c17a674c8ae0ab20a642218c148a4c219240",&#10;                        "checksum/secret" : "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"&#10;                     },&#10;                     "labels" : {&#10;                        "app.kubernetes.io/component" : "master",&#10;                        "app.kubernetes.io/instance" : "my-guestbook",&#10;                        "app.kubernetes.io/managed-by" : "Helm",&#10;                        "app.kubernetes.io/name" : "redis",&#10;                        "helm.sh/chart" : "redis-17.6.0"&#10;                     }&#10;                  },&#10;                  "spec" : {&#10;                     "affinity" : {&#10;                        "nodeAffinity" : null,&#10;                        "podAffinity" : null,&#10;                        "podAntiAffinity" : {&#10;                           "preferredDuringSchedulingIgnoredDuringExecution" : [&#10;                              {&#10;                                 "podAffinityTerm" : {&#10;                                    "labelSelector" : {&#10;                                       "matchLabels" : {&#10;                                          "app.kubernetes.io/component" : "master",&#10;                                          "app.kubernetes.io/instance" : "my-guestbook",&#10;                                          "app.kubernetes.io/name" : "redis"&#10;                                       }&#10;                                    },&#10;                                    "topologyKey" : "kubernetes.io/hostname"&#10;                                 },&#10;                                 "weight" : "1"&#10;                              }&#10;                           ]&#10;                        }&#10;                     },&#10;                     "containers" : [&#10;                        {&#10;                           "args" : [&#10;                              "-c",&#10;                              "/opt/bitnami/scripts/start-scripts/start-master.sh"&#10;                           ],&#10;                           "command" : [&#10;                              "/bin/bash"&#10;                           ],&#10;                           "env" : [&#10;                              {&#10;                                 "name" : "BITNAMI_DEBUG",&#10;                                 "value" : "false"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_REPLICATION_MODE",&#10;                                 "value" : "master"&#10;                              },&#10;                              {&#10;                                 "name" : "ALLOW_EMPTY_PASSWORD",&#10;                                 "value" : "yes"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_TLS_ENABLED",&#10;                                 "value" : "no"&#10;                              },&#10;                              {&#10;                                 "name" : "REDIS_PORT",&#10;                                 "value" : "6379"&#10;                              }&#10;                           ],&#10;                           "image" : "docker.io/bitnami/redis:7.0.8-debian-11-r0",&#10;                           "imagePullPolicy" : "IfNotPresent",&#10;                           "livenessProbe" : {&#10;                              "exec" : {&#10;                                 "command" : [&#10;                                    "sh",&#10;                                    "-c",&#10;                                    "/health/ping_liveness_local.sh 5"&#10;                                 ]&#10;                              },&#10;                              "failureThreshold" : "5",&#10;                              "initialDelaySeconds" : "20",&#10;                              "periodSeconds" : "5",&#10;                              "successThreshold" : "1",&#10;                              "timeoutSeconds" : "6"&#10;                           },&#10;                           "name" : "redis",&#10;                           "ports" : [&#10;                              {&#10;                                 "containerPort" : "6379",&#10;                                 "name" : "redis"&#10;                              }&#10;                           ],&#10;                           "readinessProbe" : {&#10;                              "exec" : {&#10;                                 "command" : [&#10;                                    "sh",&#10;                                    "-c",&#10;                                    "/health/ping_readiness_local.sh 1"&#10;                                 ]&#10;                              },&#10;                              "failureThreshold" : "5",&#10;                              "initialDelaySeconds" : "20",&#10;                              "periodSeconds" : "5",&#10;                              "successThreshold" : "1",&#10;                              "timeoutSeconds" : "2"&#10;                           },&#10;                           "resources" : {&#10;                              "limits" : {},&#10;                              "requests" : {}&#10;                           },&#10;                           "securityContext" : {&#10;                              "runAsUser" : "1001"&#10;                           },&#10;                           "volumeMounts" : [&#10;                              {&#10;                                 "mountPath" : "/opt/bitnami/scripts/start-scripts",&#10;                                 "name" : "start-scripts"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/health",&#10;                                 "name" : "health"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/data",&#10;                                 "name" : "redis-data"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/opt/bitnami/redis/mounted-etc",&#10;                                 "name" : "config"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/opt/bitnami/redis/etc/",&#10;                                 "name" : "redis-tmp-conf"&#10;                              },&#10;                              {&#10;                                 "mountPath" : "/tmp",&#10;                                 "name" : "tmp"&#10;                              }&#10;                           ]&#10;                        }&#10;                     ],&#10;                     "securityContext" : {&#10;                        "fsGroup" : "1001"&#10;                     },&#10;                     "serviceAccountName" : "my-guestbook-redis",&#10;                     "terminationGracePeriodSeconds" : "30",&#10;                     "volumes" : [&#10;                        {&#10;                           "configMap" : {&#10;                              "defaultMode" : "0755",&#10;                              "name" : "my-guestbook-redis-scripts"&#10;                           },&#10;                           "name" : "start-scripts"&#10;                        },&#10;                        {&#10;                           "configMap" : {&#10;                              "defaultMode" : "0755",&#10;                              "name" : "my-guestbook-redis-health"&#10;                           },&#10;                           "name" : "health"&#10;                        },&#10;                        {&#10;                           "configMap" : {&#10;                              "name" : "my-guestbook-redis-configuration"&#10;                           },&#10;                           "name" : "config"&#10;                        },&#10;                        {&#10;                           "emptyDir" : {},&#10;                           "name" : "redis-tmp-conf"&#10;                        },&#10;                        {&#10;                           "emptyDir" : {},&#10;                           "name" : "tmp"&#10;                        }&#10;                     ]&#10;                  }&#10;               },&#10;               "updateStrategy" : {&#10;                  "type" : "RollingUpdate"&#10;               },&#10;               "volumeClaimTemplates" : [&#10;                  {&#10;                     "metadata" : {&#10;                        "labels" : {&#10;                           "app.kubernetes.io/component" : "master",&#10;                           "app.kubernetes.io/instance" : "my-guestbook",&#10;                           "app.kubernetes.io/name" : "redis"&#10;                        },&#10;                        "name" : "redis-data"&#10;                     },&#10;                     "spec" : {&#10;                        "accessModes" : [&#10;                           "ReadWriteOnce"&#10;                        ],&#10;                        "resources" : {&#10;                           "requests" : {&#10;                              "storage" : "8Gi"&#10;                           }&#10;                        }&#10;                     }&#10;                  }&#10;               ]&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/ingressclass.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/ingressclass.yaml\napiVersion: networking.k8s.io/v1\nkind: IngressClass\nmetadata:\n  name: guestbook\nspec:\n  controller: \"ingress.k8s.aws/alb\"\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "networking.k8s.io/v1",&#10;            "kind" : "IngressClass",&#10;            "metadata" : {&#10;               "name" : "guestbook"&#10;            },&#10;            "spec" : {&#10;               "controller" : "ingress.k8s.aws/alb"&#10;            }&#10;         }&#10;      },&#10;      {&#10;         "source" : "guestbook/templates/ingress.yaml",&#10;         "text" : "---\n# Source: guestbook/templates/ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-guestbook\n  labels:\n    helm.sh/chart: guestbook-0.1.0\n    app.kubernetes.io/name: guestbook\n    app.kubernetes.io/instance: my-guestbook\n    app.kubernetes.io/version: \"5.0.0\"\n    app.kubernetes.io/managed-by: Helm\n  annotations:\n    alb.ingress.kubernetes.io/actions.ssl-redirect: \"443\"\n    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4\n    alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\":80,\"HTTPS\":443}]'\n    alb.ingress.kubernetes.io/load-balancer-name: guestbook\n    alb.ingress.kubernetes.io/scheme: internet-facing\n    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06\n    alb.ingress.kubernetes.io/target-type: ip\n    external-dns.alpha.kubernetes.io/hostname: qagb.idtplateer.com\nspec:\n  ingressClassName: guestbook\n  tls:\n    - hosts:\n        - \"qagb.idtplateer.com\"\n      secretName: \n  rules:\n    - host: \"qagb.idtplateer.com\"\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: my-guestbook\n                port:\n                  number: 80\n\n",&#10;         "yaml" : {&#10;            "apiVersion" : "networking.k8s.io/v1",&#10;            "kind" : "Ingress",&#10;            "metadata" : {&#10;               "annotations" : {&#10;                  "alb.ingress.kubernetes.io/actions.ssl-redirect" : "443",&#10;                  "alb.ingress.kubernetes.io/certificate-arn" : "arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4",&#10;                  "alb.ingress.kubernetes.io/listen-ports" : "[{\"HTTP\":80,\"HTTPS\":443}]",&#10;                  "alb.ingress.kubernetes.io/load-balancer-name" : "guestbook",&#10;                  "alb.ingress.kubernetes.io/scheme" : "internet-facing",&#10;                  "alb.ingress.kubernetes.io/ssl-policy" : "ELBSecurityPolicy-TLS-1-2-Ext-2018-06",&#10;                  "alb.ingress.kubernetes.io/target-type" : "ip",&#10;                  "external-dns.alpha.kubernetes.io/hostname" : "qagb.idtplateer.com"&#10;               },&#10;               "labels" : {&#10;                  "app.kubernetes.io/instance" : "my-guestbook",&#10;                  "app.kubernetes.io/managed-by" : "Helm",&#10;                  "app.kubernetes.io/name" : "guestbook",&#10;                  "app.kubernetes.io/version" : "5.0.0",&#10;                  "helm.sh/chart" : "guestbook-0.1.0"&#10;               },&#10;               "name" : "my-guestbook"&#10;            },&#10;            "spec" : {&#10;               "ingressClassName" : "guestbook",&#10;               "rules" : [&#10;                  {&#10;                     "host" : "qagb.idtplateer.com",&#10;                     "http" : {&#10;                        "paths" : [&#10;                           {&#10;                              "backend" : {&#10;                                 "service" : {&#10;                                    "name" : "my-guestbook",&#10;                                    "port" : {&#10;                                       "number" : "80"&#10;                                    }&#10;                                 }&#10;                              },&#10;                              "path" : "/",&#10;                              "pathType" : "Prefix"&#10;                           }&#10;                        ]&#10;                     }&#10;                  }&#10;               ],&#10;               "tls" : [&#10;                  {&#10;                     "hosts" : [&#10;                        "qagb.idtplateer.com"&#10;                     ],&#10;                     "secretName" : null&#10;                  }&#10;               ]&#10;            }&#10;         }&#10;      }&#10;   ],&#10;   "name" : "my-guestbook",&#10;   "namespace" : "qa",&#10;   "notes" : "NOTES:\n1. Get the application URL by running these commands:\n  https://qagb.idtplateer.com/\n\n",&#10;   "revision" : "1",&#10;   "status" : "deployed",&#10;   "updated" : "2023-02-26 20:49:24.883535456 +0900 KST",&#10;   "values" : {&#10;      "affinity" : {},&#10;      "autoscaling" : {&#10;         "enabled" : false,&#10;         "maxReplicas" : 10,&#10;         "minReplicas" : 1,&#10;         "targetCPUUtilizationPercentage" : 50,&#10;         "targetMemoryUtilizationPercentage" : 50&#10;      },&#10;      "consul" : {&#10;         "enabled" : false&#10;      },&#10;      "fullnameOverride" : "",&#10;      "image" : {&#10;         "pullPolicy" : "IfNotPresent",&#10;         "repository" : "gcr.io/google-samples/gb-frontend",&#10;         "tag" : "v5"&#10;      },&#10;      "imagePullSecrets" : [],&#10;      "imagenew" : {&#10;         "pullPolicy" : "IfNotPresent",&#10;         "repository" : "harbor.idtplateer.com/guestbook/gb-frontend",&#10;         "tag" : "latest"&#10;      },&#10;      "ingress" : {&#10;         "annotations" : {&#10;            "alb.ingress.kubernetes.io/actions.ssl-redirect" : "443",&#10;            "alb.ingress.kubernetes.io/certificate-arn" : "arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4",&#10;            "alb.ingress.kubernetes.io/listen-ports" : "[{\"HTTP\":80,\"HTTPS\":443}]",&#10;            "alb.ingress.kubernetes.io/load-balancer-name" : "guestbook",&#10;            "alb.ingress.kubernetes.io/scheme" : "internet-facing",&#10;            "alb.ingress.kubernetes.io/ssl-policy" : "ELBSecurityPolicy-TLS-1-2-Ext-2018-06",&#10;            "alb.ingress.kubernetes.io/target-type" : "ip",&#10;            "external-dns.alpha.kubernetes.io/hostname" : "qagb.idtplateer.com"&#10;         },&#10;         "enabled" : true,&#10;         "hosts" : [&#10;            {&#10;               "host" : "qagb.idtplateer.com",&#10;               "paths" : [&#10;                  {&#10;                     "path" : "/",&#10;                     "pathType" : "Prefix"&#10;                  }&#10;               ]&#10;            }&#10;         ],&#10;         "ingressClassName" : "guestbook",&#10;         "tls" : [&#10;            {&#10;               "hosts" : [&#10;                  "qagb.idtplateer.com"&#10;               ]&#10;            }&#10;         ]&#10;      },&#10;      "nameOverride" : "",&#10;      "nodeSelector" : {},&#10;      "podAnnotations" : {},&#10;      "podSecurityContext" : {},&#10;      "redis" : {&#10;         "architecture" : "standalone",&#10;         "auth" : {&#10;            "enabled" : false,&#10;            "existingSecret" : "",&#10;            "existingSecretPasswordKey" : "",&#10;            "password" : "",&#10;            "sentinel" : true,&#10;            "usePasswordFiles" : false&#10;         },&#10;         "clusterDomain" : "cluster.local",&#10;         "common" : {&#10;            "exampleValue" : "common-chart",&#10;            "global" : {&#10;               "imagePullSecrets" : [],&#10;               "imageRegistry" : "",&#10;               "redis" : {&#10;                  "password" : ""&#10;               },&#10;               "storageClass" : ""&#10;            }&#10;         },&#10;         "commonAnnotations" : {},&#10;         "commonConfiguration" : "appendonly no",&#10;         "commonLabels" : {},&#10;         "consul" : {&#10;            "enabled" : false&#10;         },&#10;         "diagnosticMode" : {&#10;            "args" : [&#10;               "infinity"&#10;            ],&#10;            "command" : [&#10;               "sleep"&#10;            ],&#10;            "enabled" : false&#10;         },&#10;         "enabled" : true,&#10;         "existingConfigmap" : "",&#10;         "extraDeploy" : [],&#10;         "fullnameOverride" : "",&#10;         "global" : {&#10;            "imagePullSecrets" : [],&#10;            "imageRegistry" : "",&#10;            "redis" : {&#10;               "password" : ""&#10;            },&#10;            "storageClass" : ""&#10;         },&#10;         "image" : {&#10;            "debug" : false,&#10;            "digest" : "",&#10;            "pullPolicy" : "IfNotPresent",&#10;            "pullSecrets" : [],&#10;            "registry" : "docker.io",&#10;            "repository" : "bitnami/redis",&#10;            "tag" : "7.0.8-debian-11-r0"&#10;         },&#10;         "kubeVersion" : "",&#10;         "master" : {&#10;            "affinity" : {},&#10;            "args" : [],&#10;            "command" : [],&#10;            "configuration" : "",&#10;            "containerPorts" : {&#10;               "redis" : 6379&#10;            },&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "count" : 1,&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "disableCommands" : [&#10;               "FLUSHDB",&#10;               "FLUSHALL"&#10;            ],&#10;            "dnsConfig" : {},&#10;            "dnsPolicy" : "",&#10;            "extraEnvVars" : [],&#10;            "extraEnvVarsCM" : "",&#10;            "extraEnvVarsSecret" : "",&#10;            "extraFlags" : [],&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "hostAliases" : [],&#10;            "initContainers" : [],&#10;            "kind" : "StatefulSet",&#10;            "lifecycleHooks" : {},&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "minReadySeconds" : 0,&#10;            "nodeAffinityPreset" : {&#10;               "key" : "",&#10;               "type" : "",&#10;               "values" : []&#10;            },&#10;            "nodeSelector" : {},&#10;            "persistence" : {&#10;               "accessModes" : [&#10;                  "ReadWriteOnce"&#10;               ],&#10;               "annotations" : {},&#10;               "dataSource" : {},&#10;               "enabled" : true,&#10;               "existingClaim" : "",&#10;               "medium" : "",&#10;               "path" : "/data",&#10;               "selector" : {},&#10;               "size" : "8Gi",&#10;               "sizeLimit" : "",&#10;               "storageClass" : "",&#10;               "subPath" : "",&#10;               "subPathExpr" : ""&#10;            },&#10;            "podAffinityPreset" : "",&#10;            "podAnnotations" : {},&#10;            "podAntiAffinityPreset" : "soft",&#10;            "podLabels" : {},&#10;            "podSecurityContext" : {&#10;               "enabled" : true,&#10;               "fsGroup" : 1001&#10;            },&#10;            "preExecCmds" : [],&#10;            "priorityClassName" : "",&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "schedulerName" : "",&#10;            "service" : {&#10;               "annotations" : {},&#10;               "clusterIP" : "",&#10;               "externalIPs" : [],&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "internalTrafficPolicy" : "Cluster",&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "nodePorts" : {&#10;                  "redis" : ""&#10;               },&#10;               "ports" : {&#10;                  "redis" : 6379&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "sessionAffinityConfig" : {},&#10;               "type" : "ClusterIP"&#10;            },&#10;            "serviceAccount" : {&#10;               "annotations" : {},&#10;               "automountServiceAccountToken" : true,&#10;               "create" : false,&#10;               "name" : ""&#10;            },&#10;            "shareProcessNamespace" : false,&#10;            "sidecars" : [],&#10;            "startupProbe" : {&#10;               "enabled" : false,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "terminationGracePeriodSeconds" : 30,&#10;            "tolerations" : [],&#10;            "topologySpreadConstraints" : [],&#10;            "updateStrategy" : {&#10;               "type" : "RollingUpdate"&#10;            }&#10;         },&#10;         "metrics" : {&#10;            "command" : [],&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "enabled" : false,&#10;            "extraArgs" : {},&#10;            "extraEnvVars" : [],&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "image" : {&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/redis-exporter",&#10;               "tag" : "1.45.0-debian-11-r26"&#10;            },&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "podAnnotations" : {&#10;               "prometheus.io/port" : "9121",&#10;               "prometheus.io/scrape" : "true"&#10;            },&#10;            "podLabels" : {},&#10;            "prometheusRule" : {&#10;               "additionalLabels" : {},&#10;               "enabled" : false,&#10;               "namespace" : "",&#10;               "rules" : []&#10;            },&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 3,&#10;               "initialDelaySeconds" : 5,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "redisTargetHost" : "localhost",&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "service" : {&#10;               "annotations" : {},&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "port" : 9121,&#10;               "type" : "ClusterIP"&#10;            },&#10;            "serviceMonitor" : {&#10;               "additionalLabels" : {},&#10;               "enabled" : false,&#10;               "honorLabels" : false,&#10;               "interval" : "30s",&#10;               "metricRelabelings" : [],&#10;               "namespace" : "",&#10;               "podTargetLabels" : [],&#10;               "relabellings" : [],&#10;               "scrapeTimeout" : ""&#10;            },&#10;            "startupProbe" : {&#10;               "enabled" : false,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            }&#10;         },&#10;         "nameOverride" : "",&#10;         "networkPolicy" : {&#10;            "allowExternal" : true,&#10;            "enabled" : false,&#10;            "extraEgress" : [],&#10;            "extraIngress" : [],&#10;            "ingressNSMatchLabels" : {},&#10;            "ingressNSPodMatchLabels" : {}&#10;         },&#10;         "pdb" : {&#10;            "create" : false,&#10;            "maxUnavailable" : "",&#10;            "minAvailable" : 1&#10;         },&#10;         "podSecurityPolicy" : {&#10;            "create" : false,&#10;            "enabled" : false&#10;         },&#10;         "rbac" : {&#10;            "create" : false,&#10;            "rules" : []&#10;         },&#10;         "replica" : {&#10;            "affinity" : {},&#10;            "args" : [],&#10;            "autoscaling" : {&#10;               "enabled" : false,&#10;               "maxReplicas" : 11,&#10;               "minReplicas" : 1,&#10;               "targetCPU" : "",&#10;               "targetMemory" : ""&#10;            },&#10;            "command" : [],&#10;            "configuration" : "",&#10;            "containerPorts" : {&#10;               "redis" : 6379&#10;            },&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "disableCommands" : [&#10;               "FLUSHDB",&#10;               "FLUSHALL"&#10;            ],&#10;            "dnsConfig" : {},&#10;            "dnsPolicy" : "",&#10;            "externalMaster" : {&#10;               "enabled" : false,&#10;               "host" : "",&#10;               "port" : 6379&#10;            },&#10;            "extraEnvVars" : [],&#10;            "extraEnvVarsCM" : "",&#10;            "extraEnvVarsSecret" : "",&#10;            "extraFlags" : [],&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "hostAliases" : [],&#10;            "initContainers" : [],&#10;            "lifecycleHooks" : {},&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "minReadySeconds" : 0,&#10;            "nodeAffinityPreset" : {&#10;               "key" : "",&#10;               "type" : "",&#10;               "values" : []&#10;            },&#10;            "nodeSelector" : {},&#10;            "persistence" : {&#10;               "accessModes" : [&#10;                  "ReadWriteOnce"&#10;               ],&#10;               "annotations" : {},&#10;               "dataSource" : {},&#10;               "enabled" : true,&#10;               "existingClaim" : "",&#10;               "medium" : "",&#10;               "path" : "/data",&#10;               "selector" : {},&#10;               "size" : "8Gi",&#10;               "sizeLimit" : "",&#10;               "storageClass" : "",&#10;               "subPath" : "",&#10;               "subPathExpr" : ""&#10;            },&#10;            "podAffinityPreset" : "",&#10;            "podAnnotations" : {},&#10;            "podAntiAffinityPreset" : "soft",&#10;            "podLabels" : {},&#10;            "podManagementPolicy" : "",&#10;            "podSecurityContext" : {&#10;               "enabled" : true,&#10;               "fsGroup" : 1001&#10;            },&#10;            "preExecCmds" : [],&#10;            "priorityClassName" : "",&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "replicaCount" : 3,&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "schedulerName" : "",&#10;            "service" : {&#10;               "annotations" : {},&#10;               "clusterIP" : "",&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "internalTrafficPolicy" : "Cluster",&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "nodePorts" : {&#10;                  "redis" : ""&#10;               },&#10;               "ports" : {&#10;                  "redis" : 6379&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "sessionAffinityConfig" : {},&#10;               "type" : "ClusterIP"&#10;            },&#10;            "serviceAccount" : {&#10;               "annotations" : {},&#10;               "automountServiceAccountToken" : true,&#10;               "create" : false,&#10;               "name" : ""&#10;            },&#10;            "shareProcessNamespace" : false,&#10;            "sidecars" : [],&#10;            "startupProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 22,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "terminationGracePeriodSeconds" : 30,&#10;            "tolerations" : [],&#10;            "topologySpreadConstraints" : [],&#10;            "updateStrategy" : {&#10;               "type" : "RollingUpdate"&#10;            }&#10;         },&#10;         "secretAnnotations" : {},&#10;         "sentinel" : {&#10;            "args" : [],&#10;            "automateClusterRecovery" : false,&#10;            "command" : [],&#10;            "configuration" : "",&#10;            "containerPorts" : {&#10;               "sentinel" : 26379&#10;            },&#10;            "containerSecurityContext" : {&#10;               "enabled" : true,&#10;               "runAsUser" : 1001&#10;            },&#10;            "customLivenessProbe" : {},&#10;            "customReadinessProbe" : {},&#10;            "customStartupProbe" : {},&#10;            "downAfterMilliseconds" : 60000,&#10;            "enabled" : false,&#10;            "externalMaster" : {&#10;               "enabled" : false,&#10;               "host" : "",&#10;               "port" : 6379&#10;            },&#10;            "extraEnvVars" : [],&#10;            "extraEnvVarsCM" : "",&#10;            "extraEnvVarsSecret" : "",&#10;            "extraVolumeMounts" : [],&#10;            "extraVolumes" : [],&#10;            "failoverTimeout" : 180000,&#10;            "getMasterTimeout" : 220,&#10;            "image" : {&#10;               "debug" : false,&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/redis-sentinel",&#10;               "tag" : "7.0.7-debian-11-r10"&#10;            },&#10;            "lifecycleHooks" : {},&#10;            "livenessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "masterSet" : "mymaster",&#10;            "parallelSyncs" : 1,&#10;            "persistence" : {&#10;               "accessModes" : [&#10;                  "ReadWriteOnce"&#10;               ],&#10;               "annotations" : {},&#10;               "dataSource" : {},&#10;               "enabled" : false,&#10;               "medium" : "",&#10;               "selector" : {},&#10;               "size" : "100Mi",&#10;               "sizeLimit" : "",&#10;               "storageClass" : ""&#10;            },&#10;            "preExecCmds" : [],&#10;            "quorum" : 2,&#10;            "readinessProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 5,&#10;               "initialDelaySeconds" : 20,&#10;               "periodSeconds" : 5,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 1&#10;            },&#10;            "redisShutdownWaitFailover" : true,&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            },&#10;            "service" : {&#10;               "annotations" : {},&#10;               "clusterIP" : "",&#10;               "externalTrafficPolicy" : "Cluster",&#10;               "extraPorts" : [],&#10;               "loadBalancerIP" : "",&#10;               "loadBalancerSourceRanges" : [],&#10;               "nodePorts" : {&#10;                  "redis" : "",&#10;                  "sentinel" : ""&#10;               },&#10;               "ports" : {&#10;                  "redis" : 6379,&#10;                  "sentinel" : 26379&#10;               },&#10;               "sessionAffinity" : "None",&#10;               "sessionAffinityConfig" : {},&#10;               "type" : "ClusterIP"&#10;            },&#10;            "startupProbe" : {&#10;               "enabled" : true,&#10;               "failureThreshold" : 22,&#10;               "initialDelaySeconds" : 10,&#10;               "periodSeconds" : 10,&#10;               "successThreshold" : 1,&#10;               "timeoutSeconds" : 5&#10;            },&#10;            "terminationGracePeriodSeconds" : 30&#10;         },&#10;         "serviceAccount" : {&#10;            "annotations" : {},&#10;            "automountServiceAccountToken" : true,&#10;            "create" : true,&#10;            "name" : ""&#10;         },&#10;         "sysctl" : {&#10;            "command" : [],&#10;            "enabled" : false,&#10;            "image" : {&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/bitnami-shell",&#10;               "tag" : "11-debian-11-r72"&#10;            },&#10;            "mountHostSys" : false,&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            }&#10;         },&#10;         "tls" : {&#10;            "authClients" : true,&#10;            "autoGenerated" : false,&#10;            "certCAFilename" : "",&#10;            "certFilename" : "",&#10;            "certKeyFilename" : "",&#10;            "certificatesSecret" : "",&#10;            "dhParamsFilename" : "",&#10;            "enabled" : false,&#10;            "existingSecret" : ""&#10;         },&#10;         "useExternalDNS" : {&#10;            "additionalAnnotations" : {},&#10;            "annotationKey" : "external-dns.alpha.kubernetes.io/",&#10;            "enabled" : false,&#10;            "suffix" : ""&#10;         },&#10;         "volumePermissions" : {&#10;            "containerSecurityContext" : {&#10;               "runAsUser" : 0&#10;            },&#10;            "enabled" : false,&#10;            "image" : {&#10;               "digest" : "",&#10;               "pullPolicy" : "IfNotPresent",&#10;               "pullSecrets" : [],&#10;               "registry" : "docker.io",&#10;               "repository" : "bitnami/bitnami-shell",&#10;               "tag" : "11-debian-11-r72"&#10;            },&#10;            "resources" : {&#10;               "limits" : {},&#10;               "requests" : {}&#10;            }&#10;         }&#10;      },&#10;      "replicaCount" : 1,&#10;      "resources" : {},&#10;      "securityContext" : {},&#10;      "service" : {&#10;         "port" : 80,&#10;         "type" : "ClusterIP"&#10;      },&#10;      "serviceAccount" : {&#10;         "annotations" : {},&#10;         "create" : true,&#10;         "name" : ""&#10;      },&#10;      "tolerations" : []&#10;   }&#10;}&#10;</microserviceDeploymentData>
          <microserviceDeploymentSummary>NAME: my-guestbook&#10;LAST DEPLOYED: Sun Feb 26 20:49:24 2023&#10;NAMESPACE: qa&#10;STATUS: deployed&#10;REVISION: 1&#10;NOTES:&#10;1. Get the application URL by running these commands:&#10;  https://qagb.idtplateer.com/&#10;</microserviceDeploymentSummary>
          <microserviceName>Guestbook QA</microserviceName>
          <status>success</status>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <definitionSourceParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>repositoryName</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>guestbook-repo</value>
            </property>
            <property>
              <propertyName>repositoryUrl</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>https://harbor.idtplateer.com/chartrepo/guestbook</value>
            </property>
            <property>
              <propertyName>repository_credential</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>/projects/Guestbook/credentials/harbor</value>
            </property>
          </definitionSourceParameters>
          <deployParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>additionalOptions</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>--create-namespace</value>
            </property>
            <property>
              <propertyName>chart</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>guestbook</value>
            </property>
            <property>
              <propertyName>releaseName</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>my-guestbook</value>
            </property>
            <property>
              <propertyName>values</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value># -- Override the name of the chart.&#10;nameOverride: ""&#10;# -- Override the fullname of the chart.&#10;fullnameOverride: ""&#10;&#10;# -- Replica count.&#10;replicaCount: 1&#10;&#10;image:&#10;  # -- Image repository.&#10;  repository: gcr.io/google-samples/gb-frontend&#10;  # -- Image pull policy.&#10;  pullPolicy: IfNotPresent&#10;  # -- Image tag.&#10;  tag: v5&#10;&#10;# -- Image pull secrets.&#10;imagePullSecrets: []&#10;&#10;serviceAccount:&#10;  # -- Specifies whether a service account should be created.&#10;  create: true&#10;  # -- Annotations to add to the service account.&#10;  annotations: {}&#10;  # If not set and create is true, a name is generated using the fullname template&#10;  # -- The name of the service account to use.&#10;  name: ""&#10;&#10;# -- Annotations to add to the pod.&#10;podAnnotations: {}&#10;&#10;# -- Security context for the pod.&#10;podSecurityContext: {}&#10;  # fsGroup: 2000&#10;&#10;# -- Security context for the container.&#10;securityContext: {}&#10;  # capabilities:&#10;  #   drop:&#10;  #   - ALL&#10;  # readOnlyRootFilesystem: true&#10;  # runAsNonRoot: true&#10;  # runAsUser: 1000&#10;&#10;&#10;service:&#10;  # -- Service type.&#10;  type: ClusterIP&#10;  # -- Service port.&#10;  port: 80&#10;&#10;# -- Resource requests and limits.&#10;resources: {}&#10;  # We usually recommend not to specify default resources and to leave this as a conscious&#10;  # choice for the user. This also increases chances charts run on environments with little&#10;  # resources, such as Minikube. If you do want to specify resources, uncomment the following&#10;  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.&#10;  # limits:&#10;  #   cpu: 100m&#10;  #   memory: 128Mi&#10;  # requests:&#10;  #   cpu: 100m&#10;  #   memory: 128Mi&#10;&#10;autoscaling:&#10;  # -- If true, create a HPA for the deployment.&#10;  enabled: false&#10;  # -- Minimum number of pod replicas.&#10;  minReplicas: 1&#10;  # -- Maximum number of pod replicas.&#10;  maxReplicas: 10&#10;  # -- Target CPU utilisation for the pod.&#10;  targetCPUUtilizationPercentage: 50&#10;  # -- Target memory utilisation for the pod.&#10;  targetMemoryUtilizationPercentage: 50&#10;&#10;# -- Node labels for pod assignment.&#10;nodeSelector: {}&#10;&#10;# -- Tolerations for pod assignment.&#10;tolerations: []&#10;&#10;# -- Affinity for pod assignment.&#10;affinity: {}&#10;&#10;redis:&#10;  architecture: standalone&#10;  enabled: true&#10;  auth:&#10;    enabled: false&#10;  master:&#10;    persistence:&#10;      enabled: true&#10;  commonConfiguration: |- &#10;    appendonly no&#10;&#10;consul:&#10;  enabled: false&#10;&#10;imagenew:&#10;  # -- Image repository.&#10;  repository: harbor.idtplateer.com/guestbook/gb-frontend&#10;  # -- Image pull policy.&#10;  pullPolicy: IfNotPresent&#10;  # -- Image tag.&#10;  tag: latest&#10;&#10;&#10;ingress:&#10;  enabled: true&#10;  ingressClassName: 'guestbook'&#10;  annotations:&#10;    alb.ingress.kubernetes.io/load-balancer-name: 'guestbook'&#10;    alb.ingress.kubernetes.io/scheme: 'internet-facing'&#10;    alb.ingress.kubernetes.io/target-type: ip&#10;    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80,"HTTPS":443}]'&#10;    alb.ingress.kubernetes.io/certificate-arn: 'arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4'&#10;    alb.ingress.kubernetes.io/ssl-policy: 'ELBSecurityPolicy-TLS-1-2-Ext-2018-06'&#10;    alb.ingress.kubernetes.io/actions.ssl-redirect: '443'&#10;    external-dns.alpha.kubernetes.io/hostname: 'qagb.idtplateer.com'&#10;  hosts:&#10;    - host: 'qagb.idtplateer.com'&#10;      paths:&#10;        - path: "/"&#10;          pathType: Prefix&#10;  tls:&#10;    - hosts:&#10;      - 'qagb.idtplateer.com'</value>
            </property>
            <property>
              <propertyName>version</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>0.1.0</value>
            </property>
          </deployParameters>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
          </propertySheet>
          <rollbackParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>rollbackEnabled</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>false</value>
            </property>
            <property>
              <propertyName>waitTimeout</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>300</value>
            </property>
          </rollbackParameters>
        </microserviceDeploymentDetail>
      </deploymentHistoryItem>
      <utilityResource>
        <utilityResourceName>local</utilityResourceName>
        <resourceName>local</resourceName>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
      </utilityResource>
    </environment>
    <application>
      <applicationName>Guestbook</applicationName>
      <applicationType>microservice</applicationType>
      <description></description>
      <tracked>0</tracked>
      <acl>
        <inheriting>1</inheriting>
        <tracked>0</tracked>
      </acl>
      <propertySheet>
        <credentialProtected>0</credentialProtected>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <property>
          <propertyName>ec_deploy</propertyName>
          <tracked>0</tracked>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>ec_notifierStatus</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>0</value>
            </property>
          </propertySheet>
        </property>
        <property>
          <propertyName>jobCounter</propertyName>
          <expandable>1</expandable>
          <suppressValueTracking>1</suppressValueTracking>
          <tracked>0</tracked>
          <value>9</value>
        </property>
      </propertySheet>
      <microservice>
        <microserviceName>Guestbook QA</microserviceName>
        <applicationName>Guestbook</applicationName>
        <definitionSource>helm_repository</definitionSource>
        <definitionType>helm</definitionType>
        <description></description>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <definitionSourceParameters>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>repositoryName</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>guestbook-repo</value>
          </property>
          <property>
            <propertyName>repositoryUrl</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>https://harbor.idtplateer.com/chartrepo/guestbook</value>
          </property>
          <property>
            <propertyName>repository_credential</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>/projects/Guestbook/credentials/harbor</value>
          </property>
        </definitionSourceParameters>
        <deployParameters>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>additionalOptions</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>--create-namespace</value>
          </property>
          <property>
            <propertyName>chart</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>guestbook</value>
          </property>
          <property>
            <propertyName>releaseName</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>my-guestbook</value>
          </property>
          <property>
            <propertyName>values</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value># -- Override the name of the chart.&#10;nameOverride: ""&#10;# -- Override the fullname of the chart.&#10;fullnameOverride: ""&#10;&#10;# -- Replica count.&#10;replicaCount: 1&#10;&#10;image:&#10;  # -- Image repository.&#10;  repository: gcr.io/google-samples/gb-frontend&#10;  # -- Image pull policy.&#10;  pullPolicy: IfNotPresent&#10;  # -- Image tag.&#10;  tag: v5&#10;&#10;# -- Image pull secrets.&#10;imagePullSecrets: []&#10;&#10;serviceAccount:&#10;  # -- Specifies whether a service account should be created.&#10;  create: true&#10;  # -- Annotations to add to the service account.&#10;  annotations: {}&#10;  # If not set and create is true, a name is generated using the fullname template&#10;  # -- The name of the service account to use.&#10;  name: ""&#10;&#10;# -- Annotations to add to the pod.&#10;podAnnotations: {}&#10;&#10;# -- Security context for the pod.&#10;podSecurityContext: {}&#10;  # fsGroup: 2000&#10;&#10;# -- Security context for the container.&#10;securityContext: {}&#10;  # capabilities:&#10;  #   drop:&#10;  #   - ALL&#10;  # readOnlyRootFilesystem: true&#10;  # runAsNonRoot: true&#10;  # runAsUser: 1000&#10;&#10;&#10;service:&#10;  # -- Service type.&#10;  type: ClusterIP&#10;  # -- Service port.&#10;  port: 80&#10;&#10;# -- Resource requests and limits.&#10;resources: {}&#10;  # We usually recommend not to specify default resources and to leave this as a conscious&#10;  # choice for the user. This also increases chances charts run on environments with little&#10;  # resources, such as Minikube. If you do want to specify resources, uncomment the following&#10;  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.&#10;  # limits:&#10;  #   cpu: 100m&#10;  #   memory: 128Mi&#10;  # requests:&#10;  #   cpu: 100m&#10;  #   memory: 128Mi&#10;&#10;autoscaling:&#10;  # -- If true, create a HPA for the deployment.&#10;  enabled: false&#10;  # -- Minimum number of pod replicas.&#10;  minReplicas: 1&#10;  # -- Maximum number of pod replicas.&#10;  maxReplicas: 10&#10;  # -- Target CPU utilisation for the pod.&#10;  targetCPUUtilizationPercentage: 50&#10;  # -- Target memory utilisation for the pod.&#10;  targetMemoryUtilizationPercentage: 50&#10;&#10;# -- Node labels for pod assignment.&#10;nodeSelector: {}&#10;&#10;# -- Tolerations for pod assignment.&#10;tolerations: []&#10;&#10;# -- Affinity for pod assignment.&#10;affinity: {}&#10;&#10;redis:&#10;  architecture: standalone&#10;  enabled: true&#10;  auth:&#10;    enabled: false&#10;  master:&#10;    persistence:&#10;      enabled: true&#10;  commonConfiguration: |- &#10;    appendonly no&#10;&#10;consul:&#10;  enabled: false&#10;&#10;imagenew:&#10;  # -- Image repository.&#10;  repository: harbor.idtplateer.com/guestbook/gb-frontend&#10;  # -- Image pull policy.&#10;  pullPolicy: IfNotPresent&#10;  # -- Image tag.&#10;  tag: latest&#10;&#10;&#10;ingress:&#10;  enabled: true&#10;  ingressClassName: 'guestbook'&#10;  annotations:&#10;    alb.ingress.kubernetes.io/load-balancer-name: 'guestbook'&#10;    alb.ingress.kubernetes.io/scheme: 'internet-facing'&#10;    alb.ingress.kubernetes.io/target-type: ip&#10;    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80,"HTTPS":443}]'&#10;    alb.ingress.kubernetes.io/certificate-arn: 'arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4'&#10;    alb.ingress.kubernetes.io/ssl-policy: 'ELBSecurityPolicy-TLS-1-2-Ext-2018-06'&#10;    alb.ingress.kubernetes.io/actions.ssl-redirect: '443'&#10;    external-dns.alpha.kubernetes.io/hostname: 'qagb.idtplateer.com'&#10;  hosts:&#10;    - host: 'qagb.idtplateer.com'&#10;      paths:&#10;        - path: "/"&#10;          pathType: Prefix&#10;  tls:&#10;    - hosts:&#10;      - 'qagb.idtplateer.com'</value>
          </property>
          <property>
            <propertyName>version</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>0.1.0</value>
          </property>
        </deployParameters>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
        </propertySheet>
        <rollbackParameters>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>rollbackEnabled</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>false</value>
          </property>
          <property>
            <propertyName>waitTimeout</propertyName>
            <expandable>1</expandable>
            <suppressValueTracking>0</suppressValueTracking>
            <tracked>0</tracked>
            <value>300</value>
          </property>
        </rollbackParameters>
        <process>
          <processName>Deploy Microservice Process</processName>
          <description>System generated process for microservice deployment</description>
          <processType>DEPLOY</processType>
          <timeLimitUnits>minutes</timeLimitUnits>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
          </propertySheet>
          <processStep>
            <processStepName>Retrieve Artifact</processStepName>
            <alwaysRun>0</alwaysRun>
            <description>System generated step to retrieve microservice definition artifact</description>
            <errorHandling>abortJob</errorHandling>
            <processStepType>plugin</processStepType>
            <subprocedure>Source Provider</subprocedure>
            <subproject>/plugins/EC-Helm/project</subproject>
            <tracked>0</tracked>
            <useUtilityResource>0</useUtilityResource>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <propertySheet>
              <credentialProtected>0</credentialProtected>
              <tracked>0</tracked>
              <acl>
                <inheriting>1</inheriting>
                <tracked>0</tracked>
              </acl>
            </propertySheet>
          </processStep>
          <processStep>
            <processStepName>Deploy Microservice</processStepName>
            <alwaysRun>0</alwaysRun>
            <description>System generated step to deploy microservice</description>
            <errorHandling>abortJob</errorHandling>
            <processStepType>plugin</processStepType>
            <subprocedure>Deploy Service</subprocedure>
            <subproject>/plugins/EC-Helm/project</subproject>
            <tracked>0</tracked>
            <useUtilityResource>0</useUtilityResource>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <propertySheet>
              <credentialProtected>0</credentialProtected>
              <tracked>0</tracked>
              <acl>
                <inheriting>1</inheriting>
                <tracked>0</tracked>
              </acl>
            </propertySheet>
          </processStep>
          <processDependency>
            <branchType>ALWAYS</branchType>
            <source>processStep-24962d41-b50c-11ed-ad44-024be617296e</source>
            <sourceName>Retrieve Artifact</sourceName>
            <target>processStep-24987735-b50c-11ed-ad44-024be617296e</target>
            <targetName>Deploy Microservice</targetName>
            <tracked>0</tracked>
          </processDependency>
        </process>
      </microservice>
      <process>
        <processName>Deploy Application</processName>
        <description>System generated process for microservice application</description>
        <processType>DEPLOY</processType>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>ec_deploy</propertyName>
            <tracked>0</tracked>
            <propertySheet>
              <credentialProtected>0</credentialProtected>
              <tracked>0</tracked>
              <acl>
                <inheriting>1</inheriting>
                <tracked>0</tracked>
              </acl>
              <property>
                <propertyName>ec_notifierStatus</propertyName>
                <expandable>1</expandable>
                <suppressValueTracking>0</suppressValueTracking>
                <tracked>0</tracked>
                <value>0</value>
              </property>
            </propertySheet>
          </property>
        </propertySheet>
        <formalParameter>
          <formalParameterName>ec_Guestbook QA-run</formalParameterName>
          <defaultValue>1</defaultValue>
          <expansionDeferred>1</expansionDeferred>
          <required>0</required>
          <tracked>0</tracked>
          <type>checkbox</type>
        </formalParameter>
        <processStep>
          <processStepName>Guestbook</processStepName>
          <alwaysRun>0</alwaysRun>
          <dependencyJoinType>and</dependencyJoinType>
          <description>System generated step to invoke microservice process</description>
          <errorHandling>abortJob</errorHandling>
          <processStepType>process</processStepType>
          <submicroservice>Guestbook QA</submicroservice>
          <submicroserviceProcess>Deploy Microservice Process</submicroserviceProcess>
          <tracked>0</tracked>
          <useUtilityResource>1</useUtilityResource>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>ec_deploy</propertyName>
              <tracked>0</tracked>
              <propertySheet>
                <credentialProtected>0</credentialProtected>
                <tracked>0</tracked>
                <acl>
                  <inheriting>1</inheriting>
                  <tracked>0</tracked>
                </acl>
                <property>
                  <propertyName>ec_notifierStatus</propertyName>
                  <expandable>1</expandable>
                  <suppressValueTracking>0</suppressValueTracking>
                  <tracked>0</tracked>
                  <value>0</value>
                </property>
              </propertySheet>
            </property>
          </propertySheet>
        </processStep>
      </process>
      <process>
        <processName>Uninstall Application</processName>
        <exclusiveEnvironment>0</exclusiveEnvironment>
        <processType>UNDEPLOY</processType>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>0</tracked>
        <acl>
          <inheriting>1</inheriting>
          <tracked>0</tracked>
        </acl>
        <propertySheet>
          <credentialProtected>0</credentialProtected>
          <tracked>0</tracked>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <property>
            <propertyName>ec_deploy</propertyName>
            <tracked>0</tracked>
            <propertySheet>
              <credentialProtected>0</credentialProtected>
              <tracked>0</tracked>
              <acl>
                <inheriting>1</inheriting>
                <tracked>0</tracked>
              </acl>
              <property>
                <propertyName>ec_notifierStatus</propertyName>
                <expandable>1</expandable>
                <suppressValueTracking>0</suppressValueTracking>
                <tracked>0</tracked>
                <value>0</value>
              </property>
            </propertySheet>
          </property>
        </propertySheet>
        <processStep>
          <processStepName>Delete Release</processStepName>
          <alwaysRun>0</alwaysRun>
          <dependencyJoinType>and</dependencyJoinType>
          <errorHandling>failProcedure</errorHandling>
          <processStepType>plugin</processStepType>
          <subprocedure>Delete Release</subprocedure>
          <subproject>/plugins/EC-Helm/project</subproject>
          <tracked>0</tracked>
          <useUtilityResource>0</useUtilityResource>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <actualParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>actionOnError</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>0</value>
            </property>
            <property>
              <propertyName>config</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>/projects/Guestbook/pluginConfigurations/helmcfg</value>
            </property>
            <property>
              <propertyName>errorValue</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value></value>
            </property>
            <property>
              <propertyName>options</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>-n qa</value>
            </property>
            <property>
              <propertyName>releaseName</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>my-guestbook</value>
            </property>
            <property>
              <propertyName>resultPropertySheet</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>/myJob/deleteRelease</value>
            </property>
          </actualParameters>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>ec_deploy</propertyName>
              <tracked>0</tracked>
              <propertySheet>
                <credentialProtected>0</credentialProtected>
                <tracked>0</tracked>
                <acl>
                  <inheriting>1</inheriting>
                  <tracked>0</tracked>
                </acl>
                <property>
                  <propertyName>ec_notifierStatus</propertyName>
                  <expandable>1</expandable>
                  <suppressValueTracking>0</suppressValueTracking>
                  <tracked>0</tracked>
                  <value>0</value>
                </property>
              </propertySheet>
            </property>
          </propertySheet>
        </processStep>
        <processStep>
          <processStepName>Delete PVC</processStepName>
          <alwaysRun>0</alwaysRun>
          <dependencyJoinType>and</dependencyJoinType>
          <errorHandling>abortJob</errorHandling>
          <processStepType>command</processStepType>
          <subprocedure>RunCommand</subprocedure>
          <subproject>/plugins/EC-Core/project</subproject>
          <tracked>0</tracked>
          <useUtilityResource>1</useUtilityResource>
          <workingDirectory></workingDirectory>
          <acl>
            <inheriting>1</inheriting>
            <tracked>0</tracked>
          </acl>
          <actualParameters>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>commandToRun</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value>kubectl delete pvc -l  app.kubernetes.io/instance=my-guestbook -n qa&#10;kubectl delete ns qa</value>
            </property>
            <property>
              <propertyName>shellToUse</propertyName>
              <expandable>1</expandable>
              <suppressValueTracking>0</suppressValueTracking>
              <tracked>0</tracked>
              <value></value>
            </property>
          </actualParameters>
          <propertySheet>
            <credentialProtected>0</credentialProtected>
            <tracked>0</tracked>
            <acl>
              <inheriting>1</inheriting>
              <tracked>0</tracked>
            </acl>
            <property>
              <propertyName>ec_deploy</propertyName>
              <tracked>0</tracked>
              <propertySheet>
                <credentialProtected>0</credentialProtected>
                <tracked>0</tracked>
                <acl>
                  <inheriting>1</inheriting>
                  <tracked>0</tracked>
                </acl>
                <property>
                  <propertyName>ec_notifierStatus</propertyName>
                  <expandable>1</expandable>
                  <suppressValueTracking>0</suppressValueTracking>
                  <tracked>0</tracked>
                  <value>0</value>
                </property>
              </propertySheet>
            </property>
          </propertySheet>
        </processStep>
        <processDependency>
          <branchType>ALWAYS</branchType>
          <source>processStep-e1ad377b-b5ca-11ed-ad44-024be617296e</source>
          <sourceName>Delete Release</sourceName>
          <target>processStep-63633961-b5d2-11ed-ad44-024be617296e</target>
          <targetName>Delete PVC</targetName>
          <tracked>0</tracked>
        </processDependency>
      </process>
      <tierMap>
        <tierMapName>23bd8b29-b50d-11ed-ad44-024be617296e</tierMapName>
        <applicationName>Guestbook</applicationName>
        <environmentName>Guestbook_QA_Env</environmentName>
        <projectName>Guestbook</projectName>
        <tracked>0</tracked>
        <microserviceMapping>
          <microserviceMappingName>2426fb71-b50d-11ed-95b5-024be617296e</microserviceMappingName>
          <clusterName>guestbook_qa</clusterName>
          <clusterProjectName>Guestbook</clusterProjectName>
          <microserviceName>Guestbook QA</microserviceName>
          <tierMapName>23bd8b29-b50d-11ed-ad44-024be617296e</tierMapName>
          <tracked>0</tracked>
        </microserviceMapping>
      </tierMap>
    </application>
  </project>
</exportedData>
